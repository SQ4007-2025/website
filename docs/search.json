[
  {
    "objectID": "tutorials/tutorial-week-9.html",
    "href": "tutorials/tutorial-week-9.html",
    "title": "Tutorials week 9",
    "section": "",
    "text": "▶ 👨‍🏫 CSS\n▶ 👨‍🏫 DOM\n▶ 👨‍🏫 HTML\n▶ 👨‍🏫 HTTP\n▶ 👨‍🏫 Internet primer\n▶ 👨‍🏫 IP\n▶ 👨‍🏫 JavaScript\n▶ 👨‍🏫 TCP",
    "crumbs": [
      "Tutorials",
      "Tutorial 09 🌐"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-7.html",
    "href": "tutorials/tutorial-week-7.html",
    "title": "Tutorials week 7",
    "section": "",
    "text": "▶ 👨‍🏫 Python",
    "crumbs": [
      "Tutorials",
      "Tutorial 07 🐍"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-5.html",
    "href": "tutorials/tutorial-week-5.html",
    "title": "Tutorials week 5",
    "section": "",
    "text": "▶ 👨‍🏫 Defining custom types\n▶ 👨‍🏫 Dynamic memory allocation\n▶ 👨‍🏫 File pointers\n▶ 👨‍🏫 Hexadecimal\n▶ 👨‍🏫 Pointers",
    "crumbs": [
      "Tutorials",
      "Tutorial 05 🟢"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-3.html",
    "href": "tutorials/tutorial-week-3.html",
    "title": "Tutorials week 3",
    "section": "",
    "text": "▶ 👨‍🏫 Arrays\n▶ 👨‍🏫 Command line arguments\n▶ 👨‍🏫 Functions\n▶ 👨‍🏫 Variables and scope",
    "crumbs": [
      "Tutorials",
      "Tutorial 03 🟢"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-10.html",
    "href": "tutorials/tutorial-week-10.html",
    "title": "Tutorials week 10",
    "section": "",
    "text": "▶ 👨‍🏫 AJAX\n▶ 👨‍🏫 Flask",
    "crumbs": [
      "Tutorials",
      "Tutorial 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_8.html",
    "href": "notes/notes_8.html",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Welcome!\nFlat-File Database\nRelational Databases\nSELECT\nINSERT\nDELETE\nUPDATE\nIMDb\nJOINs\nIndexes\nUsing SQL in Python\nRace Conditions\nSQL Injection Attacks\nSumming Up\n\n\n\n\nIn previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. However, we introduced this new language not for the purpose of learning “just another language.” Instead, we do so because some tools are better for some jobs and not so great for others!\nThis week, we will be continuing more syntax related to Python.\nFurther, we will be integrating this knowledge with data.\nFinally, we will be discussing SQL or Structured Query Language, a domain-specific way by which we can interact with and modify data.\nOverall, one of the goals of this course is to learn to program generally – not simply how to program in the languages described in this course.\n\n\n\n\n\nAs you have likely seen before, data can often be described in patterns of columns and rows.\nSpreadsheets like those created in Microsoft Excel and Google Sheets can be outputted to a csv or comma-separated values file.\nIf you look at a csv file, you’ll notice that the file is flat in that all of our data is stored in a single table represented by a text file. We call this form of data a flat-file database.\nAll data is stored row by row. Each column is separated by a comma or another value.\nPython comes with native support for csv files.\nFirst, download favorites.csv (right click, save as…) and upload it to your file explorer inside our VS Code Sandbox. Second, examining this data, notice that the first row is special in that it defines each column. Then, each record is stored row by row.\nIn your terminal window, type code favorites.py and write code as follows:\n# Prints all favorites in CSV using csv.reader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[1])\n\nNotice that the csv library is imported. Further, we created a reader that will hold the result of csv.reader(file). The csv.reader function reads each row from the file, and in our code, we store the results in reader. print(row[1]), therefore, will print the language from the favorites.csv file.\nYou can improve your code as follows:\n# Stores favorite in a variable\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[1]\n        print(favorite)\n\nNotice that favorite is stored and then printed. Also, notice that we use the next function to skip to the next line of our reader.\nOne of the disadvantages of the above approach is that we are trusting that row[1] is always the favorite. However, what would happen if the columns had been moved around?\nWe can fix this potential issue. Python also allows you to index by the keys of a list. Modify your code as follows:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[\"language\"]\n        print(favorite)\n\nNotice that this example directly utilizes the language key in the print statement. favorite indexes into the reader dictionary of row[\"language\"].\nThis could be further simplified to:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[\"language\"])\n\nTo count the number of favorite languages expressed in the csv file, we can do the following:\n# Counts favorites using variables\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    scratch, c, python = 0, 0, 0\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite == \"Scratch\":\n            scratch += 1\n        elif favorite == \"C\":\n            c += 1\n        elif favorite == \"Python\":\n            python += 1\n\n# Print counts\nprint(f\"Scratch: {scratch}\")\nprint(f\"C: {c}\")\nprint(f\"Python: {python}\")\n\nNotice that each language is counted using if statements. Further, notice the double equal == signs in those if statements.\nPython allows us to use a dictionary to count the counts of each language. Consider the following improvement upon our code:\n# Counts favorites using dictionary\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in counts:\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice that the value in counts with the key favorite is incremented when it exists already. If it does not exist, we define counts[favorite] and set it to 1. Further, the formatted string has been improved to present the counts[favorite].\nPython also allows sorting counts. Improve your code as follows:\n# Sorts favorites by key\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the sorted(counts) at the bottom of the code.\nIf you look at the parameters for the sorted function in the Python documentation, you will find it has many built-in parameters. You can leverage some of these built-in parameters as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=counts.get, reverse=True):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the arguments passed to sorted. The key argument allows you to tell Python the method you wish to use to sort items. In this case counts.get is used to sort by the values. reverse=True tells sorted to sort from largest to smallest.\nPython has numerous libraries that we can utilize in our code. One of these libraries is collections, from which we can import Counter. Counter will allow you to access the counts of each language without the headaches of all the if statements seen in our previous code. You can implement as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\nfrom collections import Counter\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = Counter()\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        counts[favorite] += 1\n\n# Print counts\nfor favorite, count in counts.most_common():\n    print(f\"{favorite}: {count}\")\n\nNotice how counts = Counter() enables the use of this imported Counter class from collections.\nYou can learn more about sorted in the Python Documentation.\n\n\n\n\n\nGoogle, X, and Meta all use relational databases to store their information at scale.\nRelational databases store data in rows and columns in structures called tables.\nSQL allows for four types of commands:\n  Create\n  Read\n  Update\n  Delete\n\nThese four operations are affectionately called CRUD.\nWe can create a database with the SQL syntax CREATE TABLE table (column type, ...);. But where do you run this command?\nsqlite3 is a type of SQL database that has the core features required for this course.\nWe can create a SQL database at the terminal by typing sqlite3 favorites.db. Upon being prompted, we will agree that we want to create favorites.db by pressing y.\nYou will notice a different prompt as we are now using a program called sqlite.\nWe can put sqlite into csv mode by typing .mode csv. Then, we can import our data from our csv file by typing .import favorites.csv favorites. It seems that nothing has happened!\nWe can type .schema to see the structure of the database.\nYou can read items from a table using the syntax SELECT columns FROM table.\nFor example, you can type SELECT * FROM favorites; which will print every row in favorites.\nYou can get a subset of the data using the command SELECT language FROM favorites;.\nSQL supports many commands to access data, including:\n  AVG\n  COUNT\n  DISTINCT\n  LOWER\n  MAX\n  MIN\n  UPPER\n\nFor example, you can type SELECT COUNT(*) FROM favorites;. Further, you can type SELECT DISTINCT language FROM favorites; to get a list of the individual languages within the database. You could even type SELECT COUNT(DISTINCT language) FROM favorites; to get a count of those.\nSQL offers additional commands we can utilize in our queries:\n  WHERE       -- adding a Boolean expression to filter our data\n  LIKE        -- filtering responses more loosely\n  ORDER BY    -- ordering responses\n  LIMIT       -- limiting the number of responses\n  GROUP BY    -- grouping responses together\n\nNotice that we use -- to write a comment in SQL.\n\n\n\n\n\nFor example, we can execute SELECT COUNT(*) FROM favorites WHERE language = 'C';. A count is presented.\nFurther, we could type SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Hello, World';. Notice how the AND is utilized to narrow our results.\nSimilarly, we could execute SELECT language, COUNT(*) FROM favorites GROUP BY language;. This would offer a temporary table that would show the language and count.\nWe could improve this by typing SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);. This will order the resulting table by the count.\nLikewise, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND (problem = 'Hello, World' OR problem = 'Hello, It''s Me');. Do notice that there are two '' marks as to allow the use of single quotes in a way that does not confuse SQL.\nFurther, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem LIKE 'Hello, %'; to find any problems that start with Hello, (including a space).\nWe can also group the values of each language by executing SELECT language, COUNT(*) FROM favorites GROUP BY language;.\nWe can order the output as follows: SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC;.\nWe can even create aliases, like variables in our queries: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC;.\nFinally, we can limit our output to 1 or more values: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC LIMIT 1;.\n\n\n\n\n\nWe can also INSERT into a SQL database utilizing the form INSERT INTO table (column...) VALUES(value, ...);.\nWe can execute INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');.\nYou can verify the addition of this favorite by executing SELECT * FROM favorites;.\n\n\n\n\n\nDELETE allows you to delete parts of your data. For example, you could DELETE FROM favorites WHERE Timestamp IS NULL;. This deletes any record where the Timestamp is NULL.\n\n\n\n\n\nWe can also utilize the UPDATE command to update your data.\nFor example, you can execute UPDATE favorites SET language = 'SQL', problem = 'Fiftyville';. This will result in overwriting all previous statements where C and Scratch were the favorite programming language.\nNotice that these queries have immense power. Accordingly, in the real-world setting, you should consider who has permissions to execute certain commands and if you have backups available!\n\n\n\n\n\nWe can imagine a database that we might want to create to catalog various TV shows. We could create a spreadsheet with columns like title, star, star, star, star, and more stars. A problem with this approach is that it has a lot of wasted space. Some shows may have one star. Others may have dozens.\nWe could separate our database into multiple sheets. We could have a shows sheet, a stars sheet, and a people sheet. On the people sheet, each person could have a unique id. On the shows sheet, each show could have a unique id too. On a third sheet called stars we could relate how each show has people for each show by having a show_id and person_id. While this is an improvement, this is not an ideal database.\nIMDb offers a database of people, shows, writers, stars, genres, and ratings. Each of these tables is related to one another as follows:\n\n\n\nsix boxes that represent various sql tables arrows are drawn to each showing their many relationships with one another\n\n\nAfter downloading shows.db, you can execute sqlite3 shows.db in your terminal window.\nLet’s zero in on the relationship between two tables within the database called shows and ratings. The relationship between these two tables can be illustrated as follows:\n\n\n\ntwo boxes one called shows and the other called ratings\n\n\nTo illustrate the relationship between these tables, we could execute the following command: SELECT * FROM ratings LIMIT 10;. Examining the output, we could execute SELECT * FROM shows LIMIT 10;.\nExamining shows and rating, we can see these have a one-to-one relationship: One show has one rating.\nTo understand the database, upon executing .schema you will find not only each of the tables but the individual fields inside each of these fields.\nMore specifically, you could execute .schema shows to understand the fields inside shows. You can also execute .schema ratings to see the fields inside ratings.\nAs you can see, show_id exists in all of the tables. In the shows table, it is simply called id. This common field between all the fields is called a key. Primary keys are used to identify a unique record in a table. Foreign keys are used to build relationships between tables by pointing to the primary key in another table. You can see in the schema of ratings that show_id is a foreign key that references id in shows.\nBy storing data in a relational database, as above, data can be more efficiently stored.\nIn sqlite, we have five data types, including:\n  BLOB       -- binary large objects that are groups of ones and zeros\n  INTEGER    -- an integer\n  NUMERIC    -- for numbers that are formatted specially like dates\n  REAL       -- like a float\n  TEXT       -- for strings and the like\n\nAdditionally, columns can be set to add special constraints:\n  NOT NULL\n  UNIQUE\n\nWe can further play with this data to understand these relationships. Execute SELECT * FROM ratings;. There are a lot of ratings!\nWe can further limit this data down by executing SELECT show_id FROM ratings WHERE rating &gt;= 6.0 LIMIT 10;. From this query, you can see that there are 10 shows presented. However, we don’t know what show each show_id represents.\nYou can discover what shows these are by executing SELECT * FROM shows WHERE id = 626124;\nWe can further our query to be more efficient by executing:\nSELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM ratings\n    WHERE rating &gt;= 6.0\n    LIMIT 10\n)\n\nNotice that this query nests together two queries. An inner query is used by an outer query.\n\n\n\n\n\nWe are pulling data from shows and ratings. Notice how both shows and ratings have an id in common.\nHow could we combine tables temporarily? Tables could be joined together using the JOIN command.\nExecute the following command:\nSELECT * FROM shows\n  JOIN ratings on shows.id = ratings.show_id\n  WHERE rating &gt;= 6.0\n  LIMIT 10;\n\nNotice this results in a wider table than we have previously seen.\nWhere the previous queries have illustrated the one-to-one relationship between these keys, let’s examine some one-to-many relationships. Focusing on the genres table, execute the following:\nSELECT * FROM genres\nLIMIT 10;\n\nNotice how this provides us a sense of the raw data. You might notice that one show has three values. This is a one-to-many relationship.\nWe can learn more about the genres table by typing .schema genres.\nExecute the following command to learn more about the various comedies in the database:\nSELECT title FROM shows\nWHERE id IN (\n  SELECT show_id FROM genres\n  WHERE genre = 'Comedy'\n  LIMIT 10\n);\n\nNotice how this produces a list of comedies, including Catweazle.\nTo learn more about Catweazle, by joining various tables through a join:\nSELECT * FROM shows\nJOIN genres\nON shows.id = genres.show_id\nWHERE id = 63881;\n\nNotice that this results in a temporary table. It is fine to have a duplicate table.\nIn contrast to one-to-one and one-to-many relationships, there may be many-to-many relationships.\nWe can learn more about the show The Office and the actors in that show by executing the following command:\nSELECT name FROM people WHERE id IN \n    (SELECT person_id FROM stars WHERE show_id = \n        (SELECT id FROM shows WHERE title = 'The Office' AND year = 2005));\n\nNotice that this results in a table that includes the names of various stars through nested queries.\nWe find all the shows in which Steve Carell starred:\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nThis results in a list of titles of shows wherein Steve Carell starred.\nThis could also be expressed in this way:\nSELECT title FROM shows, stars, people \nWHERE shows.id = stars.show_id\nAND people.id = stars.person_id\nAND name = 'Steve Carell';\n\nThe wildcard % operator can be used to find all people whose names start with Steve C one could employ the syntax SELECT * FROM people WHERE name LIKE 'Steve C%';.\n\n\n\n\n\nWhile relational databases have the ability to be faster and more robust than utilizing a CSV file, data can be optimized within a table using indexes.\nIndexes can be utilized to speed up our queries.\nWe can track the speed of our queries by executing .timer on in sqlite3.\nTo understand how indexes can speed up our queries, run the following: SELECT * FROM shows WHERE title = 'The Office'; Notice the time that displays after the query executes.\nThen, we can create an index with the syntax CREATE INDEX title_index ON shows (title);. This tells sqlite3 to create an index and perform some special under-the-hood optimization relating to this column title.\nThis will create a data structure called a B Tree, a data structure that looks similar to a binary tree. However, unlike a binary tree, there can be more than two child nodes.\n\n\n\none node at the top from which come four children and below that there are three children coming from one of the nodes and two from another two from another and three from another\n\n\nFurther, we can create indexes as follows:\nCREATE INDEX name_index ON people (name);\nCREATE INDEX person_index ON stars (person_id);\n\nRunning the query and you will notice that the query runs much more quickly!\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nUnfortunately, indexing all columns would result in utilizing more storage space. Therefore, there is a tradeoff for enhanced speed.\n\n\n\n\n\nTo assist in working with SQL in this course, the CS50 Library can be utilized as follows in your code:\nfrom cs50 import SQL\n\nSimilar to previous uses of the CS50 Library, this library will assist with the complicated steps of utilizing SQL within your Python code.\nYou can read more about the CS50 Library’s SQL functionality in the documentation.\nUsing our new knowledge of SQL, we can now leverage Python alongside.\nModify your code for favorites.py as follows:\n# Searches database popularity of a problem\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL(\"sqlite:///favorites.db\")\n\n# Prompt user for favorite\nfavorite = input(\"Favorite: \")\n\n# Search for title\nrows = db.execute(\"SELECT COUNT(*) AS n FROM favorites WHERE language = ?\", favorite)\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row[\"n\"])\n\nNotice that db = SQL(\"sqlite:///favorites.db\") provides Python the location of the database file. Then, the line that begins with rows executes SQL commands utilizing db.execute. Indeed, this command passes the syntax within the quotation marks to the db.execute function. We can issue any SQL command using this syntax. Further, notice that rows is returned as a list of dictionaries. In this case, there is only one result, one row, returned to the rows list as a dictionary.\n\n\n\n\n\nUtilization of SQL can sometimes result in some problems.\nYou can imagine a case where multiple users could be accessing the same database and executing commands at the same time.\nThis could result in glitches where code is interrupted by other people’s actions. This could result in a loss of data.\nBuilt-in SQL features such as BEGIN TRANSACTION, COMMIT, and ROLLBACK help avoid some of these race condition problems.\n\n\n\n\n\nNow, still considering the code above, you might be wondering what the ? question marks do above. One of the problems that can arise in real-world applications of SQL is what is called an injection attack. An injection attack is where a malicious actor could input malicious SQL code.\nFor example, consider a login screen as follows:\n\n\n\nharvard key login screen with username and password fields\n\n\nWithout the proper protections in our own code, a bad actor could run malicious code. Consider the following:\nrows = db.execute(\"SELECT COUNT(*) FROM users WHERE username = ? AND password = ?\", username, password)\n\nNotice that because the ? is in place, validation can be run on favorite before it is blindly accepted by the query.\nYou never want to utilize formatted strings in queries as above or blindly trust the user’s input.\nUtilizing the CS50 Library, the library will sanitize and remove any potentially malicious characters.\n\n\n\n\nIn this lesson, you learned more syntax related to Python. Further, you learned how to integrate this knowledge with data in the form of flat-file and relational databases. Finally, you learned about SQL. Specifically, we discussed…\n\nFlat-file databases\nRelational databases\nSQL commands such as SELECT, CREATE, INSERT, DELETE, and UPDATE.\nPrimary and foreign keys\nJOINs\nIndexes\nUsing SQL in Python\nRace conditions\nSQL injection attacks\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#welcome",
    "href": "notes/notes_8.html#welcome",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "In previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. However, we introduced this new language not for the purpose of learning “just another language.” Instead, we do so because some tools are better for some jobs and not so great for others!\nThis week, we will be continuing more syntax related to Python.\nFurther, we will be integrating this knowledge with data.\nFinally, we will be discussing SQL or Structured Query Language, a domain-specific way by which we can interact with and modify data.\nOverall, one of the goals of this course is to learn to program generally – not simply how to program in the languages described in this course.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#flat-file-database",
    "href": "notes/notes_8.html#flat-file-database",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "As you have likely seen before, data can often be described in patterns of columns and rows.\nSpreadsheets like those created in Microsoft Excel and Google Sheets can be outputted to a csv or comma-separated values file.\nIf you look at a csv file, you’ll notice that the file is flat in that all of our data is stored in a single table represented by a text file. We call this form of data a flat-file database.\nAll data is stored row by row. Each column is separated by a comma or another value.\nPython comes with native support for csv files.\nFirst, download favorites.csv (right click, save as…) and upload it to your file explorer inside our VS Code Sandbox. Second, examining this data, notice that the first row is special in that it defines each column. Then, each record is stored row by row.\nIn your terminal window, type code favorites.py and write code as follows:\n# Prints all favorites in CSV using csv.reader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[1])\n\nNotice that the csv library is imported. Further, we created a reader that will hold the result of csv.reader(file). The csv.reader function reads each row from the file, and in our code, we store the results in reader. print(row[1]), therefore, will print the language from the favorites.csv file.\nYou can improve your code as follows:\n# Stores favorite in a variable\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[1]\n        print(favorite)\n\nNotice that favorite is stored and then printed. Also, notice that we use the next function to skip to the next line of our reader.\nOne of the disadvantages of the above approach is that we are trusting that row[1] is always the favorite. However, what would happen if the columns had been moved around?\nWe can fix this potential issue. Python also allows you to index by the keys of a list. Modify your code as follows:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[\"language\"]\n        print(favorite)\n\nNotice that this example directly utilizes the language key in the print statement. favorite indexes into the reader dictionary of row[\"language\"].\nThis could be further simplified to:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[\"language\"])\n\nTo count the number of favorite languages expressed in the csv file, we can do the following:\n# Counts favorites using variables\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    scratch, c, python = 0, 0, 0\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite == \"Scratch\":\n            scratch += 1\n        elif favorite == \"C\":\n            c += 1\n        elif favorite == \"Python\":\n            python += 1\n\n# Print counts\nprint(f\"Scratch: {scratch}\")\nprint(f\"C: {c}\")\nprint(f\"Python: {python}\")\n\nNotice that each language is counted using if statements. Further, notice the double equal == signs in those if statements.\nPython allows us to use a dictionary to count the counts of each language. Consider the following improvement upon our code:\n# Counts favorites using dictionary\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in counts:\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice that the value in counts with the key favorite is incremented when it exists already. If it does not exist, we define counts[favorite] and set it to 1. Further, the formatted string has been improved to present the counts[favorite].\nPython also allows sorting counts. Improve your code as follows:\n# Sorts favorites by key\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the sorted(counts) at the bottom of the code.\nIf you look at the parameters for the sorted function in the Python documentation, you will find it has many built-in parameters. You can leverage some of these built-in parameters as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=counts.get, reverse=True):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the arguments passed to sorted. The key argument allows you to tell Python the method you wish to use to sort items. In this case counts.get is used to sort by the values. reverse=True tells sorted to sort from largest to smallest.\nPython has numerous libraries that we can utilize in our code. One of these libraries is collections, from which we can import Counter. Counter will allow you to access the counts of each language without the headaches of all the if statements seen in our previous code. You can implement as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\nfrom collections import Counter\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = Counter()\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        counts[favorite] += 1\n\n# Print counts\nfor favorite, count in counts.most_common():\n    print(f\"{favorite}: {count}\")\n\nNotice how counts = Counter() enables the use of this imported Counter class from collections.\nYou can learn more about sorted in the Python Documentation.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#relational-databases",
    "href": "notes/notes_8.html#relational-databases",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Google, X, and Meta all use relational databases to store their information at scale.\nRelational databases store data in rows and columns in structures called tables.\nSQL allows for four types of commands:\n  Create\n  Read\n  Update\n  Delete\n\nThese four operations are affectionately called CRUD.\nWe can create a database with the SQL syntax CREATE TABLE table (column type, ...);. But where do you run this command?\nsqlite3 is a type of SQL database that has the core features required for this course.\nWe can create a SQL database at the terminal by typing sqlite3 favorites.db. Upon being prompted, we will agree that we want to create favorites.db by pressing y.\nYou will notice a different prompt as we are now using a program called sqlite.\nWe can put sqlite into csv mode by typing .mode csv. Then, we can import our data from our csv file by typing .import favorites.csv favorites. It seems that nothing has happened!\nWe can type .schema to see the structure of the database.\nYou can read items from a table using the syntax SELECT columns FROM table.\nFor example, you can type SELECT * FROM favorites; which will print every row in favorites.\nYou can get a subset of the data using the command SELECT language FROM favorites;.\nSQL supports many commands to access data, including:\n  AVG\n  COUNT\n  DISTINCT\n  LOWER\n  MAX\n  MIN\n  UPPER\n\nFor example, you can type SELECT COUNT(*) FROM favorites;. Further, you can type SELECT DISTINCT language FROM favorites; to get a list of the individual languages within the database. You could even type SELECT COUNT(DISTINCT language) FROM favorites; to get a count of those.\nSQL offers additional commands we can utilize in our queries:\n  WHERE       -- adding a Boolean expression to filter our data\n  LIKE        -- filtering responses more loosely\n  ORDER BY    -- ordering responses\n  LIMIT       -- limiting the number of responses\n  GROUP BY    -- grouping responses together\n\nNotice that we use -- to write a comment in SQL.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#select",
    "href": "notes/notes_8.html#select",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "For example, we can execute SELECT COUNT(*) FROM favorites WHERE language = 'C';. A count is presented.\nFurther, we could type SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Hello, World';. Notice how the AND is utilized to narrow our results.\nSimilarly, we could execute SELECT language, COUNT(*) FROM favorites GROUP BY language;. This would offer a temporary table that would show the language and count.\nWe could improve this by typing SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);. This will order the resulting table by the count.\nLikewise, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND (problem = 'Hello, World' OR problem = 'Hello, It''s Me');. Do notice that there are two '' marks as to allow the use of single quotes in a way that does not confuse SQL.\nFurther, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem LIKE 'Hello, %'; to find any problems that start with Hello, (including a space).\nWe can also group the values of each language by executing SELECT language, COUNT(*) FROM favorites GROUP BY language;.\nWe can order the output as follows: SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC;.\nWe can even create aliases, like variables in our queries: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC;.\nFinally, we can limit our output to 1 or more values: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC LIMIT 1;.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#insert",
    "href": "notes/notes_8.html#insert",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can also INSERT into a SQL database utilizing the form INSERT INTO table (column...) VALUES(value, ...);.\nWe can execute INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');.\nYou can verify the addition of this favorite by executing SELECT * FROM favorites;.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#delete",
    "href": "notes/notes_8.html#delete",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "DELETE allows you to delete parts of your data. For example, you could DELETE FROM favorites WHERE Timestamp IS NULL;. This deletes any record where the Timestamp is NULL.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#update",
    "href": "notes/notes_8.html#update",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can also utilize the UPDATE command to update your data.\nFor example, you can execute UPDATE favorites SET language = 'SQL', problem = 'Fiftyville';. This will result in overwriting all previous statements where C and Scratch were the favorite programming language.\nNotice that these queries have immense power. Accordingly, in the real-world setting, you should consider who has permissions to execute certain commands and if you have backups available!",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#imdb",
    "href": "notes/notes_8.html#imdb",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can imagine a database that we might want to create to catalog various TV shows. We could create a spreadsheet with columns like title, star, star, star, star, and more stars. A problem with this approach is that it has a lot of wasted space. Some shows may have one star. Others may have dozens.\nWe could separate our database into multiple sheets. We could have a shows sheet, a stars sheet, and a people sheet. On the people sheet, each person could have a unique id. On the shows sheet, each show could have a unique id too. On a third sheet called stars we could relate how each show has people for each show by having a show_id and person_id. While this is an improvement, this is not an ideal database.\nIMDb offers a database of people, shows, writers, stars, genres, and ratings. Each of these tables is related to one another as follows:\n\n\n\nsix boxes that represent various sql tables arrows are drawn to each showing their many relationships with one another\n\n\nAfter downloading shows.db, you can execute sqlite3 shows.db in your terminal window.\nLet’s zero in on the relationship between two tables within the database called shows and ratings. The relationship between these two tables can be illustrated as follows:\n\n\n\ntwo boxes one called shows and the other called ratings\n\n\nTo illustrate the relationship between these tables, we could execute the following command: SELECT * FROM ratings LIMIT 10;. Examining the output, we could execute SELECT * FROM shows LIMIT 10;.\nExamining shows and rating, we can see these have a one-to-one relationship: One show has one rating.\nTo understand the database, upon executing .schema you will find not only each of the tables but the individual fields inside each of these fields.\nMore specifically, you could execute .schema shows to understand the fields inside shows. You can also execute .schema ratings to see the fields inside ratings.\nAs you can see, show_id exists in all of the tables. In the shows table, it is simply called id. This common field between all the fields is called a key. Primary keys are used to identify a unique record in a table. Foreign keys are used to build relationships between tables by pointing to the primary key in another table. You can see in the schema of ratings that show_id is a foreign key that references id in shows.\nBy storing data in a relational database, as above, data can be more efficiently stored.\nIn sqlite, we have five data types, including:\n  BLOB       -- binary large objects that are groups of ones and zeros\n  INTEGER    -- an integer\n  NUMERIC    -- for numbers that are formatted specially like dates\n  REAL       -- like a float\n  TEXT       -- for strings and the like\n\nAdditionally, columns can be set to add special constraints:\n  NOT NULL\n  UNIQUE\n\nWe can further play with this data to understand these relationships. Execute SELECT * FROM ratings;. There are a lot of ratings!\nWe can further limit this data down by executing SELECT show_id FROM ratings WHERE rating &gt;= 6.0 LIMIT 10;. From this query, you can see that there are 10 shows presented. However, we don’t know what show each show_id represents.\nYou can discover what shows these are by executing SELECT * FROM shows WHERE id = 626124;\nWe can further our query to be more efficient by executing:\nSELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM ratings\n    WHERE rating &gt;= 6.0\n    LIMIT 10\n)\n\nNotice that this query nests together two queries. An inner query is used by an outer query.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#joins",
    "href": "notes/notes_8.html#joins",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We are pulling data from shows and ratings. Notice how both shows and ratings have an id in common.\nHow could we combine tables temporarily? Tables could be joined together using the JOIN command.\nExecute the following command:\nSELECT * FROM shows\n  JOIN ratings on shows.id = ratings.show_id\n  WHERE rating &gt;= 6.0\n  LIMIT 10;\n\nNotice this results in a wider table than we have previously seen.\nWhere the previous queries have illustrated the one-to-one relationship between these keys, let’s examine some one-to-many relationships. Focusing on the genres table, execute the following:\nSELECT * FROM genres\nLIMIT 10;\n\nNotice how this provides us a sense of the raw data. You might notice that one show has three values. This is a one-to-many relationship.\nWe can learn more about the genres table by typing .schema genres.\nExecute the following command to learn more about the various comedies in the database:\nSELECT title FROM shows\nWHERE id IN (\n  SELECT show_id FROM genres\n  WHERE genre = 'Comedy'\n  LIMIT 10\n);\n\nNotice how this produces a list of comedies, including Catweazle.\nTo learn more about Catweazle, by joining various tables through a join:\nSELECT * FROM shows\nJOIN genres\nON shows.id = genres.show_id\nWHERE id = 63881;\n\nNotice that this results in a temporary table. It is fine to have a duplicate table.\nIn contrast to one-to-one and one-to-many relationships, there may be many-to-many relationships.\nWe can learn more about the show The Office and the actors in that show by executing the following command:\nSELECT name FROM people WHERE id IN \n    (SELECT person_id FROM stars WHERE show_id = \n        (SELECT id FROM shows WHERE title = 'The Office' AND year = 2005));\n\nNotice that this results in a table that includes the names of various stars through nested queries.\nWe find all the shows in which Steve Carell starred:\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nThis results in a list of titles of shows wherein Steve Carell starred.\nThis could also be expressed in this way:\nSELECT title FROM shows, stars, people \nWHERE shows.id = stars.show_id\nAND people.id = stars.person_id\nAND name = 'Steve Carell';\n\nThe wildcard % operator can be used to find all people whose names start with Steve C one could employ the syntax SELECT * FROM people WHERE name LIKE 'Steve C%';.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#indexes",
    "href": "notes/notes_8.html#indexes",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "While relational databases have the ability to be faster and more robust than utilizing a CSV file, data can be optimized within a table using indexes.\nIndexes can be utilized to speed up our queries.\nWe can track the speed of our queries by executing .timer on in sqlite3.\nTo understand how indexes can speed up our queries, run the following: SELECT * FROM shows WHERE title = 'The Office'; Notice the time that displays after the query executes.\nThen, we can create an index with the syntax CREATE INDEX title_index ON shows (title);. This tells sqlite3 to create an index and perform some special under-the-hood optimization relating to this column title.\nThis will create a data structure called a B Tree, a data structure that looks similar to a binary tree. However, unlike a binary tree, there can be more than two child nodes.\n\n\n\none node at the top from which come four children and below that there are three children coming from one of the nodes and two from another two from another and three from another\n\n\nFurther, we can create indexes as follows:\nCREATE INDEX name_index ON people (name);\nCREATE INDEX person_index ON stars (person_id);\n\nRunning the query and you will notice that the query runs much more quickly!\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nUnfortunately, indexing all columns would result in utilizing more storage space. Therefore, there is a tradeoff for enhanced speed.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#using-sql-in-python",
    "href": "notes/notes_8.html#using-sql-in-python",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "To assist in working with SQL in this course, the CS50 Library can be utilized as follows in your code:\nfrom cs50 import SQL\n\nSimilar to previous uses of the CS50 Library, this library will assist with the complicated steps of utilizing SQL within your Python code.\nYou can read more about the CS50 Library’s SQL functionality in the documentation.\nUsing our new knowledge of SQL, we can now leverage Python alongside.\nModify your code for favorites.py as follows:\n# Searches database popularity of a problem\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL(\"sqlite:///favorites.db\")\n\n# Prompt user for favorite\nfavorite = input(\"Favorite: \")\n\n# Search for title\nrows = db.execute(\"SELECT COUNT(*) AS n FROM favorites WHERE language = ?\", favorite)\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row[\"n\"])\n\nNotice that db = SQL(\"sqlite:///favorites.db\") provides Python the location of the database file. Then, the line that begins with rows executes SQL commands utilizing db.execute. Indeed, this command passes the syntax within the quotation marks to the db.execute function. We can issue any SQL command using this syntax. Further, notice that rows is returned as a list of dictionaries. In this case, there is only one result, one row, returned to the rows list as a dictionary.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#race-conditions",
    "href": "notes/notes_8.html#race-conditions",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Utilization of SQL can sometimes result in some problems.\nYou can imagine a case where multiple users could be accessing the same database and executing commands at the same time.\nThis could result in glitches where code is interrupted by other people’s actions. This could result in a loss of data.\nBuilt-in SQL features such as BEGIN TRANSACTION, COMMIT, and ROLLBACK help avoid some of these race condition problems.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#sql-injection-attacks",
    "href": "notes/notes_8.html#sql-injection-attacks",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Now, still considering the code above, you might be wondering what the ? question marks do above. One of the problems that can arise in real-world applications of SQL is what is called an injection attack. An injection attack is where a malicious actor could input malicious SQL code.\nFor example, consider a login screen as follows:\n\n\n\nharvard key login screen with username and password fields\n\n\nWithout the proper protections in our own code, a bad actor could run malicious code. Consider the following:\nrows = db.execute(\"SELECT COUNT(*) FROM users WHERE username = ? AND password = ?\", username, password)\n\nNotice that because the ? is in place, validation can be run on favorite before it is blindly accepted by the query.\nYou never want to utilize formatted strings in queries as above or blindly trust the user’s input.\nUtilizing the CS50 Library, the library will sanitize and remove any potentially malicious characters.",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_8.html#summing-up",
    "href": "notes/notes_8.html#summing-up",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "In this lesson, you learned more syntax related to Python. Further, you learned how to integrate this knowledge with data in the form of flat-file and relational databases. Finally, you learned about SQL. Specifically, we discussed…\n\nFlat-file databases\nRelational databases\nSQL commands such as SELECT, CREATE, INSERT, DELETE, and UPDATE.\nPrimary and foreign keys\nJOINs\nIndexes\nUsing SQL in Python\nRace conditions\nSQL injection attacks\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 08 📊"
    ]
  },
  {
    "objectID": "notes/notes_6.html",
    "href": "notes/notes_6.html",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Welcome!\nData Structures\nQueues\nStacks\nJack Learns the Facts\nResizing Arrays\nArrays\nLinked Lists\nTrees\nDictionaries\nHashing and Hash Tables\nTries\nSumming Up\n\n\n\n\nAll the prior weeks have presented you with the fundamental building blocks of programming.\nAll you have learned in C will enable you to implement these building blocks in higher-level programming languages such as Python.\nEach week, concepts have become more and more challenging, like a hill becoming more and more steep. This week, the challenge evens off as we explore data structures.\nTo date, you have learned about how an array can organize data in memory.\nToday, we are going to talk about organizing data in memory and design possibilities that emerge from your growing knowledge.\n\n\n\n\n\nData structures essentially are forms of organization in memory.\nThere are many ways to organize data in memory.\nAbstract data types are those that we can conceptually imagine. When learning about computer science, it’s often useful to begin with these conceptual data structures. Learning these will make it easier later to understand how to implement more concrete data structures.\n\n\n\n\n\nQueues are one form of abstract data structure.\nQueues have specific properties. Namely, they are FIFO or “first in first out.” You can imagine yourself in a line for a ride at an amusement park. The first person in the line gets to go on the ride first. The last person gets to go on the ride last.\nQueues have specific actions associated with them. For example, an item can be enqueued; that is, the item can join the line or queue. Further, an item can be dequeued or leave the queue once it reaches the front of the line.\nIn code, you can imagine a queue as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nqueue;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the queue actually is, regardless of how much it can hold.\n\n\n\n\n\nQueues contrast a stack. Fundamentally, the properties of a stack are different than those of a queue. Specifically, it is LIFO or “last in first out.” Just like stacking trays in a dining hall, a tray that is placed in a stack last is the first that may be picked up.\nStacks have specific actions associated with them. For example, push places something on top of a stack. Pop is removing something from the top of the stack.\nIn code, you might imagine a stack as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nstack;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the stack actually is, regardless of how much it could hold. Notice that this code is the same as the code from the queue.\nYou might imagine that the above code has a limitation. Since the capacity of the array is always predetermined in this code. Therefore, the stack may always be oversized. You might imagine only using one place in the stack out of 5000.\nIt would be nice for our stack to be dynamic – able to grow as items are added to it.\n\n\n\n\n\nWe watched a video called Jack Learns the Facts by Professor Shannon Duvall of Elon University.\n\n\n\n\n\nRewinding to Week 2, we introduced you to your first data structure.\nAn array is a block of contiguous memory.\nYou might imagine an array as follows:\n\n\n\nthree boxes with 1 2 3\n\n\nIn memory, there are other values being stored by other programs, functions, and variables. Many of these may be unused garbage values that were utilized at one point but are available now for use.\n\n\n\nthree boxes with 1 2 3 among lots of other memory elements\n\n\nImagine you wanted to store a fourth value 4 in our array. What would be needed is to allocate a new area of memory and move the old array to a new one? Initially, this new area of memory would be populated with garbage values.\n\n\n\nThree boxes with 1 2 3 above four boxes with garbage values\n\n\nAs values are added to this new area of memory, old garbage values would be overwritten.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 and a garbage value\n\n\nEventually, all old garbage values would be overwritten with our new data.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 4\n\n\nOne of the drawbacks of this approach is that it’s bad design: Every time we add a number, we have to copy the array item by item.\n\n\n\n\n\nWouldn’t it be nice if we were able to put the 4 somewhere else in memory? By definition, this would no longer be an array because 4 would no longer be in contiguous memory. How could we connect different locations in memory?\nIn your terminal, type code list.c and write code as follows:\n// Implements a list of numbers with an array of fixed size\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int list[3];\n\n    // Initialize list with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Print list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n}\n\nNotice that the above is very much like what we learned earlier in this course. Memory is preallocated for three items.\nBuilding upon our knowledge obtained more recently, we can leverage our understanding of pointers to create a better design in this code. Modify your code as follows:\n// Implements a list of numbers with an array of dynamic size\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // List of size 4\n    int *tmp = malloc(4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    // Copy list of size 3 into list of size 4\n    for (int i = 0; i &lt; 3; i++)\n    {\n        tmp[i] = list[i];\n    }\n\n    // Add number to list of size 4\n    tmp[3] = 4;\n\n    // Free list of size 3\n    free(list);\n\n    // Remember list of size 4\n    list = tmp;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that a list of size three integers is created. Then, three memory addresses can be assigned the values 1, 2, and 3. Then, a list of size four is created. Next, the list is copied from the first to the second. The value for the 4 is added to the tmp list. Since the block of memory that list points to is no longer used, it is freed using the command free(list). Finally, the compiler is told to point list pointer now to the block of memory that tmp points to. The contents of list are printed and then freed. Further, notice the inclusion of stdlib.h.\nIt’s useful to think about list and tmp as both signs that point to a chunk of memory. As in the example above, list at one point pointed to an array of size 3. By the end, list was told to point to a chunk of memory of size 4. Technically, by the end of the above code, tmp and list both pointed to the same block of memory.\nOne way by which we can copy the array without a for loop is by using realloc:\n// Implements a list of numbers with an array of dynamic size using realloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Resize list to be of size 4\n    int *tmp = realloc(list, 4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n    list = tmp;\n\n    // Add number to list\n    list[3] = 4;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that the list is reallocated to a new array via realloc.\nOne may be tempted to allocate way more memory than required for the list, such as 30 items instead of the required 3 or 4. However, this is bad design as it taxes system resources when they are not potentially needed. Further, there is little guarantee that memory for more than 30 items will be needed eventually.\n\n\n\n\n\nIn recent weeks, you have learned about three useful primitives. A struct is a data type that you can define yourself. A . in dot notation allows you to access variables inside that structure. The * operator is used to declare a pointer or dereference a variable.\nToday, you are introduced to the -&gt; operator. It is an arrow. This operator goes to an address and looks inside a structure.\nA linked list is one of the most powerful data structures within C. A linked list allows you to include values that are located in varying areas of memory. Further, they allow you to dynamically grow and shrink the list as you desire.\nYou might imagine three values stored in three different areas of memory as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory\n\n\nHow could one stitch together these values in a list?\nWe could imagine the data pictured above as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached\n\n\nWe could utilize more memory to keep track of where the next item using a pointer.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes\n\n\nNotice that NULL is utilized to indicate that nothing else is next in the list.\nBy convention, we would keep one more element in memory, a pointer, that keeps track of the first item in the list, called the head of the list.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes now with a final box with the memory address of the first box\n\n\nAbstracting away the memory addresses, the list would appear as follows:\n\n\n\nThree boxes with in separate areas of memory with smaller boxes with a final box where the one box points to another and another until the end of the boxes\n\n\nThese boxes are called nodes. A node contains both an item and a pointer called next. In code, you can imagine a node as follows:\ntypedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nNotice that the item contained within this node is an integer called number. Second, a pointer to a node called next is included, which will point to another node somewhere in memory.\nWe can recreate list.c to utilize a linked list:\n// Start to build a linked list by prepending nodes\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n    return 0;\n}\n\nFirst, a node is defined as a struct. For each element of the list, memory for a node is allocated via malloc to the size of a node. n-&gt;number (or n’s number field) is assigned an integer. n-&gt;next (or n’s next field) is assigned null. Then, the node is placed at the start of the list at memory location list.\nConceptually, we can imagine the process of creating a linked list. First, node *list is declared, but it is of a garbage value.\n\n\n\nOne garbage value\n\n\nNext, a node called n is allocated in memory.\n\n\n\nOne garbage value called n with another pointer called list\n\n\nNext, the number of node is assigned the value 1.\n\n\n\nn pointing to a node with 1 as the number and garbage value as the next\n\n\nNext, the node’s next field is assigned NULL.\n\n\n\nn pointing to a node with 1 as the number and null as the value of next\n\n\nNext, list is pointed at the memory location to where n points. n and list now point to the same place.\n\n\n\nn and list both pointing to a node with 1 as the number and null as the value of next\n\n\nA new node is then created. Both the number and next field are filled with garbage values.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with garbage values\n\n\nThe number value of n’s node (the new node) is updated to 2.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and garbage as the next\n\n\nAlso, the next field is updated as well.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nMost importantly, we do not want to lose our connection to any of these nodes lest they be lost forever. Accordingly, n’s next field is pointed to the same memory location as list.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nFinally, list is updated to point at n. We now have a linked list of two items.\n\n\n\nlist pointing to a node with 1 as the number and next pointing to a node with an n pointing the same place the node with one points to a node with 2 as the number and null as the next\n\n\nLooking at our diagram of the list, we can see that the last number added is the first number that appears in the list. Accordingly, if we print the list in order, starting with the first node, the list will appear out of order.\nWe can print the list in the correct order as follows:\n// Print nodes in a linked list with a while loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n\n    // Print numbers\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n        ptr = ptr-&gt;next;\n    }\n    return 0;\n}\n\nNotice that node *ptr = list creates a temporary variable that points at the same spot that list points to. The while prints what at the node ptr points to, and then updates ptr to point to the next node in the list.\nIn this example, inserting into the list is always in the order of (O(1)), as it only takes a very small number of steps to insert at the front of a list.\nConsidering the amount of time required to search this list, it is in the order of (O(n)), because in the worst case the entire list must always be searched to find an item. The time complexity for adding a new element to the list will depend on where that element is added. This is illustrated in the examples below.\nLinked lists are not stored in a contiguous block of memory. They can grow as large as you wish, provided that enough system resources exist. The downside, however, is that more memory is required to keep track of the list instead of an array. For each element you must store not just the value of the element, but also a pointer to the next node. Further, linked lists cannot be indexed into like is possible in an array because we need to pass through the first (n - 1) elements to find the location of the (n)th element. Because of this, the list pictured above must be linearly searched. Binary search, therefore, is not possible in a list constructed as above.\nFurther, you could place numbers at the end of the list as illustrated in this code:\n// Appends numbers to a linked list\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            // This node is the whole list\n            list = n;\n        }\n\n        // If list has numbers already\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this code walks down this list to find the end. When appending an element (adding to the end of the list) our code will run in (O(n)), as we have to go through our entire list before we can add the final element. Further, notice that a temporary variable called next is used to track ptr-&gt;next.\nFurther, you could sort your list as items are added:\n// Implements a sorted linked list of numbers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            list = n;\n        }\n\n        // If number belongs at beginning of list\n        else if (n-&gt;number &lt; list-&gt;number)\n        {\n            n-&gt;next = list;\n            list = n; \n        }\n\n        // If number belongs later in list\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n\n                // If in middle of list\n                if (n-&gt;number &lt; ptr-&gt;next-&gt;number)\n                {\n                    n-&gt;next = ptr-&gt;next;\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this list is sorted as it is built. To insert an element in this specific order, our code will still run in (O(n)) for each insertion, as in the worst case we will have to look through all current elements.\nThis code may seem complicated. However, notice that with pointers and the syntax above, we can stitch data together in different places in memory.\n\n\n\n\n\nArrays offer contiguous memory that can be searched quickly. Arrays also offered the opportunity to engage in binary search.\nCould we combine the best of both arrays and linked lists?\nBinary search trees are another data structure that can be used to store data more efficiently so that it can be searched and retrieved.\nYou can imagine a sorted sequence of numbers.\n\n\n\n1 2 3 4 5 6 7 in boxes next to each other\n\n\nImagine then that the center value becomes the top of a tree. Those that are less than this value are placed to the left. Those values that are more than this value are to the right.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those\n\n\nPointers can then be used to point to the correct location of each area of memory such that each of these nodes can be connected.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those arrows connect them in a tree formation\n\n\nIn code, this can be implemented as follows.\n// Implements a list of numbers as a binary search tree\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Represents a node\ntypedef struct node\n{\n    int number;\n    struct node *left;\n    struct node *right;\n}\nnode;\n\nvoid free_tree(node *root);\nvoid print_tree(node *root);\n\nint main(void)\n{\n    // Tree of size 0\n    node *tree = NULL;\n\n    // Add number to list\n    node *n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 1;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;left = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 3;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;right = n;\n\n    // Print tree\n    print_tree(tree);\n\n    // Free tree\n    free_tree(tree);\n    return 0;\n}\n\nvoid free_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    free_tree(root-&gt;left);\n    free_tree(root-&gt;right);\n    free(root);\n}\n\nvoid print_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    print_tree(root-&gt;left);\n    printf(\"%i\\n\", root-&gt;number);\n    print_tree(root-&gt;right);\n}\n\nNotice this search function begins by going to the location of tree. Then, it uses recursion to search for number. The free_tree function recursively frees the tree. print_tree recursively prints the tree.\nA tree like the above offers dynamism that an array does not offer. It can grow and shrink as we wish.\nFurther, this structure offers a search time of (O(log n)) when the tree is balanced.\n\n\n\n\n\nDictionaries are another data structure.\nDictionaries, like actual book-form dictionaries that have a word and a definition, have a key and a value.\nThe holy grail of algorithmic time complexity is (O(1)) or constant time. That is, the ultimate is for access to be instantaneous.\n\n\n\na graph of various time complexities where O of log n is second best and O of 1 is best\n\n\nDictionaries can offer this speed of access through hashing.\n\n\n\n\n\nHashing is the idea of taking a value and being able to output a value that becomes a shortcut to it later.\nFor example, hashing apple may hash as a value of 1, and berry may be hashed as 2. Therefore, finding apple is as easy as asking the hash algorithm where apple is stored. While not ideal in terms of design, ultimately, putting all a’s in one bucket and b’s in another, this concept of bucketizing hashed values illustrates how you can use this concept: a hashed value can be used to shortcut finding such a value.\nA hash function is an algorithm that reduces a larger value to something small and predictable. Generally, this function takes in an item you wish to add to your hash table, and returns an integer representing the array index in which the item should be placed.\nA hash table is a fantastic combination of both arrays and linked lists. When implemented in code, a hash table is an array of pointers to nodes.\nA hash table could be imagined as follows:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet\n\n\nNotice that this is an array that is assigned each value of the alphabet.\nThen, at each location of the array, a linked list is used to track each value being stored there:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet with various names from the mario universe emerging to the right luigi is with l and mario is with m\n\n\nCollisions are when you add values to the hash table, and something already exists at the hashed location. In the above, collisions are simply appended to the end of the list.\nCollisions can be reduced by better programming your hash table and hash algorithm. You can imagine an improvement upon the above as follows:\n\n\n\na vertical column of various boxes arranged by L A K and L I N with Lakitu emerging from L A K and link emerging from L I N\n\n\nConsider the following example of a hash algorithm:\n\n\n\nluigi being given to a hash algorithm outputting 11\n\n\nThis could be implemented in code as follows:\n#include &lt;ctype.h&gt;\n\nunsigned int hash(const char *word)\n{\n    return toupper(word[0]) - 'A';\n}\n\n\nNotice how the hash function returns the value of toupper(word[0]) - 'A'.\nYou, as the programmer, have to make a decision about the advantages of using more memory to have a large hash table and potentially reducing search time or using less memory and potentially increasing search time.\nThis structure offers a search time of (O(n)).\n\n\n\n\n\nTries are another form of data structure. Tries are trees of arrays.\nTries are always searchable in constant time.\nOne downside to Tries is that they tend to take up a large amount of memory. Notice that we need (26 = 104) nodes just to store Toad!\nToad would be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on\n\n\nTom would then be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on and tom being spelled similarly where toad and tom share a two common letters T and O\n\n\nThis structure offers a search time of (O(1)).\nThe downside of this structure is how many resources are required to use it.\n\n\n\n\nIn this lesson, you learned about using pointers to build new data structures. Specifically, we delved into…\n\nData structures\nStacks and queues\nResizing arrays\nLinked lists\nDictionaries\nTries\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#welcome",
    "href": "notes/notes_6.html#welcome",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "All the prior weeks have presented you with the fundamental building blocks of programming.\nAll you have learned in C will enable you to implement these building blocks in higher-level programming languages such as Python.\nEach week, concepts have become more and more challenging, like a hill becoming more and more steep. This week, the challenge evens off as we explore data structures.\nTo date, you have learned about how an array can organize data in memory.\nToday, we are going to talk about organizing data in memory and design possibilities that emerge from your growing knowledge.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#data-structures",
    "href": "notes/notes_6.html#data-structures",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Data structures essentially are forms of organization in memory.\nThere are many ways to organize data in memory.\nAbstract data types are those that we can conceptually imagine. When learning about computer science, it’s often useful to begin with these conceptual data structures. Learning these will make it easier later to understand how to implement more concrete data structures.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#queues",
    "href": "notes/notes_6.html#queues",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Queues are one form of abstract data structure.\nQueues have specific properties. Namely, they are FIFO or “first in first out.” You can imagine yourself in a line for a ride at an amusement park. The first person in the line gets to go on the ride first. The last person gets to go on the ride last.\nQueues have specific actions associated with them. For example, an item can be enqueued; that is, the item can join the line or queue. Further, an item can be dequeued or leave the queue once it reaches the front of the line.\nIn code, you can imagine a queue as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nqueue;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the queue actually is, regardless of how much it can hold.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#stacks",
    "href": "notes/notes_6.html#stacks",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Queues contrast a stack. Fundamentally, the properties of a stack are different than those of a queue. Specifically, it is LIFO or “last in first out.” Just like stacking trays in a dining hall, a tray that is placed in a stack last is the first that may be picked up.\nStacks have specific actions associated with them. For example, push places something on top of a stack. Pop is removing something from the top of the stack.\nIn code, you might imagine a stack as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nstack;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the stack actually is, regardless of how much it could hold. Notice that this code is the same as the code from the queue.\nYou might imagine that the above code has a limitation. Since the capacity of the array is always predetermined in this code. Therefore, the stack may always be oversized. You might imagine only using one place in the stack out of 5000.\nIt would be nice for our stack to be dynamic – able to grow as items are added to it.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#jack-learns-the-facts",
    "href": "notes/notes_6.html#jack-learns-the-facts",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "We watched a video called Jack Learns the Facts by Professor Shannon Duvall of Elon University.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#resizing-arrays",
    "href": "notes/notes_6.html#resizing-arrays",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Rewinding to Week 2, we introduced you to your first data structure.\nAn array is a block of contiguous memory.\nYou might imagine an array as follows:\n\n\n\nthree boxes with 1 2 3\n\n\nIn memory, there are other values being stored by other programs, functions, and variables. Many of these may be unused garbage values that were utilized at one point but are available now for use.\n\n\n\nthree boxes with 1 2 3 among lots of other memory elements\n\n\nImagine you wanted to store a fourth value 4 in our array. What would be needed is to allocate a new area of memory and move the old array to a new one? Initially, this new area of memory would be populated with garbage values.\n\n\n\nThree boxes with 1 2 3 above four boxes with garbage values\n\n\nAs values are added to this new area of memory, old garbage values would be overwritten.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 and a garbage value\n\n\nEventually, all old garbage values would be overwritten with our new data.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 4\n\n\nOne of the drawbacks of this approach is that it’s bad design: Every time we add a number, we have to copy the array item by item.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#arrays",
    "href": "notes/notes_6.html#arrays",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Wouldn’t it be nice if we were able to put the 4 somewhere else in memory? By definition, this would no longer be an array because 4 would no longer be in contiguous memory. How could we connect different locations in memory?\nIn your terminal, type code list.c and write code as follows:\n// Implements a list of numbers with an array of fixed size\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int list[3];\n\n    // Initialize list with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Print list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n}\n\nNotice that the above is very much like what we learned earlier in this course. Memory is preallocated for three items.\nBuilding upon our knowledge obtained more recently, we can leverage our understanding of pointers to create a better design in this code. Modify your code as follows:\n// Implements a list of numbers with an array of dynamic size\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // List of size 4\n    int *tmp = malloc(4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    // Copy list of size 3 into list of size 4\n    for (int i = 0; i &lt; 3; i++)\n    {\n        tmp[i] = list[i];\n    }\n\n    // Add number to list of size 4\n    tmp[3] = 4;\n\n    // Free list of size 3\n    free(list);\n\n    // Remember list of size 4\n    list = tmp;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that a list of size three integers is created. Then, three memory addresses can be assigned the values 1, 2, and 3. Then, a list of size four is created. Next, the list is copied from the first to the second. The value for the 4 is added to the tmp list. Since the block of memory that list points to is no longer used, it is freed using the command free(list). Finally, the compiler is told to point list pointer now to the block of memory that tmp points to. The contents of list are printed and then freed. Further, notice the inclusion of stdlib.h.\nIt’s useful to think about list and tmp as both signs that point to a chunk of memory. As in the example above, list at one point pointed to an array of size 3. By the end, list was told to point to a chunk of memory of size 4. Technically, by the end of the above code, tmp and list both pointed to the same block of memory.\nOne way by which we can copy the array without a for loop is by using realloc:\n// Implements a list of numbers with an array of dynamic size using realloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Resize list to be of size 4\n    int *tmp = realloc(list, 4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n    list = tmp;\n\n    // Add number to list\n    list[3] = 4;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that the list is reallocated to a new array via realloc.\nOne may be tempted to allocate way more memory than required for the list, such as 30 items instead of the required 3 or 4. However, this is bad design as it taxes system resources when they are not potentially needed. Further, there is little guarantee that memory for more than 30 items will be needed eventually.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#linked-lists",
    "href": "notes/notes_6.html#linked-lists",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "In recent weeks, you have learned about three useful primitives. A struct is a data type that you can define yourself. A . in dot notation allows you to access variables inside that structure. The * operator is used to declare a pointer or dereference a variable.\nToday, you are introduced to the -&gt; operator. It is an arrow. This operator goes to an address and looks inside a structure.\nA linked list is one of the most powerful data structures within C. A linked list allows you to include values that are located in varying areas of memory. Further, they allow you to dynamically grow and shrink the list as you desire.\nYou might imagine three values stored in three different areas of memory as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory\n\n\nHow could one stitch together these values in a list?\nWe could imagine the data pictured above as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached\n\n\nWe could utilize more memory to keep track of where the next item using a pointer.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes\n\n\nNotice that NULL is utilized to indicate that nothing else is next in the list.\nBy convention, we would keep one more element in memory, a pointer, that keeps track of the first item in the list, called the head of the list.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes now with a final box with the memory address of the first box\n\n\nAbstracting away the memory addresses, the list would appear as follows:\n\n\n\nThree boxes with in separate areas of memory with smaller boxes with a final box where the one box points to another and another until the end of the boxes\n\n\nThese boxes are called nodes. A node contains both an item and a pointer called next. In code, you can imagine a node as follows:\ntypedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nNotice that the item contained within this node is an integer called number. Second, a pointer to a node called next is included, which will point to another node somewhere in memory.\nWe can recreate list.c to utilize a linked list:\n// Start to build a linked list by prepending nodes\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n    return 0;\n}\n\nFirst, a node is defined as a struct. For each element of the list, memory for a node is allocated via malloc to the size of a node. n-&gt;number (or n’s number field) is assigned an integer. n-&gt;next (or n’s next field) is assigned null. Then, the node is placed at the start of the list at memory location list.\nConceptually, we can imagine the process of creating a linked list. First, node *list is declared, but it is of a garbage value.\n\n\n\nOne garbage value\n\n\nNext, a node called n is allocated in memory.\n\n\n\nOne garbage value called n with another pointer called list\n\n\nNext, the number of node is assigned the value 1.\n\n\n\nn pointing to a node with 1 as the number and garbage value as the next\n\n\nNext, the node’s next field is assigned NULL.\n\n\n\nn pointing to a node with 1 as the number and null as the value of next\n\n\nNext, list is pointed at the memory location to where n points. n and list now point to the same place.\n\n\n\nn and list both pointing to a node with 1 as the number and null as the value of next\n\n\nA new node is then created. Both the number and next field are filled with garbage values.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with garbage values\n\n\nThe number value of n’s node (the new node) is updated to 2.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and garbage as the next\n\n\nAlso, the next field is updated as well.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nMost importantly, we do not want to lose our connection to any of these nodes lest they be lost forever. Accordingly, n’s next field is pointed to the same memory location as list.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nFinally, list is updated to point at n. We now have a linked list of two items.\n\n\n\nlist pointing to a node with 1 as the number and next pointing to a node with an n pointing the same place the node with one points to a node with 2 as the number and null as the next\n\n\nLooking at our diagram of the list, we can see that the last number added is the first number that appears in the list. Accordingly, if we print the list in order, starting with the first node, the list will appear out of order.\nWe can print the list in the correct order as follows:\n// Print nodes in a linked list with a while loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n\n    // Print numbers\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n        ptr = ptr-&gt;next;\n    }\n    return 0;\n}\n\nNotice that node *ptr = list creates a temporary variable that points at the same spot that list points to. The while prints what at the node ptr points to, and then updates ptr to point to the next node in the list.\nIn this example, inserting into the list is always in the order of (O(1)), as it only takes a very small number of steps to insert at the front of a list.\nConsidering the amount of time required to search this list, it is in the order of (O(n)), because in the worst case the entire list must always be searched to find an item. The time complexity for adding a new element to the list will depend on where that element is added. This is illustrated in the examples below.\nLinked lists are not stored in a contiguous block of memory. They can grow as large as you wish, provided that enough system resources exist. The downside, however, is that more memory is required to keep track of the list instead of an array. For each element you must store not just the value of the element, but also a pointer to the next node. Further, linked lists cannot be indexed into like is possible in an array because we need to pass through the first (n - 1) elements to find the location of the (n)th element. Because of this, the list pictured above must be linearly searched. Binary search, therefore, is not possible in a list constructed as above.\nFurther, you could place numbers at the end of the list as illustrated in this code:\n// Appends numbers to a linked list\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            // This node is the whole list\n            list = n;\n        }\n\n        // If list has numbers already\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this code walks down this list to find the end. When appending an element (adding to the end of the list) our code will run in (O(n)), as we have to go through our entire list before we can add the final element. Further, notice that a temporary variable called next is used to track ptr-&gt;next.\nFurther, you could sort your list as items are added:\n// Implements a sorted linked list of numbers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            list = n;\n        }\n\n        // If number belongs at beginning of list\n        else if (n-&gt;number &lt; list-&gt;number)\n        {\n            n-&gt;next = list;\n            list = n; \n        }\n\n        // If number belongs later in list\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n\n                // If in middle of list\n                if (n-&gt;number &lt; ptr-&gt;next-&gt;number)\n                {\n                    n-&gt;next = ptr-&gt;next;\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this list is sorted as it is built. To insert an element in this specific order, our code will still run in (O(n)) for each insertion, as in the worst case we will have to look through all current elements.\nThis code may seem complicated. However, notice that with pointers and the syntax above, we can stitch data together in different places in memory.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#trees",
    "href": "notes/notes_6.html#trees",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Arrays offer contiguous memory that can be searched quickly. Arrays also offered the opportunity to engage in binary search.\nCould we combine the best of both arrays and linked lists?\nBinary search trees are another data structure that can be used to store data more efficiently so that it can be searched and retrieved.\nYou can imagine a sorted sequence of numbers.\n\n\n\n1 2 3 4 5 6 7 in boxes next to each other\n\n\nImagine then that the center value becomes the top of a tree. Those that are less than this value are placed to the left. Those values that are more than this value are to the right.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those\n\n\nPointers can then be used to point to the correct location of each area of memory such that each of these nodes can be connected.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those arrows connect them in a tree formation\n\n\nIn code, this can be implemented as follows.\n// Implements a list of numbers as a binary search tree\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Represents a node\ntypedef struct node\n{\n    int number;\n    struct node *left;\n    struct node *right;\n}\nnode;\n\nvoid free_tree(node *root);\nvoid print_tree(node *root);\n\nint main(void)\n{\n    // Tree of size 0\n    node *tree = NULL;\n\n    // Add number to list\n    node *n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 1;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;left = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 3;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;right = n;\n\n    // Print tree\n    print_tree(tree);\n\n    // Free tree\n    free_tree(tree);\n    return 0;\n}\n\nvoid free_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    free_tree(root-&gt;left);\n    free_tree(root-&gt;right);\n    free(root);\n}\n\nvoid print_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    print_tree(root-&gt;left);\n    printf(\"%i\\n\", root-&gt;number);\n    print_tree(root-&gt;right);\n}\n\nNotice this search function begins by going to the location of tree. Then, it uses recursion to search for number. The free_tree function recursively frees the tree. print_tree recursively prints the tree.\nA tree like the above offers dynamism that an array does not offer. It can grow and shrink as we wish.\nFurther, this structure offers a search time of (O(log n)) when the tree is balanced.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#dictionaries",
    "href": "notes/notes_6.html#dictionaries",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Dictionaries are another data structure.\nDictionaries, like actual book-form dictionaries that have a word and a definition, have a key and a value.\nThe holy grail of algorithmic time complexity is (O(1)) or constant time. That is, the ultimate is for access to be instantaneous.\n\n\n\na graph of various time complexities where O of log n is second best and O of 1 is best\n\n\nDictionaries can offer this speed of access through hashing.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#hashing-and-hash-tables",
    "href": "notes/notes_6.html#hashing-and-hash-tables",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Hashing is the idea of taking a value and being able to output a value that becomes a shortcut to it later.\nFor example, hashing apple may hash as a value of 1, and berry may be hashed as 2. Therefore, finding apple is as easy as asking the hash algorithm where apple is stored. While not ideal in terms of design, ultimately, putting all a’s in one bucket and b’s in another, this concept of bucketizing hashed values illustrates how you can use this concept: a hashed value can be used to shortcut finding such a value.\nA hash function is an algorithm that reduces a larger value to something small and predictable. Generally, this function takes in an item you wish to add to your hash table, and returns an integer representing the array index in which the item should be placed.\nA hash table is a fantastic combination of both arrays and linked lists. When implemented in code, a hash table is an array of pointers to nodes.\nA hash table could be imagined as follows:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet\n\n\nNotice that this is an array that is assigned each value of the alphabet.\nThen, at each location of the array, a linked list is used to track each value being stored there:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet with various names from the mario universe emerging to the right luigi is with l and mario is with m\n\n\nCollisions are when you add values to the hash table, and something already exists at the hashed location. In the above, collisions are simply appended to the end of the list.\nCollisions can be reduced by better programming your hash table and hash algorithm. You can imagine an improvement upon the above as follows:\n\n\n\na vertical column of various boxes arranged by L A K and L I N with Lakitu emerging from L A K and link emerging from L I N\n\n\nConsider the following example of a hash algorithm:\n\n\n\nluigi being given to a hash algorithm outputting 11\n\n\nThis could be implemented in code as follows:\n#include &lt;ctype.h&gt;\n\nunsigned int hash(const char *word)\n{\n    return toupper(word[0]) - 'A';\n}\n\n\nNotice how the hash function returns the value of toupper(word[0]) - 'A'.\nYou, as the programmer, have to make a decision about the advantages of using more memory to have a large hash table and potentially reducing search time or using less memory and potentially increasing search time.\nThis structure offers a search time of (O(n)).",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#tries",
    "href": "notes/notes_6.html#tries",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Tries are another form of data structure. Tries are trees of arrays.\nTries are always searchable in constant time.\nOne downside to Tries is that they tend to take up a large amount of memory. Notice that we need (26 = 104) nodes just to store Toad!\nToad would be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on\n\n\nTom would then be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on and tom being spelled similarly where toad and tom share a two common letters T and O\n\n\nThis structure offers a search time of (O(1)).\nThe downside of this structure is how many resources are required to use it.",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_6.html#summing-up",
    "href": "notes/notes_6.html#summing-up",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "In this lesson, you learned about using pointers to build new data structures. Specifically, we delved into…\n\nData structures\nStacks and queues\nResizing arrays\nLinked lists\nDictionaries\nTries\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 06 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html",
    "href": "notes/notes_4.html",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Welcome!\nLinear Search\nBinary Search\nRunning Time\nsearch.c\nphonebook.c\nStructs\nSorting\nBubble Sort\nRecursion\nMerge Sort\nSumming Up\n\n\n\n\nIn week zero, we introduced the idea of an algorithm: a black box that may take an input and create an output.\nThis week, we are going to expand upon our understanding of algorithms through pseudocode and into code itself.\nAlso, we are going to consider the efficiency of these algorithms. Indeed, we are going to be building upon our understanding of how to use some of the concepts we discussed last week in building algorithms.\nRecall back to earlier in the course when we introduced the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “n”; green, curved line that gets less and less steep from origin to right of graph, labeled “log n”\n\n\nAs we step into this week, you should consider how the way an algorithm works with a problem may determine the time it takes to solve a problem! Algorithms can be designed to be more and more efficient to a limit.\nToday, we will focus on the design of algorithms and how to measure their efficiency.\n\n\n\n\n\nRecall that last week, you were introduced to the idea of an array, blocks of memory that are consecutive: side-by-side with one another.\nYou can metaphorically imagine an array like a series of seven red lockers as follows:\n\n\n\nSeven red lockers side by side\n\n\nThe far-left position is called location 0 or the beginning of the array. The far-right position is location 7 or the end of the array.\nWe can imagine that we have an essential problem of wanting to know, “Is the number 50 inside an array?” A computer must look at each locker to be able to see if the number 50 is inside. We call this process of finding such a number, character, string, or other item searching.\nWe can potentially hand our array to an algorithm, wherein our algorithm will search through our lockers to see if the number 50 is behind one of the doors, returning the value true or false.\n\n\n\nseven red lockers pointing to an empty box. Out of the empty box comes an output of bool\n\n\nWe can imagine various instructions we might provide our algorithm to undertake this task as follows:\nFor each door from left to right\n    If 50 is behind door\n        Return true\nReturn false\n\nNotice that the above instructions are called pseudocode: A human-readable version of the instructions that we could provide the computer.\nA computer scientist could translate that pseudocode as follows:\nFor i from 0 to n-1\n    If 50 is behind doors[i]\n        Return true\nReturn false\n\nNotice that the above is still not code, but it is a pretty close approximation of what the final code might look like.\n\n\n\n\n\nBinary search is another search algorithm that could be employed in our task of finding the 50.\nAssuming that the values within the lockers have been arranged from smallest to largest, the pseudocode for binary search would appear as follows:\nIf no doors left\n    Return false\nIf 50 is behind middle door\n    Return true\nElse if 50 &lt; middle door\n    Search left half\nElse if 50 &gt; middle door\n    Search right half\n\nUsing the nomenclature of code, we can further modify our algorithm as follows:\nIf no doors left\n    Return false\nIf 50 is behind doors[middle]\n    Return true\nElse if 50 &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if 50 &gt; doors[middle]\n    Search doors[middle + 1] through doors[n - 1]\n\nNotice that by looking at this approximation of code, you can nearly imagine what this might look like in actual code.\n\n\n\n\n\nYou can consider how much time it takes an algorithm to solve a problem.\nrunning time involves an analysis using big O notation. Take a look at the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “O(n)”; green, curved line that gets less and less steep from origin to right of graph, labeled “O(log n”\n\n\nRather than being ultra-specific about the mathematical efficiency of an algorithm, computer scientists discuss efficiency in terms of the order of various running times.\nIn the above graph, the first algorithm is (O(n)) or in the order of n. The second is in (O(n)) as well. The third is in (O(n)).\nIt’s the shape of the curve that shows the efficiency of an algorithm. Some common running times we may see are:\n\n(O(n^2))\n(O(n n))\n(O(n))\n(O(n))\n(O(1))\n\nOf the running times above, (O(n^2)) is considered the slowest running time. (O(1)) is the fastest.\nLinear search was of order (O(n)) because it could take n steps in the worst-case to run.\nBinary search was of order (O(n)) because it would take fewer and fewer steps to run, even in the worst-case.\nProgrammers are interested in both the worst-case, or upper bound, and the best-case, or lower bound.\nThe () symbol is used to denote the best-case of an algorithm, such as ((n)).\nThe () symbol is used to denote where the upper bound and lower bound are the same: Where the best-case and the worst-case running times are the same.\nAsymptotic notation is the measure of how well algorithms perform as the input gets larger and larger.\nAs you continue to develop your knowledge in computer science, you will explore these topics in more detail in future courses.\n\n\n\n\n\nYou can implement linear search by typing code search.c in your terminal window and by writing code as follows:\n// Implements linear search for integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // An array of integers\n    int numbers[] = {20, 500, 10, 5, 100, 1, 50};\n\n    // Search for number\n    int n = get_int(\"Number: \");\n    for (int i = 0; i &lt; 7; i++)\n    {\n        if (numbers[i] == n)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the line beginning with int numbers[] allows us to define the values of each element of the array as we create it. Then, in the for loop, we have an implementation of linear search. return 0 is used to indicate success and exit the program. return 1 is used to exit the program with an error (failure).\nWe have now implemented linear search ourselves in C!\nWhat if we wanted to search for a string within an array? Modify your code as follows:\n// Implements linear search for strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // An array of strings\n    string strings[] = {\"battleship\", \"boot\", \"cannon\", \"iron\", \"thimble\", \"top hat\"};\n\n    // Search for string\n    string s = get_string(\"String: \");\n    for (int i = 0; i &lt; 6; i++)\n    {\n        if (strcmp(strings[i], s) == 0)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that we cannot utilize == as in our previous iteration of this program. Instead, we use strcmp, which comes from the string.h library. strcmp will return 0 if the strings are the same. Also, notice that the string length of 6 is hard-coded, which is not good programming practice.\nIndeed, running this code allows us to iterate over this array of strings to see if a certain string is within it. However, if you see a segmentation fault, where a part of memory was touched by your program that it should not have access to, do make sure you have i &lt; 6 noted above instead of i &lt; 7.\nYou can learn more about strcmp at the CS50 Manual Pages.\n\n\n\n\n\nWe can combine these ideas of both numbers and strings into a single program. Type code phonebook.c into your terminal window and write code as follows:\n// Implements a phone book without structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Arrays of strings\n    string names[] = {\"Yuliia\", \"David\", \"John\"};\n    string numbers[] = {\"+1-617-495-1000\", \"+1-617-495-1000\", \"+1-949-468-2750\"};\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(names[i], name) == 0)\n        {\n            printf(\"Found %s\\n\", numbers[i]);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that Yuliia’s number begins with +1-617, David’s phone number starts with +1-617, and John’s number starts with +1-949. Therefore, names[0] is Yuliia, and numbers[0] is Yuliia’s number. This code will allow us to search the phonebook for a person’s specific number.\nWhile this code works, there are numerous inefficiencies. Indeed, there is a chance that names and phone numbers may not correspond to one another. Wouldn’t it be nice if we could create our own data type where we could associate a person with the phone number?\n\n\n\n\n\nIt turns out that C allows us to create our own data types via a struct.\nWould it not be useful to create our own data type called a person that has inside of it a name and number? Consider the following:\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nNotice how this represents our own datatype called a person that has a string called name and another string called number.\nWe can improve our prior code by modifying our phonebook program as follows:\n// Implements a phone book with structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nint main(void)\n{\n    person people[3];\n\n    people[0].name = \"Yuliia\";\n    people[0].number = \"+1-617-495-1000\";\n\n    people[1].name = \"David\";\n    people[1].number = \"+1-617-495-1000\";\n\n    people[2].name = \"John\";\n    people[2].number = \"+1-949-468-2750\";\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(people[i].name, name) == 0)\n        {\n            printf(\"Found %s\\n\", people[i].number);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the code begins with typedef struct where a new datatype called person is defined. Inside a person is a string called name and a string called number. In the main function, begin by creating an array called people that is of type person that is a size of 3. Then, we update the names and phone numbers of the two people in our people array. Most importantly, notice how the dot notation, such as people[0].name, allows us to access the person at the 0th location and assign that individual a name.\n\n\n\n\n\nSorting is the act of taking an unsorted list of values and transforming this list into a sorted one.\nWhen a list is sorted, searching that list is far less taxing on the computer. Recall that we can use binary search on a sorted list but not on an unsorted one.\nIt turns out that there are many different types of sorting algorithms.\nSelection sort is one such sorting algorithm.\nWe can represent an array as follows:\n\n\n\nSeven red lockers side by side with the last labeled as n-1\n\n\nThe algorithm for selection sort in pseudocode is:\nFor i from 0 to n–1\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n\nSummarizing those steps, the first time iterating through the list took n - 1 steps. The second time, it took n - 2 steps. Carrying this logic forward, the steps required could be represented as follows:\n(n - 1) + (n - 2) + (n - 3) + ... + 1\n\nThis could be simplified to n(n-1)/2 or, more simply, (O(n^2)). In the worst-case or upper-bound, selection sort is in the order of (O(n^2)). In the best-case, or lower-bound, selection sort is in the order of ((n^2)).\n\n\n\n\n\nBubble sort is another sorting algorithm that works by repeatedly swapping elements to “bubble” larger elements to the end.\nThe pseudocode for bubble sort is:\nRepeat n-1 times\n    For i from 0 to n–2\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n    If no swaps\n        Quit\n\nAs we further sort the array, we know more and more of it becomes sorted, so we only need to look at the pairs of numbers that haven’t been sorted yet.\nBubble sort can be analyzed as follows:\n  (n – 1) × (n – 1)\n  n2 – 1n – 1n + 1\n  n2 – 2n + 1\n\nor, more simply (O(n^2)).\nIn the worst-case, or upper-bound, bubble sort is in the order of (O(n^2)). In the best-case, or lower-bound, bubble sort is in the order of ((n)).\nYou can visualize a comparison of these algorithms.\n\n\n\n\n\nHow could we improve our efficiency in our sorting?\nRecursion is a concept within programming where a function calls itself. We saw this earlier when we saw…\nIf no doors left\n    Return false\nIf number behind middle door\n    Return true\nElse if number &lt; middle door\n    Search left half\nElse if number &gt; middle door\n    Search right half\n\nNotice that we are calling search on smaller and smaller iterations of this problem.\nSimilarly, in our pseudocode for Week 0, you can see where recursion was implemented:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n\nThis code could have been simplified to highlight its recursive properties as follows:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Search left half of book\n9  Else if person is later in book\n10     Search right half of book\n12 Else\n13     Quit\n\nConsider how in Week 1 we wanted to create a pyramid structure as follows:\n  #\n  ##\n  ###\n  ####\n\nType code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using iteration\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // Draw pyramid of height n\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; i + 1; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that this code builds the pyramid by looping.\nTo implement this using recursion, type code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using recursion\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // If nothing to draw\n    if (n &lt;= 0)\n    {\n        return;\n    }\n\n    // Draw pyramid of height n - 1\n    draw(n - 1);\n\n    // Draw one more row of width n\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice the base case will ensure the code does not run forever. The line if (n &lt;= 0) terminates the recursion because the problem has been solved. Every time, draw calls itself, it calls itself by n-1. At some point, n-1 will equal 0, resulting in the draw function returning, and the program will end.\n\n\n\n\n\nWe can now leverage recursion in our quest for a more efficient sort algorithm and implement what is called merge sort, a very efficient sort algorithm.\nThe pseudocode for merge sort is quite short:\nIf only one number\n    Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n\nConsider the following list of the numbers:\n  6341\n\nFirst, merge sort asks, “is this one number?” The answer is “no,” so the algorithm continues.\n  6341\n\nSecond, merge sort will now split the numbers down the middle (or as close as it can get) and sort the left half of numbers.\n  63|41\n\nThird, merge sort would look at these numbers on the left and ask, “is this one number?” Since the answer is no, it would then split the numbers on the left down the middle.\n  6|3\n\nFourth, merge sort will again ask, “is this one number?” The answer is yes this time! Therefore, it will quit this task and return to the last task it was running at this point:\n  63|41\n\nFifth, merge sort will sort the numbers on the left.\n  36|41\n\nNow, we return to where we left off in the pseudocode now that the left side has been sorted. A similar process of steps 3-5 will occur with the right-hand numbers. This will result in:\n  36|14\n\nBoth halves are now sorted. Finally, the algorithm will merge both sides. It will look at the first number on the left and the first number on the right. It will put the smaller number first, then the second smallest. The algorithm will repeat this for all numbers, resulting in:\n  1346\n\nMerge sort is complete, and the program quits.\nMerge sort is a very efficient sort algorithm with a worst-case of (O(n n)). The best-case is still ((n n)) because the algorithm still must visit each place in the list. Therefore, merge sort is also ((n n)) since the best-case and worst-case are the same.\nA final visualization was shared.\n\n\n\n\nIn this lesson, you learned about algorithmic thinking and building your own data types. Specifically, you learned…\n\nAlgorithms.\nBig O notation.\nBinary search and linear search.\nVarious sort algorithms, including bubble sort, selection sort, and merge sort.\nRecursion.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#welcome",
    "href": "notes/notes_4.html#welcome",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "In week zero, we introduced the idea of an algorithm: a black box that may take an input and create an output.\nThis week, we are going to expand upon our understanding of algorithms through pseudocode and into code itself.\nAlso, we are going to consider the efficiency of these algorithms. Indeed, we are going to be building upon our understanding of how to use some of the concepts we discussed last week in building algorithms.\nRecall back to earlier in the course when we introduced the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “n”; green, curved line that gets less and less steep from origin to right of graph, labeled “log n”\n\n\nAs we step into this week, you should consider how the way an algorithm works with a problem may determine the time it takes to solve a problem! Algorithms can be designed to be more and more efficient to a limit.\nToday, we will focus on the design of algorithms and how to measure their efficiency.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#linear-search",
    "href": "notes/notes_4.html#linear-search",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Recall that last week, you were introduced to the idea of an array, blocks of memory that are consecutive: side-by-side with one another.\nYou can metaphorically imagine an array like a series of seven red lockers as follows:\n\n\n\nSeven red lockers side by side\n\n\nThe far-left position is called location 0 or the beginning of the array. The far-right position is location 7 or the end of the array.\nWe can imagine that we have an essential problem of wanting to know, “Is the number 50 inside an array?” A computer must look at each locker to be able to see if the number 50 is inside. We call this process of finding such a number, character, string, or other item searching.\nWe can potentially hand our array to an algorithm, wherein our algorithm will search through our lockers to see if the number 50 is behind one of the doors, returning the value true or false.\n\n\n\nseven red lockers pointing to an empty box. Out of the empty box comes an output of bool\n\n\nWe can imagine various instructions we might provide our algorithm to undertake this task as follows:\nFor each door from left to right\n    If 50 is behind door\n        Return true\nReturn false\n\nNotice that the above instructions are called pseudocode: A human-readable version of the instructions that we could provide the computer.\nA computer scientist could translate that pseudocode as follows:\nFor i from 0 to n-1\n    If 50 is behind doors[i]\n        Return true\nReturn false\n\nNotice that the above is still not code, but it is a pretty close approximation of what the final code might look like.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#binary-search",
    "href": "notes/notes_4.html#binary-search",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Binary search is another search algorithm that could be employed in our task of finding the 50.\nAssuming that the values within the lockers have been arranged from smallest to largest, the pseudocode for binary search would appear as follows:\nIf no doors left\n    Return false\nIf 50 is behind middle door\n    Return true\nElse if 50 &lt; middle door\n    Search left half\nElse if 50 &gt; middle door\n    Search right half\n\nUsing the nomenclature of code, we can further modify our algorithm as follows:\nIf no doors left\n    Return false\nIf 50 is behind doors[middle]\n    Return true\nElse if 50 &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if 50 &gt; doors[middle]\n    Search doors[middle + 1] through doors[n - 1]\n\nNotice that by looking at this approximation of code, you can nearly imagine what this might look like in actual code.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#running-time",
    "href": "notes/notes_4.html#running-time",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "You can consider how much time it takes an algorithm to solve a problem.\nrunning time involves an analysis using big O notation. Take a look at the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “O(n)”; green, curved line that gets less and less steep from origin to right of graph, labeled “O(log n”\n\n\nRather than being ultra-specific about the mathematical efficiency of an algorithm, computer scientists discuss efficiency in terms of the order of various running times.\nIn the above graph, the first algorithm is (O(n)) or in the order of n. The second is in (O(n)) as well. The third is in (O(n)).\nIt’s the shape of the curve that shows the efficiency of an algorithm. Some common running times we may see are:\n\n(O(n^2))\n(O(n n))\n(O(n))\n(O(n))\n(O(1))\n\nOf the running times above, (O(n^2)) is considered the slowest running time. (O(1)) is the fastest.\nLinear search was of order (O(n)) because it could take n steps in the worst-case to run.\nBinary search was of order (O(n)) because it would take fewer and fewer steps to run, even in the worst-case.\nProgrammers are interested in both the worst-case, or upper bound, and the best-case, or lower bound.\nThe () symbol is used to denote the best-case of an algorithm, such as ((n)).\nThe () symbol is used to denote where the upper bound and lower bound are the same: Where the best-case and the worst-case running times are the same.\nAsymptotic notation is the measure of how well algorithms perform as the input gets larger and larger.\nAs you continue to develop your knowledge in computer science, you will explore these topics in more detail in future courses.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#search.c",
    "href": "notes/notes_4.html#search.c",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "You can implement linear search by typing code search.c in your terminal window and by writing code as follows:\n// Implements linear search for integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // An array of integers\n    int numbers[] = {20, 500, 10, 5, 100, 1, 50};\n\n    // Search for number\n    int n = get_int(\"Number: \");\n    for (int i = 0; i &lt; 7; i++)\n    {\n        if (numbers[i] == n)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the line beginning with int numbers[] allows us to define the values of each element of the array as we create it. Then, in the for loop, we have an implementation of linear search. return 0 is used to indicate success and exit the program. return 1 is used to exit the program with an error (failure).\nWe have now implemented linear search ourselves in C!\nWhat if we wanted to search for a string within an array? Modify your code as follows:\n// Implements linear search for strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // An array of strings\n    string strings[] = {\"battleship\", \"boot\", \"cannon\", \"iron\", \"thimble\", \"top hat\"};\n\n    // Search for string\n    string s = get_string(\"String: \");\n    for (int i = 0; i &lt; 6; i++)\n    {\n        if (strcmp(strings[i], s) == 0)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that we cannot utilize == as in our previous iteration of this program. Instead, we use strcmp, which comes from the string.h library. strcmp will return 0 if the strings are the same. Also, notice that the string length of 6 is hard-coded, which is not good programming practice.\nIndeed, running this code allows us to iterate over this array of strings to see if a certain string is within it. However, if you see a segmentation fault, where a part of memory was touched by your program that it should not have access to, do make sure you have i &lt; 6 noted above instead of i &lt; 7.\nYou can learn more about strcmp at the CS50 Manual Pages.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#phonebook.c",
    "href": "notes/notes_4.html#phonebook.c",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "We can combine these ideas of both numbers and strings into a single program. Type code phonebook.c into your terminal window and write code as follows:\n// Implements a phone book without structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Arrays of strings\n    string names[] = {\"Yuliia\", \"David\", \"John\"};\n    string numbers[] = {\"+1-617-495-1000\", \"+1-617-495-1000\", \"+1-949-468-2750\"};\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(names[i], name) == 0)\n        {\n            printf(\"Found %s\\n\", numbers[i]);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that Yuliia’s number begins with +1-617, David’s phone number starts with +1-617, and John’s number starts with +1-949. Therefore, names[0] is Yuliia, and numbers[0] is Yuliia’s number. This code will allow us to search the phonebook for a person’s specific number.\nWhile this code works, there are numerous inefficiencies. Indeed, there is a chance that names and phone numbers may not correspond to one another. Wouldn’t it be nice if we could create our own data type where we could associate a person with the phone number?",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#structs",
    "href": "notes/notes_4.html#structs",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "It turns out that C allows us to create our own data types via a struct.\nWould it not be useful to create our own data type called a person that has inside of it a name and number? Consider the following:\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nNotice how this represents our own datatype called a person that has a string called name and another string called number.\nWe can improve our prior code by modifying our phonebook program as follows:\n// Implements a phone book with structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nint main(void)\n{\n    person people[3];\n\n    people[0].name = \"Yuliia\";\n    people[0].number = \"+1-617-495-1000\";\n\n    people[1].name = \"David\";\n    people[1].number = \"+1-617-495-1000\";\n\n    people[2].name = \"John\";\n    people[2].number = \"+1-949-468-2750\";\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(people[i].name, name) == 0)\n        {\n            printf(\"Found %s\\n\", people[i].number);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the code begins with typedef struct where a new datatype called person is defined. Inside a person is a string called name and a string called number. In the main function, begin by creating an array called people that is of type person that is a size of 3. Then, we update the names and phone numbers of the two people in our people array. Most importantly, notice how the dot notation, such as people[0].name, allows us to access the person at the 0th location and assign that individual a name.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#sorting",
    "href": "notes/notes_4.html#sorting",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Sorting is the act of taking an unsorted list of values and transforming this list into a sorted one.\nWhen a list is sorted, searching that list is far less taxing on the computer. Recall that we can use binary search on a sorted list but not on an unsorted one.\nIt turns out that there are many different types of sorting algorithms.\nSelection sort is one such sorting algorithm.\nWe can represent an array as follows:\n\n\n\nSeven red lockers side by side with the last labeled as n-1\n\n\nThe algorithm for selection sort in pseudocode is:\nFor i from 0 to n–1\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n\nSummarizing those steps, the first time iterating through the list took n - 1 steps. The second time, it took n - 2 steps. Carrying this logic forward, the steps required could be represented as follows:\n(n - 1) + (n - 2) + (n - 3) + ... + 1\n\nThis could be simplified to n(n-1)/2 or, more simply, (O(n^2)). In the worst-case or upper-bound, selection sort is in the order of (O(n^2)). In the best-case, or lower-bound, selection sort is in the order of ((n^2)).",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#bubble-sort",
    "href": "notes/notes_4.html#bubble-sort",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Bubble sort is another sorting algorithm that works by repeatedly swapping elements to “bubble” larger elements to the end.\nThe pseudocode for bubble sort is:\nRepeat n-1 times\n    For i from 0 to n–2\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n    If no swaps\n        Quit\n\nAs we further sort the array, we know more and more of it becomes sorted, so we only need to look at the pairs of numbers that haven’t been sorted yet.\nBubble sort can be analyzed as follows:\n  (n – 1) × (n – 1)\n  n2 – 1n – 1n + 1\n  n2 – 2n + 1\n\nor, more simply (O(n^2)).\nIn the worst-case, or upper-bound, bubble sort is in the order of (O(n^2)). In the best-case, or lower-bound, bubble sort is in the order of ((n)).\nYou can visualize a comparison of these algorithms.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#recursion",
    "href": "notes/notes_4.html#recursion",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "How could we improve our efficiency in our sorting?\nRecursion is a concept within programming where a function calls itself. We saw this earlier when we saw…\nIf no doors left\n    Return false\nIf number behind middle door\n    Return true\nElse if number &lt; middle door\n    Search left half\nElse if number &gt; middle door\n    Search right half\n\nNotice that we are calling search on smaller and smaller iterations of this problem.\nSimilarly, in our pseudocode for Week 0, you can see where recursion was implemented:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n\nThis code could have been simplified to highlight its recursive properties as follows:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Search left half of book\n9  Else if person is later in book\n10     Search right half of book\n12 Else\n13     Quit\n\nConsider how in Week 1 we wanted to create a pyramid structure as follows:\n  #\n  ##\n  ###\n  ####\n\nType code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using iteration\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // Draw pyramid of height n\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; i + 1; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that this code builds the pyramid by looping.\nTo implement this using recursion, type code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using recursion\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // If nothing to draw\n    if (n &lt;= 0)\n    {\n        return;\n    }\n\n    // Draw pyramid of height n - 1\n    draw(n - 1);\n\n    // Draw one more row of width n\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice the base case will ensure the code does not run forever. The line if (n &lt;= 0) terminates the recursion because the problem has been solved. Every time, draw calls itself, it calls itself by n-1. At some point, n-1 will equal 0, resulting in the draw function returning, and the program will end.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#merge-sort",
    "href": "notes/notes_4.html#merge-sort",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "We can now leverage recursion in our quest for a more efficient sort algorithm and implement what is called merge sort, a very efficient sort algorithm.\nThe pseudocode for merge sort is quite short:\nIf only one number\n    Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n\nConsider the following list of the numbers:\n  6341\n\nFirst, merge sort asks, “is this one number?” The answer is “no,” so the algorithm continues.\n  6341\n\nSecond, merge sort will now split the numbers down the middle (or as close as it can get) and sort the left half of numbers.\n  63|41\n\nThird, merge sort would look at these numbers on the left and ask, “is this one number?” Since the answer is no, it would then split the numbers on the left down the middle.\n  6|3\n\nFourth, merge sort will again ask, “is this one number?” The answer is yes this time! Therefore, it will quit this task and return to the last task it was running at this point:\n  63|41\n\nFifth, merge sort will sort the numbers on the left.\n  36|41\n\nNow, we return to where we left off in the pseudocode now that the left side has been sorted. A similar process of steps 3-5 will occur with the right-hand numbers. This will result in:\n  36|14\n\nBoth halves are now sorted. Finally, the algorithm will merge both sides. It will look at the first number on the left and the first number on the right. It will put the smaller number first, then the second smallest. The algorithm will repeat this for all numbers, resulting in:\n  1346\n\nMerge sort is complete, and the program quits.\nMerge sort is a very efficient sort algorithm with a worst-case of (O(n n)). The best-case is still ((n n)) because the algorithm still must visit each place in the list. Therefore, merge sort is also ((n n)) since the best-case and worst-case are the same.\nA final visualization was shared.",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_4.html#summing-up",
    "href": "notes/notes_4.html#summing-up",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "In this lesson, you learned about algorithmic thinking and building your own data types. Specifically, you learned…\n\nAlgorithms.\nBig O notation.\nBinary search and linear search.\nVarious sort algorithms, including bubble sort, selection sort, and merge sort.\nRecursion.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 04 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html",
    "href": "notes/notes_2.html",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Welcome!\nVisual Studio Code\nHello World\nFrom Scratch to C\nHeader Files and C Manual Pages\nHello, You\nTypes\nConditionals\nOperators\nVariables\ncompare.c\nagree.c\nLoops and meow.c\nFunctions\nCorrectness, Design, Style\nMario\nComments\nMore About Operators\nTruncation\nSumming Up\n\n\n\n\nIn our previous session, we learned about Scratch, a visual programming language.\nIndeed, all the essential programming concepts presented in Scratch will be utilized as you learn how to program any programming language. Functions, conditionals, loops, and variables found in Scratch are fundamental building blocks that you will find in any programming language.\nRecall that machines only understand binary. Where humans write source code, a list of instructions for the computer that is human readable, machines only understand what we can now call machine code. This machine code is a pattern of ones and zeros that produces a desired effect.\nIt turns out that we can convert source code into machine code using a very special piece of software called a compiler. Today, we will be introducing you to a compiler that will allow you to convert source code in the programming language C into machine code.\nToday, in addition to learning how to program, you will be learning how to write good code.\n\n\n\n\n\nThe text editor that is utilized for this course is Visual Studio Code, aka VS Code.\nWe will utilize VS Code for this module via Github Classroom (it has all the software required for the course already pre-loaded on it). This course and the instructions herein were designed with VS Code in mind.\nManually installing the necessary software for the course on your own computer is possible, but cumbersome. .\nThe compiler can be divided into a number of regions:\n Notice that there is a file explorer on the left side where you can find your files. Further, notice that there is a region in the middle called a text editor where you can edit your program. Finally, there is a command line interface, known as a CLI, command line, or terminal window, where we can send commands to the computer in the cloud.\nIn the terminal window, some common command-line arguments we may use include:\n\ncd, for changing our current directory (folder)\ncp, for copying files and directories\nls, for listing files in a directory\nmkdir, for making a directory\nmv, for moving (renaming) files and directories\nrm, for removing (deleting) files\nrmdir, for removing (deleting) directories\n\nThe most commonly used is ls which will list all the files in the current directory. Go ahead and type ls into the terminal window and hit enter. You’ll see all the files in the current folder.\nUse our VS Code Sandbox\nBecause this IDE is preconfigured with all the necessary software, you should use it to complete all assignments for this course.\n\n\n\n\n\nWe will be using three commands to write, compile, and run our first program:\ncode hello.c\n\nmake hello\n\n./hello\n\n\nThe first command, code hello.c creates a file and allows us to type instructions for this program. The second command, make hello, compiles the file from our instructions in C and creates an executable file called hello. The last command, ./hello, runs the program called hello.\nWe can build your first program in C by typing code hello.c into the terminal window. Notice that we deliberately lowercased the entire filename and included the .c extension. Then, in the text editor that appears, write code as follows:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNote that every single character above serves a purpose. If you type it incorrectly, the program will not run. printf is a function that can output a line of text. Notice the placement of the quotes and the semicolon. Further, notice that the \\n creates a new line after the words hello, world.\nClicking back in the terminal window, you can compile your code by executing make hello. Notice that we are omitting .c. make is a compiler that will look for our hello.c file and turn it into a program called hello. If executing this command results in no errors, you can proceed. If not, double-check your code to ensure it matches the above.\nNow, type ./hello and your program will execute saying hello, world.\nNow, open the file explorer on the left. You will notice that there is now both a file called hello.c and another file called hello. hello.c is able to be read by the compiler: It’s where your code is stored. hello is an executable file that you can run but cannot be read by the compiler.\n\n\n\n\n\nIn Scratch, we utilized the say block to display any text on the screen. Indeed, in C, we have a function called printf that does exactly this.\nNotice our code already invokes this function:\nprintf(\"hello, world\\n\");\n\nNotice that the printf function is called. The argument passed to printf is hello, world\\n. The statement of code is closed with a ;.\nErrors in code are common. Modify your code as follows:\n// \\n is missing\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\");\n}\n\nNotice the \\n is now gone.\nIn your terminal window, run make hello. Typing ./hello in the terminal window, how did your program change? This \\ character is called an escape character that tells the compiler that \\n is a special instruction to create a line break.\nThere are other escape characters you can use:\n\\n  create a new line\n\\r  return to the start of a line\n\\\"  print a double quote\n\\'  print a single quote\n\\\\  print a backslash\n\nRestore your program to the following:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNotice the semicolon and \\n have been restored.\n\n\n\n\n\nThe statement at the start of the code #include &lt;stdio.h&gt; is a very special command that tells the compile that you want to use the capabilities of a library called stdio.h, a header file. This allows you, among many other things, to utilize the printf function.\nA library is a collection of code created by someone. Libraries are collections of pre-written code and functions that others have written in the past that we can utilize in our code.\nYou can read about all the capabilities of this library on the Manual Pages. The Manual Pages provide a means by which to learn what various commands do and how they function.\nIt turns out that CS50 has its own library called cs50.h. There are numerous functions that are included that provide training wheels while you get started in C:\nget_char\nget_double\nget_float\nget_int\nget_long\nget_string\n\nLet’s use this library in your program.\n\n\n\n\n\nRecall that in Scratch we had the ability to ask the user, “What’s your name?” and say “hello” with that name appended to it.\nIn C, we can do the same. Modify your code as follows:\n// get_string and printf with incorrect placeholder\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, answer\\n\");\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function.\nRunning make hello again in the terminal window, notice that numerous errors appear.\nLooking at the errors, string and get_string are not recognized by the compiler. We have to teach the compiler these features by adding a library called cs50.h. Also, we notice that answer is not provided as we intended. Modify your code as follows:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function. %s tells the printf function to prepare itself to receive a string.\nNow, running make hello again in the terminal window, you can run your program by typing ./hello. The program now asks for your name and then says hello with your name attached, as intended.\nanswer is a special holding place we call a variable. answer is of type string and can hold any string within it. There are many data types, such as int, bool, char, and many others.\n%s is a placeholder called a format code that tells the printf function to prepare to receive a string. answer is the string being passed to %s.\n\n\n\n\n\nprintf allows for many format codes. Here is a non-comprehensive list of ones you may utilize in this course:\n%c\n%f\n%i\n%li\n%s\n\n%s is used for string variables. %i is used for int or integer variables. You can find out more about this on the Manual Pages\nThese format codes correspond to the many data types that are available within C:\nbool\nchar\nfloat\nint\nlong\nstring\n...\n\nWe will be using many of C’s available data types throughout this course.\n\n\n\n\n\nAnother building block you utilized within Scratch was conditionals. For example, you might want to do one thing if x is greater than y. Further, you might want to do something else if that condition is not met.\nWe look at a few examples from Scratch.\nIn C, you can compare two values as follows:\n// Conditionals that are mutually exclusive\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse\n{\n    printf(\"x is not less than y\\n\");\n}\n\nNotice how if x &lt; y, one outcome occurs. If x is not less than y, then another outcome occurs.\nSimilarly, we can plan for three possible outcomes:\n// Conditional that isn't necessary\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse if (x == y)\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice that not all these lines of code are required. How could we eliminate the unnecessary calculation above?\nYou may have guessed that we can improve this code as follows:\n// Compare integers\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice how the final statement is replaced with else.\n\n\n\n\n\nOperators refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:\n\n+ for addition\n- for subtraction\n* for multiplication\n/ for division\n% for remainder\n\nWe will use all of these operators in this course.\n\n\n\n\n\nIn C, you can assign a value to an int or integer as follows:\nint counter = 0;\n\nNotice how a variable called counter of type int is assigned the value 0.\nC can also be programmed to add one to counter as follows:\ncounter = counter + 1;\n\nNotice how 1 is added to the value of counter.\nThis can be also represented as:\ncounter += 1;\n\nThis can be further simplified to:\ncounter++;\n\nNotice how the ++ is used to add 1.\nYou can also subtract one from counter as follows:\ncounter--;\n\nNotice how 1 is removed from the value of counter.\n\n\n\n\n\nUsing this new knowledge about how to assign values to variables, you can program your first conditional statement.\nIn the terminal window, type code compare.c and write code as follows:\n// Conditional, Boolean expression, relational operator\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n}\n\nNotice that we create two variables, an int or integer called x and another called y. The values of these are populated using the get_int function.\nYou can run your code by executing make compare in the terminal window, followed by ./compare. If you get any error messages, check your code for errors.\nFlow charts are a way by which you can examine how a computer program functions. Such charts can be used to examine the efficiency of our code.\nLooking at a flow chart of the above code, we can notice numerous shortcomings.\nWe can improve your program by coding as follows:\n// Conditionals\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nNotice that all potential outcomes are now accounted for.\nYou can re-make and re-run your program and test it out.\nExamining this program on a flow chart, you can see the efficiency of our code design decisions.\n\n\n\n\n\nConsidering another data type called a char, we can start a new program by typing code agree.c into the terminal window.\nWhere a string is a series of characters, a char is a single character.\nIn the text editor, write code as follows:\n// Comparing against lowercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that single quotes are utilized for single characters. Further, notice that == ensures that something is equal to something else, where a single equal sign would have a very different function in C.\nYou can test your code by typing make agree into the terminal window, followed by ./agree.\nWe can also allow for the inputting of uppercase and lowercase characters:\n// Comparing against lowercase and uppercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'Y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n    else if (c == 'N')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that additional options are offered. However, this is not efficient code.\nWe can improve this code as follows:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that || effectively means or.\n\n\n\n\n\nWe can also utilize the loop building block from Scratch in our C programs.\nIn your terminal window, type code meow.c and write code as follows:\n// Opportunity for better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n}\n\nNotice this does as intended but has an opportunity for better design. Code is repeated over and over.\nWe can improve our program by modifying your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 3;\n    while (i &gt; 0)\n    {\n        printf(\"meow\\n\");\n        i--;\n    }\n}\n\nNotice that we create an int called i and assign it the value 3. Then, we create a while loop that will run as long as i &gt; 0. Then, the loop runs. Every time 1 is subtracted to i using the i-- statement.\nSimilarly, we can implement a count-up of sorts by modifying our code as follows:\n// Print values of i\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 1;\n    while (i &lt;= 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice how our counter i is started at 1. Each time the loop runs, it will increment the counter by 1. Once the counter is greater than 3, it will stop the loop.\nGenerally, in computer science, we count from zero. Best to revise your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 0;\n    while (i &lt; 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice we now count from zero.\nAnother tool in our toolbox for looping is a for loop.\nYou can further improve the design of our meow.c program using a for loop. Modify your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the for loop includes three arguments. The first argument int i = 0 starts our counter at zero. The second argument i &lt; 3 is the condition that is being checked. Finally, the argument i++ tells the loop to increment by one each time the loop runs.\nWe can even loop forever using the following code:\n// Infinite loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    while (true)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that true will always be the case. Therefore, the code will always run. You will lose control of your terminal window by running this code. You can break from an infinite loop by hitting control-C on your keyboard.\n\n\n\n\n\nWhile we will provide much more guidance later, you can create your own function within C as follows:\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nThe initial void means that the function does not return any values. The (void) means that no values are being provided to the function.\nThis function can be used in the main function as follows:\n// Abstraction\n\n#include &lt;stdio.h&gt;\n\nvoid meow(void);\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        meow();\n    }\n}\n\n// Meow once\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nNotice how the meow function is called with the meow() instruction. This is possible because the meow function is defined at the bottom of the code, and the prototype of the function is provided at the top of the code as void meow(void).\nYour meow function can be further modified to accept input:\n// Abstraction with parameterization\n\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    meow(3);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the prototype has changed to void meow(int n) to show that meow accepts an int as its input.\nAdditionally, we can get user input:\n// User input\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    meow(n);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that get_int is used to obtain a number from the user. n is passed to meow.\nWe can even test to ensure that the input we get provided by the user is correct:\n// Return value\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_positive_int(void);\nvoid meow(int n);\n\nint main(void)\n{\n    int n = get_positive_int();\n    meow(n);\n}\n\n// Get number of meows\nint get_positive_int(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    return n;\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that a new function called get_positive_int asks the user for an integer while n &lt; 1. After obtaining a positive integer, this function will return n back to the main function.\n\n\n\n\n\nCode can be evaluated upon three axes.\nFirst, correctness refers to “Does the code run as intended?” You can check the correctness of your code with check50.\nSecond, design refers to “How well is the code designed?” You can evaluate the design of your code using design50.\nFinally, style refers to “How aesthetically pleasing and consistent is the code?” You can evaluate the style of your code with style50.\n\n\n\n\n\nEverything we’ve discussed today has focused on various building blocks of your work as an emerging computer scientist.\nThe following will help you orient toward working on a problem set for this class in general: How does one approach a computer science-related problem?\nImagine we wanted to emulate the visual of the game Super Mario Bros. Considering the four question blocks pictured, how could we create code that roughly represents these four horizontal blocks?\n\n\n\nMario Question Marks\n\n\nIn the terminal window, type code mario.c and code as follows:\n// Prints a row of 4 question marks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"?\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how four question marks are printed here using a loop.\nSimilarly, we can apply this same logic to create three vertical blocks.\n\n\n\nMario Blocks\n\n\nTo accomplish this, modify your code as follows:\n// Prints a column of 3 bricks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice how three vertical bricks are printed using a loop.\nWhat if we wanted to combine these ideas to create a three-by-three group of blocks?\n\n\n\nMario Grid\n\n\nWe can follow the logic above, combining the same ideas. Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        for (int j = 0; j &lt; 3; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that one loop is inside another. The first loop defines what vertical row is being printed. For each row, three columns are printed. After each row, a new line is printed.\nWhat if we wanted to ensure that the number of blocks is constant, that is, unchangeable? Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops using a constant\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice how n is now a constant. It can never be changed.\nAs illustrated earlier in this lecture, we can abstract away functionality into functions. Consider the following code:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how printing a row is accomplished through a new function.\n\n\n\n\n\nComments are fundamental parts of a computer program, where you leave explanatory remarks to yourself and others who may be collaborating with you regarding your code.\nAll code you create for this course must include robust comments.\nTypically, each comment is a few words or more, providing the reader an opportunity to understand what is happening in a specific block of code. Further, such comments serve as a reminder for you later when you need to revise your code.\nComments involve placing // into your code, followed by a comment. Modify your code as follows to integrate comments:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n\n    // Print n rows\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how each comment begins with a //.\n\n\n\n\n\nYou can implement a calculator in C. In your terminal, type code calculator.c and write code as follows:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Add numbers\n    int z = x + y;\n\n    // Perform addition\n    printf(\"%i\\n\", z);\n}\n\nNotice how the get_int function is utilized to obtain an integer from the user twice. One integer is stored in the int variable called x. Another is stored in the int variable called y. The sum is stored in z. Then, the printf function prints the value of z, designated by the %i symbol.\nWe can also double a number:\n// int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%i. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%i.\\n\", dollars);\n}\n\nRunning this program, some seeming errors appear in dollars. Why is this?\nOne of C’s shortcomings is the ease by which it manages memory. While C provides you immense control over how memory is utilized, programmers have to be very aware of the potential pitfalls of memory management.\nTypes refer to the possible data that can be stored within a variable. For example, a char is designed to accommodate a single character like a or 2.\nTypes are very important because each type has specific limits. For example, because of the limits in memory, the highest value of an int can be 4294967295. If you attempt to count an int higher, an integer overflow will result where an incorrect value will be stored in this variable.\nThe number of bits limits how high and low we can count.\nThis can have catastrophic, real-world impacts.\nWe can correct this by using a data type called long.\n// long\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    long dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%li. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%li.\\n\", dollars);\n}\n\nNotice how running this code will allow for very high dollar amounts.\nTypes with which you might interact during this course include:\n\nbool, a Boolean expression of either true or false\nchar, a single character like a or 2\ndouble, a floating-point value with more digits than a float\nfloat, a floating-point value, or a real number with a decimal value\nint, integers up to a certain size, or number of bits\nlong, integers with more bits, so they can count higher than an int\nstring, a string of characters\n\n\n\n\n\n\nAnother issue that can arise when using data types includes truncation.\n// Division with ints, demonstrating truncation\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Divide x by y\n    printf(\"%i\\n\", x / y);\n}\n\nAn integer divided by an integer will always result in an integer in C. Accordingly, the above code will often result in any digits after the decimal being thrown away.\nThis can be solved by employing a float:\n// Floats\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    float x = get_float(\"x: \");\n\n    // Prompt user for y\n    float y = get_float(\"y: \");\n\n    // Divide x by y\n    printf(\"%.50f\\n\", x / y);\n}\n\nNotice that this solves some of our problems. However, we might notice imprecision in the answer provided by the program.\nFloating point imprecision illustrates that there are limits to how precise computers can calculate numbers.\nAs you are coding, pay special attention to the types of variables you are using to avoid problems within your code.\nWe examined some examples of disasters that can occur through type-related errors.\n\n\n\n\nIn this lesson, you learned how to apply the building blocks you learned in Scratch to the C programming language. You learned…\n\nHow to create your first program in C.\nHow to use the command line.\nAbout predefined functions that come natively with C.\nHow to use variables, conditionals, and loops.\nHow to create your own functions to simplify and improve your code.\nHow to evaluate your code on three axes: correctness, design, and style.\nHow to integrate comments into your code.\nHow to utilize types and operators and the implications of your choices.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#welcome",
    "href": "notes/notes_2.html#welcome",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In our previous session, we learned about Scratch, a visual programming language.\nIndeed, all the essential programming concepts presented in Scratch will be utilized as you learn how to program any programming language. Functions, conditionals, loops, and variables found in Scratch are fundamental building blocks that you will find in any programming language.\nRecall that machines only understand binary. Where humans write source code, a list of instructions for the computer that is human readable, machines only understand what we can now call machine code. This machine code is a pattern of ones and zeros that produces a desired effect.\nIt turns out that we can convert source code into machine code using a very special piece of software called a compiler. Today, we will be introducing you to a compiler that will allow you to convert source code in the programming language C into machine code.\nToday, in addition to learning how to program, you will be learning how to write good code.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#visual-studio-code",
    "href": "notes/notes_2.html#visual-studio-code",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "The text editor that is utilized for this course is Visual Studio Code, aka VS Code.\nWe will utilize VS Code for this module via Github Classroom (it has all the software required for the course already pre-loaded on it). This course and the instructions herein were designed with VS Code in mind.\nManually installing the necessary software for the course on your own computer is possible, but cumbersome. .\nThe compiler can be divided into a number of regions:\n Notice that there is a file explorer on the left side where you can find your files. Further, notice that there is a region in the middle called a text editor where you can edit your program. Finally, there is a command line interface, known as a CLI, command line, or terminal window, where we can send commands to the computer in the cloud.\nIn the terminal window, some common command-line arguments we may use include:\n\ncd, for changing our current directory (folder)\ncp, for copying files and directories\nls, for listing files in a directory\nmkdir, for making a directory\nmv, for moving (renaming) files and directories\nrm, for removing (deleting) files\nrmdir, for removing (deleting) directories\n\nThe most commonly used is ls which will list all the files in the current directory. Go ahead and type ls into the terminal window and hit enter. You’ll see all the files in the current folder.\nUse our VS Code Sandbox\nBecause this IDE is preconfigured with all the necessary software, you should use it to complete all assignments for this course.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#hello-world",
    "href": "notes/notes_2.html#hello-world",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "We will be using three commands to write, compile, and run our first program:\ncode hello.c\n\nmake hello\n\n./hello\n\n\nThe first command, code hello.c creates a file and allows us to type instructions for this program. The second command, make hello, compiles the file from our instructions in C and creates an executable file called hello. The last command, ./hello, runs the program called hello.\nWe can build your first program in C by typing code hello.c into the terminal window. Notice that we deliberately lowercased the entire filename and included the .c extension. Then, in the text editor that appears, write code as follows:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNote that every single character above serves a purpose. If you type it incorrectly, the program will not run. printf is a function that can output a line of text. Notice the placement of the quotes and the semicolon. Further, notice that the \\n creates a new line after the words hello, world.\nClicking back in the terminal window, you can compile your code by executing make hello. Notice that we are omitting .c. make is a compiler that will look for our hello.c file and turn it into a program called hello. If executing this command results in no errors, you can proceed. If not, double-check your code to ensure it matches the above.\nNow, type ./hello and your program will execute saying hello, world.\nNow, open the file explorer on the left. You will notice that there is now both a file called hello.c and another file called hello. hello.c is able to be read by the compiler: It’s where your code is stored. hello is an executable file that you can run but cannot be read by the compiler.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#from-scratch-to-c",
    "href": "notes/notes_2.html#from-scratch-to-c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In Scratch, we utilized the say block to display any text on the screen. Indeed, in C, we have a function called printf that does exactly this.\nNotice our code already invokes this function:\nprintf(\"hello, world\\n\");\n\nNotice that the printf function is called. The argument passed to printf is hello, world\\n. The statement of code is closed with a ;.\nErrors in code are common. Modify your code as follows:\n// \\n is missing\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\");\n}\n\nNotice the \\n is now gone.\nIn your terminal window, run make hello. Typing ./hello in the terminal window, how did your program change? This \\ character is called an escape character that tells the compiler that \\n is a special instruction to create a line break.\nThere are other escape characters you can use:\n\\n  create a new line\n\\r  return to the start of a line\n\\\"  print a double quote\n\\'  print a single quote\n\\\\  print a backslash\n\nRestore your program to the following:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNotice the semicolon and \\n have been restored.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#header-files-and-c-manual-pages",
    "href": "notes/notes_2.html#header-files-and-c-manual-pages",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "The statement at the start of the code #include &lt;stdio.h&gt; is a very special command that tells the compile that you want to use the capabilities of a library called stdio.h, a header file. This allows you, among many other things, to utilize the printf function.\nA library is a collection of code created by someone. Libraries are collections of pre-written code and functions that others have written in the past that we can utilize in our code.\nYou can read about all the capabilities of this library on the Manual Pages. The Manual Pages provide a means by which to learn what various commands do and how they function.\nIt turns out that CS50 has its own library called cs50.h. There are numerous functions that are included that provide training wheels while you get started in C:\nget_char\nget_double\nget_float\nget_int\nget_long\nget_string\n\nLet’s use this library in your program.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#hello-you",
    "href": "notes/notes_2.html#hello-you",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Recall that in Scratch we had the ability to ask the user, “What’s your name?” and say “hello” with that name appended to it.\nIn C, we can do the same. Modify your code as follows:\n// get_string and printf with incorrect placeholder\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, answer\\n\");\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function.\nRunning make hello again in the terminal window, notice that numerous errors appear.\nLooking at the errors, string and get_string are not recognized by the compiler. We have to teach the compiler these features by adding a library called cs50.h. Also, we notice that answer is not provided as we intended. Modify your code as follows:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function. %s tells the printf function to prepare itself to receive a string.\nNow, running make hello again in the terminal window, you can run your program by typing ./hello. The program now asks for your name and then says hello with your name attached, as intended.\nanswer is a special holding place we call a variable. answer is of type string and can hold any string within it. There are many data types, such as int, bool, char, and many others.\n%s is a placeholder called a format code that tells the printf function to prepare to receive a string. answer is the string being passed to %s.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#types",
    "href": "notes/notes_2.html#types",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "printf allows for many format codes. Here is a non-comprehensive list of ones you may utilize in this course:\n%c\n%f\n%i\n%li\n%s\n\n%s is used for string variables. %i is used for int or integer variables. You can find out more about this on the Manual Pages\nThese format codes correspond to the many data types that are available within C:\nbool\nchar\nfloat\nint\nlong\nstring\n...\n\nWe will be using many of C’s available data types throughout this course.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#conditionals",
    "href": "notes/notes_2.html#conditionals",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Another building block you utilized within Scratch was conditionals. For example, you might want to do one thing if x is greater than y. Further, you might want to do something else if that condition is not met.\nWe look at a few examples from Scratch.\nIn C, you can compare two values as follows:\n// Conditionals that are mutually exclusive\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse\n{\n    printf(\"x is not less than y\\n\");\n}\n\nNotice how if x &lt; y, one outcome occurs. If x is not less than y, then another outcome occurs.\nSimilarly, we can plan for three possible outcomes:\n// Conditional that isn't necessary\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse if (x == y)\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice that not all these lines of code are required. How could we eliminate the unnecessary calculation above?\nYou may have guessed that we can improve this code as follows:\n// Compare integers\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice how the final statement is replaced with else.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#operators",
    "href": "notes/notes_2.html#operators",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Operators refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:\n\n+ for addition\n- for subtraction\n* for multiplication\n/ for division\n% for remainder\n\nWe will use all of these operators in this course.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#variables",
    "href": "notes/notes_2.html#variables",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In C, you can assign a value to an int or integer as follows:\nint counter = 0;\n\nNotice how a variable called counter of type int is assigned the value 0.\nC can also be programmed to add one to counter as follows:\ncounter = counter + 1;\n\nNotice how 1 is added to the value of counter.\nThis can be also represented as:\ncounter += 1;\n\nThis can be further simplified to:\ncounter++;\n\nNotice how the ++ is used to add 1.\nYou can also subtract one from counter as follows:\ncounter--;\n\nNotice how 1 is removed from the value of counter.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#compare.c",
    "href": "notes/notes_2.html#compare.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Using this new knowledge about how to assign values to variables, you can program your first conditional statement.\nIn the terminal window, type code compare.c and write code as follows:\n// Conditional, Boolean expression, relational operator\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n}\n\nNotice that we create two variables, an int or integer called x and another called y. The values of these are populated using the get_int function.\nYou can run your code by executing make compare in the terminal window, followed by ./compare. If you get any error messages, check your code for errors.\nFlow charts are a way by which you can examine how a computer program functions. Such charts can be used to examine the efficiency of our code.\nLooking at a flow chart of the above code, we can notice numerous shortcomings.\nWe can improve your program by coding as follows:\n// Conditionals\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nNotice that all potential outcomes are now accounted for.\nYou can re-make and re-run your program and test it out.\nExamining this program on a flow chart, you can see the efficiency of our code design decisions.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#agree.c",
    "href": "notes/notes_2.html#agree.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Considering another data type called a char, we can start a new program by typing code agree.c into the terminal window.\nWhere a string is a series of characters, a char is a single character.\nIn the text editor, write code as follows:\n// Comparing against lowercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that single quotes are utilized for single characters. Further, notice that == ensures that something is equal to something else, where a single equal sign would have a very different function in C.\nYou can test your code by typing make agree into the terminal window, followed by ./agree.\nWe can also allow for the inputting of uppercase and lowercase characters:\n// Comparing against lowercase and uppercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'Y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n    else if (c == 'N')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that additional options are offered. However, this is not efficient code.\nWe can improve this code as follows:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that || effectively means or.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#loops-and-meow.c",
    "href": "notes/notes_2.html#loops-and-meow.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "We can also utilize the loop building block from Scratch in our C programs.\nIn your terminal window, type code meow.c and write code as follows:\n// Opportunity for better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n}\n\nNotice this does as intended but has an opportunity for better design. Code is repeated over and over.\nWe can improve our program by modifying your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 3;\n    while (i &gt; 0)\n    {\n        printf(\"meow\\n\");\n        i--;\n    }\n}\n\nNotice that we create an int called i and assign it the value 3. Then, we create a while loop that will run as long as i &gt; 0. Then, the loop runs. Every time 1 is subtracted to i using the i-- statement.\nSimilarly, we can implement a count-up of sorts by modifying our code as follows:\n// Print values of i\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 1;\n    while (i &lt;= 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice how our counter i is started at 1. Each time the loop runs, it will increment the counter by 1. Once the counter is greater than 3, it will stop the loop.\nGenerally, in computer science, we count from zero. Best to revise your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 0;\n    while (i &lt; 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice we now count from zero.\nAnother tool in our toolbox for looping is a for loop.\nYou can further improve the design of our meow.c program using a for loop. Modify your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the for loop includes three arguments. The first argument int i = 0 starts our counter at zero. The second argument i &lt; 3 is the condition that is being checked. Finally, the argument i++ tells the loop to increment by one each time the loop runs.\nWe can even loop forever using the following code:\n// Infinite loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    while (true)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that true will always be the case. Therefore, the code will always run. You will lose control of your terminal window by running this code. You can break from an infinite loop by hitting control-C on your keyboard.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#functions",
    "href": "notes/notes_2.html#functions",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "While we will provide much more guidance later, you can create your own function within C as follows:\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nThe initial void means that the function does not return any values. The (void) means that no values are being provided to the function.\nThis function can be used in the main function as follows:\n// Abstraction\n\n#include &lt;stdio.h&gt;\n\nvoid meow(void);\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        meow();\n    }\n}\n\n// Meow once\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nNotice how the meow function is called with the meow() instruction. This is possible because the meow function is defined at the bottom of the code, and the prototype of the function is provided at the top of the code as void meow(void).\nYour meow function can be further modified to accept input:\n// Abstraction with parameterization\n\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    meow(3);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the prototype has changed to void meow(int n) to show that meow accepts an int as its input.\nAdditionally, we can get user input:\n// User input\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    meow(n);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that get_int is used to obtain a number from the user. n is passed to meow.\nWe can even test to ensure that the input we get provided by the user is correct:\n// Return value\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_positive_int(void);\nvoid meow(int n);\n\nint main(void)\n{\n    int n = get_positive_int();\n    meow(n);\n}\n\n// Get number of meows\nint get_positive_int(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    return n;\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that a new function called get_positive_int asks the user for an integer while n &lt; 1. After obtaining a positive integer, this function will return n back to the main function.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#correctness-design-style",
    "href": "notes/notes_2.html#correctness-design-style",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Code can be evaluated upon three axes.\nFirst, correctness refers to “Does the code run as intended?” You can check the correctness of your code with check50.\nSecond, design refers to “How well is the code designed?” You can evaluate the design of your code using design50.\nFinally, style refers to “How aesthetically pleasing and consistent is the code?” You can evaluate the style of your code with style50.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#mario",
    "href": "notes/notes_2.html#mario",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Everything we’ve discussed today has focused on various building blocks of your work as an emerging computer scientist.\nThe following will help you orient toward working on a problem set for this class in general: How does one approach a computer science-related problem?\nImagine we wanted to emulate the visual of the game Super Mario Bros. Considering the four question blocks pictured, how could we create code that roughly represents these four horizontal blocks?\n\n\n\nMario Question Marks\n\n\nIn the terminal window, type code mario.c and code as follows:\n// Prints a row of 4 question marks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"?\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how four question marks are printed here using a loop.\nSimilarly, we can apply this same logic to create three vertical blocks.\n\n\n\nMario Blocks\n\n\nTo accomplish this, modify your code as follows:\n// Prints a column of 3 bricks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice how three vertical bricks are printed using a loop.\nWhat if we wanted to combine these ideas to create a three-by-three group of blocks?\n\n\n\nMario Grid\n\n\nWe can follow the logic above, combining the same ideas. Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        for (int j = 0; j &lt; 3; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that one loop is inside another. The first loop defines what vertical row is being printed. For each row, three columns are printed. After each row, a new line is printed.\nWhat if we wanted to ensure that the number of blocks is constant, that is, unchangeable? Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops using a constant\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice how n is now a constant. It can never be changed.\nAs illustrated earlier in this lecture, we can abstract away functionality into functions. Consider the following code:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how printing a row is accomplished through a new function.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#comments",
    "href": "notes/notes_2.html#comments",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Comments are fundamental parts of a computer program, where you leave explanatory remarks to yourself and others who may be collaborating with you regarding your code.\nAll code you create for this course must include robust comments.\nTypically, each comment is a few words or more, providing the reader an opportunity to understand what is happening in a specific block of code. Further, such comments serve as a reminder for you later when you need to revise your code.\nComments involve placing // into your code, followed by a comment. Modify your code as follows to integrate comments:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n\n    // Print n rows\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how each comment begins with a //.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#more-about-operators",
    "href": "notes/notes_2.html#more-about-operators",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "You can implement a calculator in C. In your terminal, type code calculator.c and write code as follows:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Add numbers\n    int z = x + y;\n\n    // Perform addition\n    printf(\"%i\\n\", z);\n}\n\nNotice how the get_int function is utilized to obtain an integer from the user twice. One integer is stored in the int variable called x. Another is stored in the int variable called y. The sum is stored in z. Then, the printf function prints the value of z, designated by the %i symbol.\nWe can also double a number:\n// int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%i. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%i.\\n\", dollars);\n}\n\nRunning this program, some seeming errors appear in dollars. Why is this?\nOne of C’s shortcomings is the ease by which it manages memory. While C provides you immense control over how memory is utilized, programmers have to be very aware of the potential pitfalls of memory management.\nTypes refer to the possible data that can be stored within a variable. For example, a char is designed to accommodate a single character like a or 2.\nTypes are very important because each type has specific limits. For example, because of the limits in memory, the highest value of an int can be 4294967295. If you attempt to count an int higher, an integer overflow will result where an incorrect value will be stored in this variable.\nThe number of bits limits how high and low we can count.\nThis can have catastrophic, real-world impacts.\nWe can correct this by using a data type called long.\n// long\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    long dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%li. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%li.\\n\", dollars);\n}\n\nNotice how running this code will allow for very high dollar amounts.\nTypes with which you might interact during this course include:\n\nbool, a Boolean expression of either true or false\nchar, a single character like a or 2\ndouble, a floating-point value with more digits than a float\nfloat, a floating-point value, or a real number with a decimal value\nint, integers up to a certain size, or number of bits\nlong, integers with more bits, so they can count higher than an int\nstring, a string of characters",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#truncation",
    "href": "notes/notes_2.html#truncation",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Another issue that can arise when using data types includes truncation.\n// Division with ints, demonstrating truncation\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Divide x by y\n    printf(\"%i\\n\", x / y);\n}\n\nAn integer divided by an integer will always result in an integer in C. Accordingly, the above code will often result in any digits after the decimal being thrown away.\nThis can be solved by employing a float:\n// Floats\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    float x = get_float(\"x: \");\n\n    // Prompt user for y\n    float y = get_float(\"y: \");\n\n    // Divide x by y\n    printf(\"%.50f\\n\", x / y);\n}\n\nNotice that this solves some of our problems. However, we might notice imprecision in the answer provided by the program.\nFloating point imprecision illustrates that there are limits to how precise computers can calculate numbers.\nAs you are coding, pay special attention to the types of variables you are using to avoid problems within your code.\nWe examined some examples of disasters that can occur through type-related errors.",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_2.html#summing-up",
    "href": "notes/notes_2.html#summing-up",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In this lesson, you learned how to apply the building blocks you learned in Scratch to the C programming language. You learned…\n\nHow to create your first program in C.\nHow to use the command line.\nAbout predefined functions that come natively with C.\nHow to use variables, conditionals, and loops.\nHow to create your own functions to simplify and improve your code.\nHow to evaluate your code on three axes: correctness, design, and style.\nHow to integrate comments into your code.\nHow to utilize types and operators and the implications of your choices.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 02 🟢"
    ]
  },
  {
    "objectID": "notes/notes_10.html",
    "href": "notes/notes_10.html",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Welcome!\nhttp-server\nFlask\nForms\nTemplates\nRequest Methods\nFrosh IMs\nFlask and SQL\nCookies and Session\nShopping Cart\nShows\nAPIs\nJSON\nSumming Up\n\n\n\n\nIn previous weeks, you have learned numerous programming languages, techniques, and strategies.\nIndeed, this class has been far less of a C class or Python class and far more of a programming class, such that you can go on to follow future trends.\nIn these past several weeks, you have learned how to learn about programming.\nToday, we will be moving from HTML and CSS into combining HTML, CSS, SQL, Python, and JavaScript so you can create your own web applications.\nYou might consider using the skills you learn this week to create your final project.\n\n\n\n\n\nUp until this point, all HTML you saw was pre-written and static.\nIn the past, when you visited a page, the browser downloaded an HTML page, and you were able to view it. These are considered static pages, in that what is programmed in the HTML is exactly what the user sees and downloads client-side to their internet browser.\nDynamic pages refer to the ability of Python and similar languages to create HTML on-the-fly. Accordingly, you can have web pages that are generated server-side by code based upon the input or behavior of users.\nYou have used http-server in the past to serve your web pages. Today, we are going to utilize a new server that can parse out a web address and perform actions based on the URL provided.\nFurther, last week, you saw URLs as follows:\nhttps://www.example.com/folder/file.html\n\nNotice that file.html is an HTML file inside a folder called folder at example.com.\n\n\n\n\n\nThis week, we introduce the ability to engage with routes such as https://www.example.com/route?key=value, where specific functionality can be generated on the server via the keys and values provided in the URL.\nFlask is a third-party library that allows you to host web applications using the Flask framework, or a micro-framework, within Python.\nYou can run Flask by executing flask run in your terminal window in The Sandbox).\nTo do so, you will need a file called app.py and another called requirements.txt. app.py contains code the tells Flask how to run your web application. requirements.txt includes a list of the libraries that are required for your Flask application to run.\nHere is a sample of requirements.txt:\nFlask\n\nNotice only Flask appears in this file. This is because Flask is required to run the Flask application.\nHere is a very simple Flask application in app.py:\n# Says hello to world by returning a string of text\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return \"hello, world\"\n\nNotice that the / route simply returns the text hello, world.\nWe can also create code that implements HTML:\n# Says hello to world by returning a string of HTML\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return '&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello, world&lt;/body&gt;&lt;/html&gt;'\n\nNotice that rather than returning simple text, this provides HTML.\nImproving our application, we can also serve HTML based upon templates by creating a folder called templates and creating a file called index.html with the following code within that folder:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\n\nNotice the double { name } that is a placeholder for something that will be later provided by our Flask server.\nThen, in the same folder that the templates folder appears, create a file called app.py and add the following code:\n# Uses request.args.get\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    name = request.args.get(\"name\", \"world\")\n    return render_template(\"index.html\", name=name)\n\nNotice that this code defines app as the Flask application. Then, it defines the / route of app as returning the contents of index.html with the argument of name. By default, the request.args.get function will look for the name being provided by the user. If no name is provided, it will default to world. @app.route is otherwise known as a decorator.\nYou can run this web application by typing flask run in the terminal window. If Flask does not run, ensure that your syntax is correct in each of the files above. Further, if Flask will not run, make sure your files are organized as follows:\n/templates\n    index.html\napp.py\nrequirements.txt\n\nOnce you get it running, you will be prompted to click a link. Once you navigate to that webpage, try adding ?name=[Your Name] to the base URL in your browser’s URL bar.\n\n\n\n\n\nImproving upon our program, we know that most users will not type arguments into the address bar. Instead, programmers rely upon users to fill out forms on web pages. Accordingly, we can modify index.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form action=\"/greet\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that a form is now created that takes the user’s name and then passes it off to a route called /greet. autocomplete is turned off. Further, a placeholder with the text name is included. Further, notice how the meta tag is used to make the web page mobile-responsive.\nFurther, we can change app.py as follows:\n# Adds a form, second route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\")\ndef greet():\n    return render_template(\"greet.html\", name=request.args.get(\"name\", \"world\"))\n\nNotice that the default path will display a form for the user to input their name. The /greet route will pass the name to that web page.\nTo finalize this implementation, you will need another template for greet.html in the templates folder as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that this route will now render the greeting to the user, followed by their name.\n\n\n\n\n\nBoth of our web pages, index.html and greet.html, have much of the same data. Wouldn’t it be nice to allow the body to be unique but copy the same layout from page to page?\nFirst, create a new template called layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the {% block body %}{% endblock %} allows for the insertion of other code from other HTML files.\nThen, modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/greet\" method=\"get\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the line {% extends \"layout.html\" %} tells the server where to get the layout of this page. Then, the {% block body %}{% endblock %} tells what code to be inserted into layout.html.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    hello, {{ name }}\n{% endblock %}\n\nNotice how this code is shorter and more compact.\n\n\n\n\n\nYou can imagine scenarios where it is not safe to utilize get, as usernames and passwords would show up in the URL.\nWe can utilize the method post to help with this problem by modifying app.py as follows:\n# Switches to POST\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\", methods=[\"POST\"])\ndef greet():\n    return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n\nNotice that POST is added to the /greet route, and that we use request.form.get rather than request.args.get.\nThis tells the server to look deeper into the virtual envelope and not reveal the items in post in the URL.\nStill, this code can be advanced further by utilizing a single route for both get and post. To do this, modify app.py as follows:\n# Uses a single route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n    return render_template(\"index.html\")\n\nNotice that both get and post are done in a single routing. However, request.method is utilized to properly route based on the type of routing requested by the user.\nAccordingly, you can modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the form action is changed.\nStill, there is a bug still in this code. With our new implementation, when someone types in no name into the form, Hello, is displayed without a name. We can improve our code by editing app.py as follows:\n# Moves default value to template\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\"))\n    return render_template(\"index.html\")\n\nNotice that name=request.form.get(\"name\")) is changed.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    hello,\n    {% if name %}\n        {{ name }}\n    {% else %}\n        world\n    {% endif %}\n\n{% endblock %}\n\nNotice how hello, {{ name }} is changed to allow for a default output when no name is identified.\nAs we’ve been changing many files, you may wish to compare your final code with our final code.\n\n\n\n\n\nFrosh IMs or froshims is a web application that allows students to register for intramural sports.\nClose all your hello related windows and create a folder by typing mkdir froshims in the terminal window. Then, type cd froshims to browse to this folder. Within, create a directory called templates by typing mkdir templates.\nNext, in the froshims folder, type code requirements.txt and code as follows:\nFlask\n\nAs before, Flask is required to run a Flask application.\nFinally, type code app.py and write code as follows:\n# Implements a registration form using a select menu, validating sport server-side\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate submission\n    if not request.form.get(\"name\") or request.form.get(\"sport\") not in SPORTS:\n        return render_template(\"failure.html\")\n\n    # Confirm registration\n    return render_template(\"success.html\")\n\nNotice that a failure option is provided, such that a failure message will be displayed to the user if the name or sport field is not properly filled out.\nNext, create a file in the templates folder called index.html by typing code templates/index.html and write code as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;select name=\"sport\"&gt;\n            &lt;option disabled selected value=\"\"&gt;Sport&lt;/option&gt;\n            {% for sport in sports %}\n                &lt;option value=\"{{ sport }}\"&gt;{{ sport }}&lt;/option&gt;\n            {% endfor %}\n        &lt;/select&gt;\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNext, create a file called layout.html by typing code templates/layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nFourth, create a file in templates called success.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are registered!\n{% endblock %}\n\nFinally, create a file in templates called failure.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\nExecute flask run and check out the application at this stage.\nYou can imagine how we might want to see the various registration options using radio buttons. We can improve index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"radio\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNotice how type has been changed to radio.\nAgain, executing flask run you can see how the interface has now changed.\nYou can imagine how we might want to accept the registration of many different registrants. We can improve app.py as follows:\n# Implements a registration form, storing registrants in a dictionary, with error messages\n\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\nREGISTRANTS = {}\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sport\n    sport = request.form.get(\"sport\")\n    if not sport:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    if sport not in SPORTS:\n        return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    REGISTRANTS[name] = sport\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    return render_template(\"registrants.html\", registrants=REGISTRANTS)\n\nNotice that a dictionary called REGISTRANTS is used to log the sport selected by REGISTRANTS[name]. Also, notice that registrants=REGISTRANTS passes the dictionary on to this template.\nAdditionally, we can implement error.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nFurther, create a new template called registrants.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for name in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrants[name] }}&lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that {% for name in registrants %}...{% endfor %} will iterate through each of the registrants. Very powerful to be able to iterate on a dynamic web page!\nFinally, create a folder called static in the same folder as app.py. There, upload the following file of a cat.\nExecute flask run and play with the application.\nYou now have a web application! However, there are some security flaws! Because everything is client-side, an adversary could change the HTML and hack a website. Further, this data will not persist if the server is shut down. Could there be some way we could have our data persist even when the server restarts?\n\n\n\n\n\nJust as we have seen how Python can interface with a SQL database, we can combine the power of Flask, Python, and SQL to create a web application where data will persist!\nTo implement this, you will need to take a number of steps.\nFirst, download the following SQL database (right click, save as…) into your froshims folder.\nExecute in the terminal sqlite3 froshims.db and type .schema to see the contents of the database file. Further type SELECT * FROM registrants; to learn about the contents. You’ll notice that there are currently no registrations in the file.\nNext, modify requirements.txt as follows:\ncs50\nFlask\n\nModify index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"checkbox\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nModify layout.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nEnsure error.html appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nModify registrants.html to appear as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n                &lt;th&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for registrant in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ registrant.name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrant.sport }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;form action=\"/deregister\" method=\"post\"&gt;\n                            &lt;input name=\"id\" type=\"hidden\" value=\"{{ registrant.id }}\"&gt;\n                            &lt;button type=\"submit\"&gt;Deregister&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that a hidden value registrant.id is included such that it’s possible to use this id later in app.py\nFinally, modify app.py as follows:\n# Implements a registration form, storing registrants in a SQLite database, with support for deregistration\n\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///froshims.db\")\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/deregister\", methods=[\"POST\"])\ndef deregister():\n\n    # Forget registrant\n    id = request.form.get(\"id\")\n    if id:\n        db.execute(\"DELETE FROM registrants WHERE id = ?\", id)\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sports\n    sports = request.form.getlist(\"sport\")\n    if not sports:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    for sport in sports:\n        if sport not in SPORTS:\n            return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    for sport in sports:\n        db.execute(\"INSERT INTO registrants (name, sport) VALUES(?, ?)\", name, sport)\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    registrants = db.execute(\"SELECT * FROM registrants\")\n    return render_template(\"registrants.html\", registrants=registrants)\n\nNotice that the cs50 library is utilized. A route is included for register for the post method. This route will take the name and sport taken from the registration form and execute a SQL query to add the name and the sport to the registrants table. The deregister routes to a SQL query that will grab the user’s id and utilize that information to deregister this individual.\nYou can execute flask run and examine the result.\nIf you want to download our implementation of froshims you can do so here.\nYou can read more about Flask in the Flask documentation.\n\n\n\n\n\napp.py is considered a controller. A view is considered what the users see. A model is how data is stored and manipulated. Together, this is referred to as MVC (model, view, controller).\nWhile the prior implementation of froshims is useful from an administrative standpoint, where a back-office administrator could add and remove individuals from the database, one can imagine how this code is not safe to implement on a public server.\nFor one, bad actors could make decisions on behalf of other users by hitting the deregister button – effectively deleting their recorded answer from the server.\nWeb services like Google use login credentials to ensure users only have access to the right data.\nWe can actually implement this itself using cookies. Cookies are small files that are stored on your computer such that your computer can communicate with the server and effectively say, “I’m an authorized user that has already logged in.” This authorization through this cookie is called a session.\nCookies may be stored as follows:\nGET / HTTP/2\nHost: accounts.google.com\nCookie: session=value\n\nHere, a session id is stored with a particular value representing that session.\nIn the simplest form, we can implement this by creating a folder called login and then adding the following files.\nFirst, create a file called requirements.txt that reads as follows:\nFlask\nFlask-Session\n\nNotice that in addition to Flask, we also include Flask-Session, which is required to support login sessions.\nSecond, in a templates folder, create a file called layout.html that appears as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;login&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice this provides a very simple layout with a title and a body.\nThird, create a file in the templates folder called index.html that appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    {% if name %}\n        You are logged in as {{ name }}. &lt;a href=\"/logout\"&gt;Log out&lt;/a&gt;.\n    {% else %}\n        You are not logged in. &lt;a href=\"/login\"&gt;Log in&lt;/a&gt;.\n    {% endif %}\n\n{% endblock %}\n\nNotice that this file looks to see if session[\"name\"] exists (elaborated further in app.py below). If it does, it will display a welcome message. If not, it will recommend you browse to a page to log in.\nFourth, create a file called login.html and add the following code:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/login\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice this is the layout of a basic login page.\nFinally, create a file called app.py and write code as follows:\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", name=session.get(\"name\"))\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        session[\"name\"] = request.form.get(\"name\")\n        return redirect(\"/\")\n    return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(\"/\")\n\nNotice the modified imports at the top of the file, including session, which will allow you to support sessions. Most importantly, notice how session[\"name\"] is used in the login and logout routes. The login route will assign the login name provided and assign it to session[\"name\"]. However, in the logout route, the logging out is implemented by clearing the value of session.\nThe session abstraction allows you to ensure only a specific user has access to specific data and features in our application. It allows you to ensure that no one acts on behalf of another user, for good or bad!\nIf you wish, you can download our implementation of login.\nYou can read more about sessions in the Flask documentation.\n\n\n\n\n\nMoving on to a final example of utilizing Flask’s ability to enable a session.\nWe examined the following code for store in app.py. The following code was shown:\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Connect to database\ndb = SQL(\"sqlite:///store.db\")\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    books = db.execute(\"SELECT * FROM books\")\n    return render_template(\"books.html\", books=books)\n\n\n@app.route(\"/cart\", methods=[\"GET\", \"POST\"])\ndef cart():\n\n    # Ensure cart exists\n    if \"cart\" not in session:\n        session[\"cart\"] = []\n\n    # POST\n    if request.method == \"POST\":\n        book_id = request.form.get(\"id\")\n        if book_id:\n            session[\"cart\"].append(book_id)\n        return redirect(\"/cart\")\n\n    # GET\n    books = db.execute(\"SELECT * FROM books WHERE id IN (?)\", session[\"cart\"])\n    return render_template(\"cart.html\", books=books)\n\nNotice that cart is implemented using a list. Items can be added to this list using the Add to Cart buttons in books.html. When clicking such a button, the post method is invoked, where the id of the item is appended to the cart. When viewing the cart, invoking the get method, SQL is executed to display a list of the books in the cart.\nWe also saw the contents of books.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;h1&gt;Books&lt;/h1&gt;\n    {% for book in books %}\n        &lt;h2&gt;{{ book[\"title\"] }}&lt;/h2&gt;\n        &lt;form action=\"/cart\" method=\"post\"&gt;\n            &lt;input name=\"id\" type=\"hidden\" value=\"{{ book['id'] }}\"&gt;\n            &lt;button type=\"submit\"&gt;Add to Cart&lt;/button&gt;\n        &lt;/form&gt;\n    {% endfor %}\n\n{% endblock %}\n\nNotice how this creates the ability to Add to Cart for each book using for book in books.\nYou can see the rest of the files that power this flask implementation in the source code.\n\n\n\n\n\nWe looked at a pre-designed program called shows, in app.py:\n# Searches for shows using LIKE\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ?\", \"%\" + request.args.get(\"q\") + \"%\")\n    return render_template(\"search.html\", shows=shows)\n\nNotice how the search route allows for a way by which to search for a show. This search looks for titles LIKE the one provided by the user.\nWe also examined index.html:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the JavaScript script creates an implementation of autocomplete, where titles that match the input are displayed.\nYou can see the rest of the files of this implementation in the source code.\n\n\n\n\n\nAn application program interface or API is a series of specifications that allow you to interface with another service. For example, we could utilize IMDB’s API to interface with their database. We might even integrate APIs for handling specific types of data downloadable from a server.\nImproving upon shows, looking at an improvement of app.py, we saw the following:\n# Searches for shows using Ajax\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return render_template(\"search.html\", shows=shows)\n\nNotice that the search route executes a SQL query.\nLooking at search.html, you’ll notice that it is very simple:\n{% for show in shows %}\n    &lt;li&gt;{{ show[\"title\"] }}&lt;/li&gt;\n{% endfor %}\n\nNotice that it provides a bulleted list.\nFinally, looking at index.html, notice that AJAX code is utilized to power the search:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"search\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.text();\n                document.querySelector('ul').innerHTML = shows;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice an event listener is utilized to dynamically query the server to provide a list that matches the title provided. This will locate the ul tag in the HTML and modify the web page accordingly to include the list of the matches.\nYou can read more in the AJAX documentation.\n\n\n\n\n\nJavaScript Object Notation or JSON is a text file of dictionaries with keys and values. This is a raw, computer-friendly way to get lots of data.\nJSON is a very useful way of getting back data from the server.\nYou can see this in action in the index.html we examined together:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nWhile the above may be somewhat cryptic, it provides a starting point for you to research JSON on your own to see how it can be implemented in your own web applications.\nFurther, we examined app.py to see how the JSON response is obtained:\n# Searches for shows using Ajax with JSON\n\nfrom cs50 import SQL\nfrom flask import Flask, jsonify, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return jsonify(shows)\n\nNotice how jsonify is used to convert the result into a readable format acceptable by contemporary web applications.\nYou can read more in the JSON documentation.\nIn summary, you now have the ability to complete your own web applications using Python, Flask, HTML, and SQL.\n\n\n\n\nIn this lesson, you learned how to utilize Python, SQL, and Flask to create web applications. Specifically, we discussed…\n\nFlask\nForms\nTemplates\nRequest Methods\nFlask and SQL\nCookies and Session\nAPIs\nJSON\n\nSee you next time for our final lecture for this term at Sanders Theatre!",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#welcome",
    "href": "notes/notes_10.html#welcome",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "In previous weeks, you have learned numerous programming languages, techniques, and strategies.\nIndeed, this class has been far less of a C class or Python class and far more of a programming class, such that you can go on to follow future trends.\nIn these past several weeks, you have learned how to learn about programming.\nToday, we will be moving from HTML and CSS into combining HTML, CSS, SQL, Python, and JavaScript so you can create your own web applications.\nYou might consider using the skills you learn this week to create your final project.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#http-server",
    "href": "notes/notes_10.html#http-server",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Up until this point, all HTML you saw was pre-written and static.\nIn the past, when you visited a page, the browser downloaded an HTML page, and you were able to view it. These are considered static pages, in that what is programmed in the HTML is exactly what the user sees and downloads client-side to their internet browser.\nDynamic pages refer to the ability of Python and similar languages to create HTML on-the-fly. Accordingly, you can have web pages that are generated server-side by code based upon the input or behavior of users.\nYou have used http-server in the past to serve your web pages. Today, we are going to utilize a new server that can parse out a web address and perform actions based on the URL provided.\nFurther, last week, you saw URLs as follows:\nhttps://www.example.com/folder/file.html\n\nNotice that file.html is an HTML file inside a folder called folder at example.com.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#flask",
    "href": "notes/notes_10.html#flask",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "This week, we introduce the ability to engage with routes such as https://www.example.com/route?key=value, where specific functionality can be generated on the server via the keys and values provided in the URL.\nFlask is a third-party library that allows you to host web applications using the Flask framework, or a micro-framework, within Python.\nYou can run Flask by executing flask run in your terminal window in The Sandbox).\nTo do so, you will need a file called app.py and another called requirements.txt. app.py contains code the tells Flask how to run your web application. requirements.txt includes a list of the libraries that are required for your Flask application to run.\nHere is a sample of requirements.txt:\nFlask\n\nNotice only Flask appears in this file. This is because Flask is required to run the Flask application.\nHere is a very simple Flask application in app.py:\n# Says hello to world by returning a string of text\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return \"hello, world\"\n\nNotice that the / route simply returns the text hello, world.\nWe can also create code that implements HTML:\n# Says hello to world by returning a string of HTML\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return '&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello, world&lt;/body&gt;&lt;/html&gt;'\n\nNotice that rather than returning simple text, this provides HTML.\nImproving our application, we can also serve HTML based upon templates by creating a folder called templates and creating a file called index.html with the following code within that folder:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\n\nNotice the double { name } that is a placeholder for something that will be later provided by our Flask server.\nThen, in the same folder that the templates folder appears, create a file called app.py and add the following code:\n# Uses request.args.get\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    name = request.args.get(\"name\", \"world\")\n    return render_template(\"index.html\", name=name)\n\nNotice that this code defines app as the Flask application. Then, it defines the / route of app as returning the contents of index.html with the argument of name. By default, the request.args.get function will look for the name being provided by the user. If no name is provided, it will default to world. @app.route is otherwise known as a decorator.\nYou can run this web application by typing flask run in the terminal window. If Flask does not run, ensure that your syntax is correct in each of the files above. Further, if Flask will not run, make sure your files are organized as follows:\n/templates\n    index.html\napp.py\nrequirements.txt\n\nOnce you get it running, you will be prompted to click a link. Once you navigate to that webpage, try adding ?name=[Your Name] to the base URL in your browser’s URL bar.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#forms",
    "href": "notes/notes_10.html#forms",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Improving upon our program, we know that most users will not type arguments into the address bar. Instead, programmers rely upon users to fill out forms on web pages. Accordingly, we can modify index.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form action=\"/greet\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that a form is now created that takes the user’s name and then passes it off to a route called /greet. autocomplete is turned off. Further, a placeholder with the text name is included. Further, notice how the meta tag is used to make the web page mobile-responsive.\nFurther, we can change app.py as follows:\n# Adds a form, second route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\")\ndef greet():\n    return render_template(\"greet.html\", name=request.args.get(\"name\", \"world\"))\n\nNotice that the default path will display a form for the user to input their name. The /greet route will pass the name to that web page.\nTo finalize this implementation, you will need another template for greet.html in the templates folder as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that this route will now render the greeting to the user, followed by their name.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#templates",
    "href": "notes/notes_10.html#templates",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Both of our web pages, index.html and greet.html, have much of the same data. Wouldn’t it be nice to allow the body to be unique but copy the same layout from page to page?\nFirst, create a new template called layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the {% block body %}{% endblock %} allows for the insertion of other code from other HTML files.\nThen, modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/greet\" method=\"get\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the line {% extends \"layout.html\" %} tells the server where to get the layout of this page. Then, the {% block body %}{% endblock %} tells what code to be inserted into layout.html.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    hello, {{ name }}\n{% endblock %}\n\nNotice how this code is shorter and more compact.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#request-methods",
    "href": "notes/notes_10.html#request-methods",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "You can imagine scenarios where it is not safe to utilize get, as usernames and passwords would show up in the URL.\nWe can utilize the method post to help with this problem by modifying app.py as follows:\n# Switches to POST\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\", methods=[\"POST\"])\ndef greet():\n    return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n\nNotice that POST is added to the /greet route, and that we use request.form.get rather than request.args.get.\nThis tells the server to look deeper into the virtual envelope and not reveal the items in post in the URL.\nStill, this code can be advanced further by utilizing a single route for both get and post. To do this, modify app.py as follows:\n# Uses a single route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n    return render_template(\"index.html\")\n\nNotice that both get and post are done in a single routing. However, request.method is utilized to properly route based on the type of routing requested by the user.\nAccordingly, you can modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the form action is changed.\nStill, there is a bug still in this code. With our new implementation, when someone types in no name into the form, Hello, is displayed without a name. We can improve our code by editing app.py as follows:\n# Moves default value to template\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\"))\n    return render_template(\"index.html\")\n\nNotice that name=request.form.get(\"name\")) is changed.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    hello,\n    {% if name %}\n        {{ name }}\n    {% else %}\n        world\n    {% endif %}\n\n{% endblock %}\n\nNotice how hello, {{ name }} is changed to allow for a default output when no name is identified.\nAs we’ve been changing many files, you may wish to compare your final code with our final code.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#frosh-ims",
    "href": "notes/notes_10.html#frosh-ims",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Frosh IMs or froshims is a web application that allows students to register for intramural sports.\nClose all your hello related windows and create a folder by typing mkdir froshims in the terminal window. Then, type cd froshims to browse to this folder. Within, create a directory called templates by typing mkdir templates.\nNext, in the froshims folder, type code requirements.txt and code as follows:\nFlask\n\nAs before, Flask is required to run a Flask application.\nFinally, type code app.py and write code as follows:\n# Implements a registration form using a select menu, validating sport server-side\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate submission\n    if not request.form.get(\"name\") or request.form.get(\"sport\") not in SPORTS:\n        return render_template(\"failure.html\")\n\n    # Confirm registration\n    return render_template(\"success.html\")\n\nNotice that a failure option is provided, such that a failure message will be displayed to the user if the name or sport field is not properly filled out.\nNext, create a file in the templates folder called index.html by typing code templates/index.html and write code as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;select name=\"sport\"&gt;\n            &lt;option disabled selected value=\"\"&gt;Sport&lt;/option&gt;\n            {% for sport in sports %}\n                &lt;option value=\"{{ sport }}\"&gt;{{ sport }}&lt;/option&gt;\n            {% endfor %}\n        &lt;/select&gt;\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNext, create a file called layout.html by typing code templates/layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nFourth, create a file in templates called success.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are registered!\n{% endblock %}\n\nFinally, create a file in templates called failure.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\nExecute flask run and check out the application at this stage.\nYou can imagine how we might want to see the various registration options using radio buttons. We can improve index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"radio\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNotice how type has been changed to radio.\nAgain, executing flask run you can see how the interface has now changed.\nYou can imagine how we might want to accept the registration of many different registrants. We can improve app.py as follows:\n# Implements a registration form, storing registrants in a dictionary, with error messages\n\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\nREGISTRANTS = {}\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sport\n    sport = request.form.get(\"sport\")\n    if not sport:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    if sport not in SPORTS:\n        return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    REGISTRANTS[name] = sport\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    return render_template(\"registrants.html\", registrants=REGISTRANTS)\n\nNotice that a dictionary called REGISTRANTS is used to log the sport selected by REGISTRANTS[name]. Also, notice that registrants=REGISTRANTS passes the dictionary on to this template.\nAdditionally, we can implement error.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nFurther, create a new template called registrants.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for name in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrants[name] }}&lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that {% for name in registrants %}...{% endfor %} will iterate through each of the registrants. Very powerful to be able to iterate on a dynamic web page!\nFinally, create a folder called static in the same folder as app.py. There, upload the following file of a cat.\nExecute flask run and play with the application.\nYou now have a web application! However, there are some security flaws! Because everything is client-side, an adversary could change the HTML and hack a website. Further, this data will not persist if the server is shut down. Could there be some way we could have our data persist even when the server restarts?",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#flask-and-sql",
    "href": "notes/notes_10.html#flask-and-sql",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Just as we have seen how Python can interface with a SQL database, we can combine the power of Flask, Python, and SQL to create a web application where data will persist!\nTo implement this, you will need to take a number of steps.\nFirst, download the following SQL database (right click, save as…) into your froshims folder.\nExecute in the terminal sqlite3 froshims.db and type .schema to see the contents of the database file. Further type SELECT * FROM registrants; to learn about the contents. You’ll notice that there are currently no registrations in the file.\nNext, modify requirements.txt as follows:\ncs50\nFlask\n\nModify index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"checkbox\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nModify layout.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nEnsure error.html appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nModify registrants.html to appear as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n                &lt;th&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for registrant in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ registrant.name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrant.sport }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;form action=\"/deregister\" method=\"post\"&gt;\n                            &lt;input name=\"id\" type=\"hidden\" value=\"{{ registrant.id }}\"&gt;\n                            &lt;button type=\"submit\"&gt;Deregister&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that a hidden value registrant.id is included such that it’s possible to use this id later in app.py\nFinally, modify app.py as follows:\n# Implements a registration form, storing registrants in a SQLite database, with support for deregistration\n\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///froshims.db\")\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/deregister\", methods=[\"POST\"])\ndef deregister():\n\n    # Forget registrant\n    id = request.form.get(\"id\")\n    if id:\n        db.execute(\"DELETE FROM registrants WHERE id = ?\", id)\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sports\n    sports = request.form.getlist(\"sport\")\n    if not sports:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    for sport in sports:\n        if sport not in SPORTS:\n            return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    for sport in sports:\n        db.execute(\"INSERT INTO registrants (name, sport) VALUES(?, ?)\", name, sport)\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    registrants = db.execute(\"SELECT * FROM registrants\")\n    return render_template(\"registrants.html\", registrants=registrants)\n\nNotice that the cs50 library is utilized. A route is included for register for the post method. This route will take the name and sport taken from the registration form and execute a SQL query to add the name and the sport to the registrants table. The deregister routes to a SQL query that will grab the user’s id and utilize that information to deregister this individual.\nYou can execute flask run and examine the result.\nIf you want to download our implementation of froshims you can do so here.\nYou can read more about Flask in the Flask documentation.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#cookies-and-session",
    "href": "notes/notes_10.html#cookies-and-session",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "app.py is considered a controller. A view is considered what the users see. A model is how data is stored and manipulated. Together, this is referred to as MVC (model, view, controller).\nWhile the prior implementation of froshims is useful from an administrative standpoint, where a back-office administrator could add and remove individuals from the database, one can imagine how this code is not safe to implement on a public server.\nFor one, bad actors could make decisions on behalf of other users by hitting the deregister button – effectively deleting their recorded answer from the server.\nWeb services like Google use login credentials to ensure users only have access to the right data.\nWe can actually implement this itself using cookies. Cookies are small files that are stored on your computer such that your computer can communicate with the server and effectively say, “I’m an authorized user that has already logged in.” This authorization through this cookie is called a session.\nCookies may be stored as follows:\nGET / HTTP/2\nHost: accounts.google.com\nCookie: session=value\n\nHere, a session id is stored with a particular value representing that session.\nIn the simplest form, we can implement this by creating a folder called login and then adding the following files.\nFirst, create a file called requirements.txt that reads as follows:\nFlask\nFlask-Session\n\nNotice that in addition to Flask, we also include Flask-Session, which is required to support login sessions.\nSecond, in a templates folder, create a file called layout.html that appears as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;login&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice this provides a very simple layout with a title and a body.\nThird, create a file in the templates folder called index.html that appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    {% if name %}\n        You are logged in as {{ name }}. &lt;a href=\"/logout\"&gt;Log out&lt;/a&gt;.\n    {% else %}\n        You are not logged in. &lt;a href=\"/login\"&gt;Log in&lt;/a&gt;.\n    {% endif %}\n\n{% endblock %}\n\nNotice that this file looks to see if session[\"name\"] exists (elaborated further in app.py below). If it does, it will display a welcome message. If not, it will recommend you browse to a page to log in.\nFourth, create a file called login.html and add the following code:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/login\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice this is the layout of a basic login page.\nFinally, create a file called app.py and write code as follows:\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", name=session.get(\"name\"))\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        session[\"name\"] = request.form.get(\"name\")\n        return redirect(\"/\")\n    return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(\"/\")\n\nNotice the modified imports at the top of the file, including session, which will allow you to support sessions. Most importantly, notice how session[\"name\"] is used in the login and logout routes. The login route will assign the login name provided and assign it to session[\"name\"]. However, in the logout route, the logging out is implemented by clearing the value of session.\nThe session abstraction allows you to ensure only a specific user has access to specific data and features in our application. It allows you to ensure that no one acts on behalf of another user, for good or bad!\nIf you wish, you can download our implementation of login.\nYou can read more about sessions in the Flask documentation.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#shopping-cart",
    "href": "notes/notes_10.html#shopping-cart",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Moving on to a final example of utilizing Flask’s ability to enable a session.\nWe examined the following code for store in app.py. The following code was shown:\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Connect to database\ndb = SQL(\"sqlite:///store.db\")\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    books = db.execute(\"SELECT * FROM books\")\n    return render_template(\"books.html\", books=books)\n\n\n@app.route(\"/cart\", methods=[\"GET\", \"POST\"])\ndef cart():\n\n    # Ensure cart exists\n    if \"cart\" not in session:\n        session[\"cart\"] = []\n\n    # POST\n    if request.method == \"POST\":\n        book_id = request.form.get(\"id\")\n        if book_id:\n            session[\"cart\"].append(book_id)\n        return redirect(\"/cart\")\n\n    # GET\n    books = db.execute(\"SELECT * FROM books WHERE id IN (?)\", session[\"cart\"])\n    return render_template(\"cart.html\", books=books)\n\nNotice that cart is implemented using a list. Items can be added to this list using the Add to Cart buttons in books.html. When clicking such a button, the post method is invoked, where the id of the item is appended to the cart. When viewing the cart, invoking the get method, SQL is executed to display a list of the books in the cart.\nWe also saw the contents of books.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;h1&gt;Books&lt;/h1&gt;\n    {% for book in books %}\n        &lt;h2&gt;{{ book[\"title\"] }}&lt;/h2&gt;\n        &lt;form action=\"/cart\" method=\"post\"&gt;\n            &lt;input name=\"id\" type=\"hidden\" value=\"{{ book['id'] }}\"&gt;\n            &lt;button type=\"submit\"&gt;Add to Cart&lt;/button&gt;\n        &lt;/form&gt;\n    {% endfor %}\n\n{% endblock %}\n\nNotice how this creates the ability to Add to Cart for each book using for book in books.\nYou can see the rest of the files that power this flask implementation in the source code.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#shows",
    "href": "notes/notes_10.html#shows",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "We looked at a pre-designed program called shows, in app.py:\n# Searches for shows using LIKE\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ?\", \"%\" + request.args.get(\"q\") + \"%\")\n    return render_template(\"search.html\", shows=shows)\n\nNotice how the search route allows for a way by which to search for a show. This search looks for titles LIKE the one provided by the user.\nWe also examined index.html:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the JavaScript script creates an implementation of autocomplete, where titles that match the input are displayed.\nYou can see the rest of the files of this implementation in the source code.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#apis",
    "href": "notes/notes_10.html#apis",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "An application program interface or API is a series of specifications that allow you to interface with another service. For example, we could utilize IMDB’s API to interface with their database. We might even integrate APIs for handling specific types of data downloadable from a server.\nImproving upon shows, looking at an improvement of app.py, we saw the following:\n# Searches for shows using Ajax\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return render_template(\"search.html\", shows=shows)\n\nNotice that the search route executes a SQL query.\nLooking at search.html, you’ll notice that it is very simple:\n{% for show in shows %}\n    &lt;li&gt;{{ show[\"title\"] }}&lt;/li&gt;\n{% endfor %}\n\nNotice that it provides a bulleted list.\nFinally, looking at index.html, notice that AJAX code is utilized to power the search:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"search\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.text();\n                document.querySelector('ul').innerHTML = shows;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice an event listener is utilized to dynamically query the server to provide a list that matches the title provided. This will locate the ul tag in the HTML and modify the web page accordingly to include the list of the matches.\nYou can read more in the AJAX documentation.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#json",
    "href": "notes/notes_10.html#json",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "JavaScript Object Notation or JSON is a text file of dictionaries with keys and values. This is a raw, computer-friendly way to get lots of data.\nJSON is a very useful way of getting back data from the server.\nYou can see this in action in the index.html we examined together:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nWhile the above may be somewhat cryptic, it provides a starting point for you to research JSON on your own to see how it can be implemented in your own web applications.\nFurther, we examined app.py to see how the JSON response is obtained:\n# Searches for shows using Ajax with JSON\n\nfrom cs50 import SQL\nfrom flask import Flask, jsonify, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return jsonify(shows)\n\nNotice how jsonify is used to convert the result into a readable format acceptable by contemporary web applications.\nYou can read more in the JSON documentation.\nIn summary, you now have the ability to complete your own web applications using Python, Flask, HTML, and SQL.",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "notes/notes_10.html#summing-up",
    "href": "notes/notes_10.html#summing-up",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "In this lesson, you learned how to utilize Python, SQL, and Flask to create web applications. Specifically, we discussed…\n\nFlask\nForms\nTemplates\nRequest Methods\nFlask and SQL\nCookies and Session\nAPIs\nJSON\n\nSee you next time for our final lecture for this term at Sanders Theatre!",
    "crumbs": [
      "Notes",
      "Notes 10 🐍"
    ]
  },
  {
    "objectID": "module-syllabus.html",
    "href": "module-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Dr. Ed Harris",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#your-instructor",
    "href": "module-syllabus.html#your-instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Dr. Ed Harris",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#learning-objectives",
    "href": "module-syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nAnalyse and solve problems using computational thinking, applying fundamental concepts of computer science\nDesign and implement algorithms in different programming languages\nEvaluate and improve the correctness, design, and style of code\nSynthesise knowledge of programming concepts to create apps\nApply the principles of data management for the storage and retrieval of information",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#meetings",
    "href": "module-syllabus.html#meetings",
    "title": "Syllabus",
    "section": "Meetings",
    "text": "Meetings\nScheduled meetings will be held in person in Telford, Station Quarter. Autumn 2025: Check your personal schedule for room, day, time.\nLectures will introduce the topic and sometimes involve live coding demonstration of key concepts. Lectures will be delivered in person, and will be recorded and made available on the module website.\nTutorials will demonstrate concepts discussed in lectures to various scenarios, with a focus on the problem solving. Tutorials will be demonstrated and should also be completed individually. That is, run the code yourself.\nMaterial may be livestreamed to the YouTube channel and recorded for later viewing.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#online-resources",
    "href": "module-syllabus.html#online-resources",
    "title": "Syllabus",
    "section": "Online resources",
    "text": "Online resources\nAll lecture notes, assignment instructions, an up-to-date schedule, and other course materials may be found on the module website.\nHarper Adams module website (university enrolled students only, requires login)\n\nDiscord - join the community - for live discussion and support\nGitHub - the module repository - for the module materials\nYouTube - The Statistics Lab channel - for live streams and recordings\nTwitch - the DataGiri channel - for live streams and recordings\nTwitter - Follow Ed’s account - for information, and memes",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#assessments",
    "href": "module-syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\n\nAssessment 1\nHomework: These homework problem sets will typically be distributed throughout the module and are designed to test the grasp and application of programming concepts ranging from basic syntax to topics like data structures and algorithms. Each set will consist of practical tasks involving various programming challenges.\n\n\nAssessment 2\nProject: This is an opportunity to apply programming skills in developing your own software solution. This project encourages creativity and innovation, allowing you to choose an appropriate programming language and build an application that is personally meaningful, solves real-world problems, or potentially impacts the community or world at large.\nFor the project you can opt to work individually or collaborate with up to two other classmates, with the expectation that each member contributes equally to the project design and implementation. The complexity of the project should reflect the size of the group, with group projects expected to be more intricate than individual ones. The final project is assessed based on the project complexity and scope, the effectiveness of the implemented solution, creativity, and the overall quality of the code. For group projects, the assessment also considers individual contributions and the collaborative effort. NB for group projects, the scope and ambition of the project should reflect the size of the group.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#readings-optional",
    "href": "module-syllabus.html#readings-optional",
    "title": "Syllabus",
    "section": "Readings (optional)",
    "text": "Readings (optional)\nWhile there is no textbook for the module, these may be of interest.\nBlogs\nJulia Silge’s Blog :: Andrew Gelman’s Blog :: Simply Statistics :: R bloggers :: Ethan Mollick’s Blog\nBooks\nBentley, J., 1988. More Programming Pearls: Confessions of a Coder: Confessions of a Coder. Addison-Wesley Professional, Reading, Mass.\nBhargava, A., 2024. Grokking Algorithms. Manning Publications, Shelter Island, NY.\nHermans, F., 2021. The Programmer’s Brain: What every programmer needs to know about cognition. Manning, Shelter Island, NY.\nHunt, A., Thomas, D., 1999. The Pragmatic Programmer: From Journeyman to Master. Addison-Wesley Professional.\nKenett, R.S., Redman, T.C., 2019. The Real Work of Data Science: Turning data into information, better decisions, and stronger organizations. Wiley, Hoboken$cChichester.\nMcConnell, S., 2004. Code Complete: A Practical Handbook of Software Construction, Second Edition. Microsoft Press, Redmond, Wash.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#five-tips-for-success",
    "href": "module-syllabus.html#five-tips-for-success",
    "title": "Syllabus",
    "section": "Five tips for success",
    "text": "Five tips for success\nYour success on this module depends very much on you and the effort you put into it. Like any learning, the burden of engaging with the material is on you. The module staff and I will help you be providing you with materials and answering questions and setting a pace, but for this to work you must do the following:\n\nComplete all the preparation work before class.\nAsk questions. As often as you can. In class, out of class. Ask me, ask the TAs, ask your friends, ask the person sitting next to you. This will help you more than anything else. If you get a question wrong on an assessment, ask us why. If you’re not sure about the homework, let’s talk about it. If you hear something on the news that sounds related to what we discussed, share it and let’s discuss. If the reading is confusing, ask.\nDo the readings.\nDo the homework and the tutorials. The earlier you start, the better. It’s not enough to just mechanically plow through the exercises. You should ask yourself how these exercises relate to earlier material, and imagine how they might be changed (to make questions for an exam, for example.)\nDon’t procrastinate. If something is confusing to you in Week 2, Week 3 will become more confusing, Week 4 even worse, and eventually you won’t know where to begin asking questions. Don’t let the week end with unanswered questions. But if you find yourself falling behind and not knowing where to begin asking, ask for help, and let us help you identify a good (re)starting point.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#module-policies",
    "href": "module-syllabus.html#module-policies",
    "title": "Syllabus",
    "section": "Module policies",
    "text": "Module policies\nThe essence of all work that you submit to this course must be your own. Unless otherwise specified, collaboration on assessments (e.g., assignments, labs, problem sets, projects, quizzes, or tests) is not permitted except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your work to others, but you may not view theirs, so long as you and they respect this policy’s other constraints.\nReasonable\n\nCommunicating with classmates about assessments in English (or some other spoken language), and properly citing those discussions.\nDiscussing the course’s material with others in order to understand it better.\nHelping a classmate identify a bug in their code, as by viewing, compiling, or running their code after you have submitted that portion of the pset yourself.\nIncorporating a few lines of code that you find online or elsewhere into your own code, provided that those lines are not themselves solutions to assigned work and that you cite the lines’ origins.\nSending or showing code that you’ve written to someone, possibly a classmate, so that they might help you identify and fix a bug.\nSubmitting the same or similar work to this course that you have submitted previously to this course.\nTurning to the web or elsewhere for instruction beyond the course’s own, for references, and for solutions to technical difficulties, but not for outright solutions to assigned work.\nUsing AI-based software to ask questions, but not presenting its answers as your own.\nWhiteboarding solutions with others using diagrams or pseudocode but not actual code.\nWorking with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.\n\nNot Reasonable\n\nAccessing a solution to some assessement prior to (re-)submitting your own.\nAccessing or attempting to access, without permission, an account not your own.\nAsking a classmate to see their solution to some assessment before submitting your own.\nFailing to cite (as with comments) the origins of code or techniques that you discover outside of the course’s own lessons and integrate into your own work, even while respecting this policy’s other constraints.\nGiving or showing to a classmate a solution to an assessment when it is they, and not you, who is struggling to solve it.\nPaying or offering to pay an individual for work that you may submit as (part of) your own.\nProviding or making available solutions to assessments to anyone, whether a past, present, or prospective future student.\nSearching for or soliciting outright solutions to assessments online or elsewhere.\nSplitting an assessment’s workload with another individual and combining your work.\nSubmitting (after possibly modifying) the work of another individual beyond the few lines allowed herein.\nSubmitting the same or similar work to this course that you have submitted or will submit to another course, unless explictly allowed.\nUsing AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) that suggests answers or lines of code.\nViewing another’s solution to an assessment and basing your own solution on it.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-links.html",
    "href": "module-links.html",
    "title": "Useful links",
    "section": "",
    "text": "🔗 Join “The Sandbox” (VS Code Codespace)) - Once you “accept the assessment” you will be able to access The Sandbox anytime.\n🔗 Harper Adams VLE site for this module (HAU enrolled students only)\n🔗 Access your Codespaces\n🔗\n🔗 Code Club meetings",
    "crumbs": [
      "Useful links"
    ]
  },
  {
    "objectID": "module-extras.html",
    "href": "module-extras.html",
    "title": "Extra Meetings",
    "section": "",
    "text": "Our first hackathon will be held on  from 10am to 12pm. This is an epic late-nighter where we work on our projects together"
  },
  {
    "objectID": "module-extras.html#hackathon",
    "href": "module-extras.html#hackathon",
    "title": "Extra Meetings",
    "section": "",
    "text": "Our first hackathon will be held on  from 10am to 12pm. This is an epic late-nighter where we work on our projects together"
  },
  {
    "objectID": "module-extras.html#the-statistics-lab-meetings",
    "href": "module-extras.html#the-statistics-lab-meetings",
    "title": "Extra Meetings",
    "section": "The Statistics Lab meetings",
    "text": "The Statistics Lab meetings\nThe Statistics Lab is a group of people (students, researchers, and staff) who are interested in statistics and data science. We meet every week to discuss practical statistics and data science topics."
  },
  {
    "objectID": "module-extras.html#code-club",
    "href": "module-extras.html#code-club",
    "title": "Extra Meetings",
    "section": "Code Club",
    "text": "Code Club\nThe Code Club is an outreach-based initiative that aims to help schoolstudents learn programming and data science. Our first Code Club will be held regularly on  from xxx to yyy. This is an opportunity for you to help mentor younger students - it is fun, rewarding, and a great way to build your CV."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computing Technology",
    "section": "",
    "text": "Use the computer well and it will be a great ally. Use it badly and it will be your master.\n\nWelcome!\nComputing Technology is an introduction to computer science through a range of programming languages, suitable for those with or without prior programming experience. The module demonstrates concepts using various programming languages, emphasizing problem-solving, correctness, design, and style.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "hw/hw-1.html",
    "href": "hw/hw-1.html",
    "title": "HW 1 - In-person voting trends",
    "section": "",
    "text": "In this assignment, you’ll use simple linear regression to explore the percent of votes cast in-person in the 2020 U.S. election based on the county’s political leanings.\n\n\nIn this assignment, you will…\n\nFit and interpret simple linear regression models\nAssess the conditions for simple linear regression.\nCreate and interpret spatial data visualizations using R.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "hw/hw-1.html#introduction",
    "href": "hw/hw-1.html#introduction",
    "title": "HW 1 - In-person voting trends",
    "section": "",
    "text": "In this assignment, you’ll use simple linear regression to explore the percent of votes cast in-person in the 2020 U.S. election based on the county’s political leanings.\n\n\nIn this assignment, you will…\n\nFit and interpret simple linear regression models\nAssess the conditions for simple linear regression.\nCreate and interpret spatial data visualizations using R.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "hw/hw-1.html#getting-started",
    "href": "hw/hw-1.html#getting-started",
    "title": "HW 1 - In-person voting trends",
    "section": "Getting started",
    "text": "Getting started\n\nLog in to RStudio\n\nGo to https://vm-manage.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA210 to log into the Docker container. You should now see the RStudio environment.\n\n\n\nClone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta210-s22 organization on GitHub. Click on the repo with the prefix hw-1. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick hw-1-voting.qmd to open the template R Markdown file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "hw/hw-1.html#packages",
    "href": "hw/hw-1.html#packages",
    "title": "HW 1 - In-person voting trends",
    "section": "Packages",
    "text": "Packages\nThe following packages will be used in this assignment:\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(scales)"
  },
  {
    "objectID": "hw/hw-1.html#data-2020-election",
    "href": "hw/hw-1.html#data-2020-election",
    "title": "HW 1 - In-person voting trends",
    "section": "Data: 2020 Election",
    "text": "Data: 2020 Election\nThere are multiple data sets for this assignment. Use the code below to load the data.\n\nelection_nc &lt;- read_csv(\"data/nc-election-2020.csv\") %&gt;%\n  mutate(fips = as.integer(FIPS))\ncounty_map_data &lt;-  read_csv(\"data/nc-county-map-data.csv\")\nelection_sample &lt;- read_csv(\"data/us-election-2020-sample.csv\")\n\nThe county-level election data in election_nc and election_sample are from The Economist GitHub repo. The data were originally analyzed in the July 2021 article In-person voting really did accelerate covid-19’s spread in America. For this analysis, we will focus on the following variables:\n\ninperson_pct: The proportion of a county’s votes cast in-person in the 2020 election\npctTrump_2016: The proportion of a county’s votes cast for Donald Trump in the 2016 election\n\nThe data in county_map_data were obtained from the maps package in R. We will not analyze any of the variables in this data set but will use it to help create maps in the assignment. Click here to see the documentation for the maps package. Click here for code examples."
  },
  {
    "objectID": "hw/hw-1.html#exercises",
    "href": "hw/hw-1.html#exercises",
    "title": "HW 1 - In-person voting trends",
    "section": "Exercises",
    "text": "Exercises\nDue to COVID-19 pandemic, many states made alternatives in-person voting, such as voting by mail, more widely available for the 2020 U.S. election. The general consensus was that voters who were more Democratic leaning would be more likely to vote by mail, while more Republican leaning voters would largely vote in-person. This was supported by multiple surveys, including this survey conducted by Pew Research.\nThe goal of this analysis is to use regression analysis to explore the relationship between a county’s political leanings and the proportion of votes cast in-person in 2020. The ultimate question we want to answer is “Did counties with more Republican leanings have a larger proportion of votes cast in-person in the 2020 election?”\nWe will use the proportion of votes cast for Donald Trump in 2016 (pctTrump_2016) as a measure of a county’s political leaning. Counties with a higher proportion of votes for Trump in 2016 are considered to have more Republican leanings.\n\n\n\n\n\n\nNote\n\n\n\nAll narrative should be written in complete sentences, and all visualizations should have informative titles and axis labels.\n\n\n\nPart 1: Counties in North Carolina\nFor this part of the analysis, we will focus on counties in North Carolina. We will use the data sets election_nc and county_map_data.\n\nVisualize the distribution of the response variable inperson_pct and calculate appropriate summary statistics. Use the visualization and summary statistics to describe the distribution. Include an informative title and axis labels on the plot.\nLet’s view the data in another way. Use the code below to make a map of North Carolina with the color of each county filled in based on the percentage of votes cast in-person in the 2020 election. Fill in title and axis labels.\nThen use the plot answer the following:\n\nWhat are 2 - 3 observations you have from the plot?\nWhat is a feature that is apparent in the map that wasn’t apparent from the histogram in the previous exercise? What is a feature that is apparent in the histogram that is not apparent in the map?\n\n\n\nelection_map_data &lt;- left_join(election_nc, county_map_data)\n\nggplot() +\n  geom_polygon(data = county_map_data,\n    mapping = aes(x = long, y = lat, group = group),\n    fill = \"lightgray\", color = \"white\"\n    ) +\n  geom_polygon(data = election_map_data, \n    mapping = aes(x = long, y = lat, group = group,\n    fill = inperson_pct)\n    ) +\n  labs(\n    x = \"___\",\n    y = \"___\",\n    fill = \"___\",\n    title = \"___\"\n  ) +\n  scale_fill_viridis_c(labels = label_percent(scale = 1)) +\n  coord_quickmap()\n\n\nCreate a visualization of the relationship between inperson_pct and pctTrump_2016. Use the visualization to describe the relationship between the two variables.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven’t yet done so, now is a good time to render your document and commit (with a meaningful commit message) and push all updates.\n\n\n\nWe can use a linear regression model to better quantify the relationship between the variables.\n\nFit the linear model to understand variability in the percent of in-person votes based on the percent of votes for Trump in the 2016 election. Neatly display the model output with 3 digits.\nWrite the regression equation using mathematical notation.\n\nNow let’s use the model coefficients to describe the relationship.\n\nInterpret the slope. The interpretation should be written in a way that is meaningful in the context of the data.\nDoes it make sense to interpret the intercept? If so, write the interpretation in the context of the data. Otherwise, briefly explain why not.\n\nIf the linear model is a good fit to these data, there should be no structure left in the residuals and the residuals should have constant variance. Augment the data with the model to obtain the residuals and predicted values for each observation, and call the augmented data frame nc_election_aug (You will use this name in Exercise 8). Then, make a plot of the residuals vs. the fitted values, and based on this plot, and provide a brief explanation for whether these two conditions are met. Hint: Zoom out on the plot by extending the limits of the y-axis.\n\n\n\n\n\n\n\nWarning\n\n\n\nNow is a good time to render your document again if you haven’t done so recently and commit (with a meaningful commit message) and push all updates.\n\n\n\nWe might also be interested in our observations being independent, particularly if we are to use these data for inference. To evaluate whether the independence condition is met, we will examine a map of the counties in North Carolina with the color filled based on the value of the residuals.\n\nBriefly explain why we may want to view the residuals on a map to assess independence.\nBriefly explain what pattern (if any) we would expect to observe on the map if the independence condition is satisfied.\n\nFill in the name of your model in the code below to calculate the residuals and add them to election_map_data. Then, a map with the color of each county filled in based on the value of the residual. Hint: Start with the code from Exercise 2.\nIs the independence condition satisfied? Briefly explain based on what you observe from the plot.\n\nnc_election_aug &lt;- nc_election_aug %&gt;% \n  bind_cols(fips = election_nc$fips)\n\nelection_map_data &lt;- left_join(election_map_data, nc_election_aug)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore moving on to the next part, make sure you render your document and commit (with a meaningful commit message) and push all updates.\n\n\n\n\nPart 2: Inference for the U.S.\nTo get a better understanding of the trend across the entire United States, we analyze data from a random sample of 200 counties. This data is in the election_sample data frame. Because these counties were randomly selected out of the 3,006 counties in the United States, we can reasonably treat the counties as independent observations.\n\nFit the linear model to these sample data to understand variability in the percent of in-person votes based on the percent of votes for Trump in the 2016 election. Neatly display the model output with 3 digits.\nConduct a hypothesis test for the slope using a permutation test. In your response, state the null and alternative hypotheses in words, and state the conclusion in the context of the data.\nNext, construct a 95% confidence interval for the slope using bootstrapping. Interpret the confidence interval in the context of the data.\nComment on whether the hypothesis test and confidence interval support the general consensus that Republican voters were more likely to vote in-person in the 2020 election? A brief explanation is sufficient but it should be based on your conclusions from Exercises 10 and 11.\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore submitting, make sure you render your document and commit (with a meaningful commit message) and push all updates."
  },
  {
    "objectID": "hw/hw-1.html#submission",
    "href": "hw/hw-1.html#submission",
    "title": "HW 1 - In-person voting trends",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "hw/hw-1.html#grading",
    "href": "hw/hw-1.html#grading",
    "title": "HW 1 - In-person voting trends",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 10\n45\n\n\nWorkflow & formatting\n51"
  },
  {
    "objectID": "hw/hw-1.html#footnotes",
    "href": "hw/hw-1.html#footnotes",
    "title": "HW 1 - In-person voting trends",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.↩︎"
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html",
    "href": "homework/hw_9/9.2_homepage.html",
    "title": "Homepage",
    "section": "",
    "text": "Week 8, Problem 2\nSource: https://cs50.harvard.edu/x/psets/8/homepage/"
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#background",
    "href": "homework/hw_9/9.2_homepage.html#background",
    "title": "Homepage",
    "section": "Background",
    "text": "Background\nThe internet has enabled incredible things: we can use a search engine to research anything imaginable, communicate with friends and family members around the globe, play games, take courses, and so much more. But it turns out that nearly all pages we may visit are built on three core languages, each of which serves a slightly different purpose:\n\nHTML, or HyperText Markup Language, which is used to describe the content of websites;\nCSS, Cascading Style Sheets, which is used to describe the aesthetics of websites; and\nJavaScript, which is used to make websites interactive and dynamic.\n\nCreate a simple homepage that introduces yourself, your favorite hobby or extracurricular, or anything else of interest to you."
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#getting-started",
    "href": "homework/hw_9/9.2_homepage.html#getting-started",
    "title": "Homepage",
    "section": "Getting Started",
    "text": "Getting Started\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2025/x/psets/8/homepage.zip\n\nin order to download a ZIP called homepage.zip into your codespace.\nThen execute\nunzip homepage.zip\n\nto create a folder called homepage. You no longer need the ZIP file, so you can execute\nrm homepage.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd homepage\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nhomepage/ $\n\nExecute ls by itself, and you should see a few files:\nindex.html  styles.css\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong! You can immediately start a server to view your site by running\nhttp-server\n\nin the terminal window. Then, command-click (if on Mac) or control-click (if on PC) on the first link that appears:\nhttp-server running on LINK\n\nWhere LINK is the address of your server."
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#specification",
    "href": "homework/hw_9/9.2_homepage.html#specification",
    "title": "Homepage",
    "section": "Specification",
    "text": "Specification\nImplement in your homepage directory a website that must:\n\nContain at least four different .html pages, at least one of which is index.html (the main page of your website), and it should be possible to get from any page on your website to any other page by following one or more hyperlinks.\nUse at least ten (10) distinct HTML tags besides &lt;html&gt;, &lt;head&gt;, &lt;body&gt;, and &lt;title&gt;. Using some tag (e.g., &lt;p&gt;) multiple times still counts as just one (1) of those ten!\nIntegrate one or more features from Bootstrap into your site. Bootstrap is a popular library (that comes with lots of CSS classes and more) via which you can beautify your site. See Bootstrap’s documentation to get started. In particular, you might find some of Bootstrap’s components of interest. To add Bootstrap to your site, it suffices to include\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;\n&lt;script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\nin your pages’ &lt;head&gt;, below which you can also include\n&lt;link href=\"styles.css\" rel=\"stylesheet\"&gt;\n\nto link your own CSS.\nHave at least one stylesheet file of your own creation, styles.css, which uses at least five (5) different CSS selectors (e.g. tag (example), class (.example), or ID (#example)), and within which you use a total of at least five (5) different CSS properties, such as font-size, or margin; and\nIntegrate one or more features of JavaScript into your site to make your site more interactive. For example, you can use JavaScript to add alerts, to have an effect at a recurring interval, or to add interactivity to buttons, dropdowns, or forms. Feel free to be creative!\nEnsure that your site looks nice on browsers both on mobile devices as well as laptops and desktops.\n\nYou should also create a text file, specification.txt, which lists the 10 HTML tags and 5 CSS properties you’ve used, as well as a brief (one-sentence) description of how you chose to use JavaScript and Bootstrap."
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#testing",
    "href": "homework/hw_9/9.2_homepage.html#testing",
    "title": "Homepage",
    "section": "Testing",
    "text": "Testing\nIf you want to see how your site looks while you work on it, you can run http-server. Command- or control-click on the first link presented by http-server, which should open your webpage in a new tab. You should then be able to refresh the tab containing your webpage to see your latest changes.\nRecall also that by opening Developer Tools in Google Chrome, you can simulate visiting your page on a mobile device by clicking the phone-shaped icon to the left of Elements in the developer tools window, or, once the Developer Tools tab has already been opened, by typing Ctrl+Shift+M on a PC or Cmd+Shift+M on a Mac, rather than needing to visit your site on a mobile device separately!"
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#assessment",
    "href": "homework/hw_9/9.2_homepage.html#assessment",
    "title": "Homepage",
    "section": "Assessment",
    "text": "Assessment\nNo check50 for this assignment! Instead, your site’s correctness will be assessed based on whether you meet the requirements of the specification as outlined above, and whether your HTML is well-formed and valid. To ensure that your pages are, you can use this Markup Validation Service, copying and pasting your HTML directly into the provided text box. Take care to eliminate any warnings or errors suggested by the validator before submitting!\nConsider also:\n\nwhether the aesthetics of your site are such that it is intuitive and straightforward for a user to navigate;\nwhether your CSS has been factored out into a separate CSS file(s); and\nwhether you have avoided repetition and redundancy by “cascading” style properties from parent tags.\n\nAfraid style50 does not support HTML files, and so it is incumbent upon you to indent and align your HTML tags cleanly. Know also that you can create an HTML comment with:\n&lt;!-- Comment goes here --&gt;\n\nbut commenting your HTML code is not as imperative as it is when commenting code in, say, C or Python. You can also comment your CSS, in CSS files, with:\n/* Comment goes here */"
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#hints",
    "href": "homework/hw_9/9.2_homepage.html#hints",
    "title": "Homepage",
    "section": "Hints",
    "text": "Hints\nFor fairly comprehensive guides on the languages introduced in this problem, check out these tutorials:\n\nHTML\nCSS\nJavaScript"
  },
  {
    "objectID": "homework/hw_9/9.2_homepage.html#how-to-submit",
    "href": "homework/hw_9/9.2_homepage.html#how-to-submit",
    "title": "Homepage",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/homepage"
  },
  {
    "objectID": "homework/hw_8.html",
    "href": "homework/hw_8.html",
    "title": "Problem Set 7",
    "section": "",
    "text": "Week 7 Problem Set\nSource: https://cs50.harvard.edu/x/psets/7/",
    "crumbs": [
      "Homework",
      "Homework 08 📊"
    ]
  },
  {
    "objectID": "homework/hw_8.html#what-to-do",
    "href": "homework/hw_8.html#what-to-do",
    "title": "Problem Set 7",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Songs\nSubmit Movies\nSubmit Fiftyville",
    "crumbs": [
      "Homework",
      "Homework 08 📊"
    ]
  },
  {
    "objectID": "homework/hw_8.html#when-to-do-it",
    "href": "homework/hw_8.html#when-to-do-it",
    "title": "Problem Set 7",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 08 📊"
    ]
  },
  {
    "objectID": "homework/hw_8.html#advice",
    "href": "homework/hw_8.html#advice",
    "title": "Problem Set 7",
    "section": "Advice",
    "text": "Advice\n\nHead to w3schools.com/sql for a handy reference!",
    "crumbs": [
      "Homework",
      "Homework 08 📊"
    ]
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html",
    "href": "homework/hw_8/8.2_movies.html",
    "title": "Movies",
    "section": "",
    "text": "Week 7, Problem 2\nSource: https://cs50.harvard.edu/x/psets/7/movies/"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#problem-to-solve",
    "href": "homework/hw_8/8.2_movies.html#problem-to-solve",
    "title": "Movies",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nProvided to you is a file called movies.db, a SQLite database that stores data from IMDb about movies, the people who directed and starred in them, and their ratings. Write SQL queries to answer questions about this database of movies."
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#demo",
    "href": "homework/hw_8/8.2_movies.html#demo",
    "title": "Movies",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#getting-started",
    "href": "homework/hw_8/8.2_movies.html#getting-started",
    "title": "Movies",
    "section": "Getting Started",
    "text": "Getting Started\nFor this problem, you’ll use a database provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/7/movies.zip\n\nin order to download a ZIP called movies.zip into your codespace.\nThen execute\nunzip movies.zip\n\nto create a folder called movies. You no longer need the ZIP file, so you can execute\nrm movies.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd movies\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nmovies/ $\n\nExecute ls by itself, and you should see 13 .sql files, as well as movies.db.\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#specification",
    "href": "homework/hw_8/8.2_movies.html#specification",
    "title": "Movies",
    "section": "Specification",
    "text": "Specification\nFor each of the following problems, you should write a single SQL query that outputs the results specified by each problem. Your response must take the form of a single SQL query, though you may nest other queries inside of your query. You should not assume anything about the ids of any particular movies or people: your queries should be accurate even if the id of any particular movie or person were different. Finally, each query should return only the data necessary to answer the question: if the problem only asks you to output the names of movies, for example, then your query should not also output each movie’s release year.\nYou’re welcome to check your queries’ results against IMDb itself, but realize that ratings on the website might differ from those in movies.db, as more votes might have been cast since we downloaded the data!\n\nIn 1.sql, write a SQL query to list the titles of all movies released in 2008.\n\nYour query should output a table with a single column for the title of each movie.\n\nIn 2.sql, write a SQL query to determine the birth year of Emma Stone.\n\nYour query should output a table with a single column and a single row (not counting the header) containing Emma Stone’s birth year.\nYou may assume that there is only one person in the database with the name Emma Stone.\n\nIn 3.sql, write a SQL query to list the titles of all movies with a release date on or after 2018, in alphabetical order.\n\nYour query should output a table with a single column for the title of each movie.\nMovies released in 2018 should be included, as should movies with release dates in the future.\n\nIn 4.sql, write a SQL query to determine the number of movies with an IMDb rating of 10.0.\n\nYour query should output a table with a single column and a single row (not counting the header) containing the number of movies with a 10.0 rating.\n\nIn 5.sql, write a SQL query to list the titles and release years of all Harry Potter movies, in chronological order.\n\nYour query should output a table with two columns, one for the title of each movie and one for the release year of each movie.\nYou may assume that the title of all Harry Potter movies will begin with the words “Harry Potter”, and that if a movie title begins with the words “Harry Potter”, it is a Harry Potter movie.\n\nIn 6.sql, write a SQL query to determine the average rating of all movies released in 2012.\n\nYour query should output a table with a single column and a single row (not counting the header) containing the average rating.\n\nIn 7.sql, write a SQL query to list all movies released in 2010 and their ratings, in descending order by rating. For movies with the same rating, order them alphabetically by title.\n\nYour query should output a table with two columns, one for the title of each movie and one for the rating of each movie.\nMovies that do not have ratings should not be included in the result.\n\nIn 8.sql, write a SQL query to list the names of all people who starred in Toy Story.\n\nYour query should output a table with a single column for the name of each person.\nYou may assume that there is only one movie in the database with the title Toy Story.\n\nIn 9.sql, write a SQL query to list the names of all people who starred in a movie released in 2004, ordered by birth year.\n\nYour query should output a table with a single column for the name of each person.\nPeople with the same birth year may be listed in any order.\nNo need to worry about people who have no birth year listed, so long as those who do have a birth year are listed in order.\nIf a person appeared in more than one movie in 2004, they should only appear in your results once.\n\nIn 10.sql, write a SQL query to list the names of all people who have directed a movie that received a rating of at least 9.0.\n\nYour query should output a table with a single column for the name of each person.\nIf a person directed more than one movie that received a rating of at least 9.0, they should only appear in your results once.\n\nIn 11.sql, write a SQL query to list the titles of the five highest rated movies (in order) that Chadwick Boseman starred in, starting with the highest rated.\n\nYour query should output a table with a single column for the title of each movie.\nYou may assume that there is only one person in the database with the name Chadwick Boseman.\n\nIn 12.sql, write a SQL query to list the titles of all movies in which both Bradley Cooper and Jennifer Lawrence starred.\n\nYour query should output a table with a single column for the title of each movie.\nYou may assume that there is only one person in the database with the name Bradley Cooper.\nYou may assume that there is only one person in the database with the name Jennifer Lawrence.\n\nIn 13.sql, write a SQL query to list the names of all people who starred in a movie in which Kevin Bacon also starred.\n\nYour query should output a table with a single column for the name of each person.\nThere may be multiple people named Kevin Bacon in the database. Be sure to only select the Kevin Bacon born in 1958.\nKevin Bacon himself should not be included in the resulting list."
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#hints",
    "href": "homework/hw_8/8.2_movies.html#hints",
    "title": "Movies",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nUnderstand the schema of movies.db\nWhenever you engage with a new database, it’s best to first understand its schema. In a terminal window, run sqlite3 movies.db so that you can begin executing queries on the database.\nFirst, when sqlite3 prompts you to provide a query, type .schema and press enter. This will output the CREATE TABLE statements that were used to generate each of the tables in the database. By examining those statements, you can identify the columns present in each table.\nNotice that the movies table has an id column that uniquely identifies each movie, as well as columns for the title of a movie and the year in which the movie was released. The people table also has an id column, and also has columns for each person’s name and birth year.\nMovie ratings, meanwhile, are stored in the ratings table. The first column in the table is movie_id: a foreign key that references the id of the movies table. The rest of the row contains data about the rating for each movie and the number of votes the movie has received on IMDb.\nFinally, the stars and directors tables match people to the movies in which they acted or directed. (Only principal stars and directors are included.) Each table has just two columns: movie_id and person_id, which reference a specific movie and person, respectively.\nThe challenge ahead of you is to write SQL queries to answer a variety of different questions by selecting data from one or more of these tables.\nConsistently style your queries\nSee sqlstyle.guide for pointers on good style in SQL, especially as your queries get more complex!\nList the titles of all movies released in 2008\nRecall that you can select one (or more) columns from a database using SELECT, per the example below,\nSELECT column0, column1 FROM table;\n\nwhere column0 is the title of one column, and column1 is the title of another.\nAnd recall that you can filter the rows returned in a query with the WHERE keyword, followed by a condition. You can use =, &gt;, &lt;, and other operators too.\nSELECT column FROM table\nWHERE condition;\n\nSee this SQL keywords reference for some SQL syntax that may be helpful!\nDetermine the birth year of Emma Stone\nRecall that a WHERE clause can evaluate conditions not just with numbers, but with strings.\nList the titles of all movies with a release date on or after 2018, in alphabetical order\nTry breaking this query into two steps. First, find the movies with a release date on or after 2018. Then, put those movies’ titles in alphabetical order.\nTo find the movies with a release date on or after 2018, recall that a condition in SQL supports the use of many common comparison operators, including &gt;= for “greater than or equal to.” Check to see if your query returns the correct number of movies, per How to Test.\nFinally, sort the query’s results alphabetically by title. Recall that ORDER BY can sort data by a column in your results, per the example below.\n...\nORDER BY column;\n\nDetermine the number of movies with an IMDb rating of 10.0\nNotice this question asks you not for individual movies with a rating of 10.0, but for the number of movies with such a rating. In other words, you should collect (“aggregate”) the results of your query into a single number (the number of rows). Recall that SQL supports an “aggregation function” called COUNT, which you can use on a column per the example below.\nSELECT COUNT(column)\nFROM table;\n\nList the titles and release years of all Harry Potter movies, in chronological order\nFor this query, you’ll likely want to make use of SQL’s LIKE keyword. Recall that LIKE can make use of so-called “wildcard characters”, such as %, that will match any character (or sequence thereof).\nSELECT column0, column1\nFROM table\nWHERE column1 LIKE pattern;\n\nDetermine the average rating of all movies released in 2012\nHere’s another example of a query in which you’ll need to aggregate data. Consider SQL’s AVG aggregation function, to compute an average.\nConsider, too, that this query makes use of data stored in two separate tables: ratings and movies. Recall that—so long as one table has a foreign key that matches a column in another table—you can combine two tables using SQL’s JOIN keyword. To use the JOIN keyword, you should specify the table you’d like to join and the column by which to do so.\nSELECT column0\nFROM table0\nJOIN table1 ON table0.column1 = table1.column2\n\nList all movies released in 2010 and their ratings, in descending order by rating\nRecall that ORDER BY need not always sort in ascending order. You can specify that your results be sorted in descending order by appending DESC.\n...\nORDER BY column DESC;\n\nList the names of all people who starred in Toy Story\nWhen you see a more complex query such as this one, it’s best to break it down into smaller pieces. Ultimately, your query should arrive at a list of names, per the below.\n-- Select names\nSELECT name\nFROM people\nWHERE ...\n\nBut how’s best to arrive at the names of those who starred in Toy Story? Consider that the people table alone doesn’t have this information (but the stars table might!). Indeed, the stars table combines two columns, person_id and movie_id: any person with a person_id that is associated with Toy Story’s movie_id starred in Toy Story.\n-- Select names\nSELECT name\nFROM people\nWHERE ...\n\n-- Select person IDs\nSELECT person_id\nFROM stars\nWHERE movie_id = ...\n\nA natural next step, then, is to find Toy Story’s movie ID.\n-- Select names\nSELECT name\nFROM people\nWHERE ...\n\n-- Select person IDs\nSELECT person_id\nFROM stars\nWHERE movie_id = ...\n\n-- Find Toy Story's ID\nSELECT id\nFROM movies\nWHERE title = 'Toy Story';\n\nOf course, you’ve presently written three separate queries. But notice that some queries (the first two) would be complete by including results of the query directly below them. The process of making a query that depends on the results of a “subquery” is called “nesting” queries. It’s quite the hint, but here’s one way to nest the above queries!\n-- Select names\nSELECT name\nFROM people\nWHERE id IN\n(\n    -- Select person IDs\n    SELECT person_id\n    FROM stars\n    WHERE movie_id = (\n\n        -- Select Toy Story's ID\n        SELECT id\n        FROM movies\n        WHERE title = 'Toy Story'\n    )\n);\n\nList the names of all people who starred in a movie released in 2004, ordered by birth year\nNotice that this query, like the previous, requires you to use data from multiple tables. Recall that you can “nest” queries in SQL, which allows you to break a larger query into smaller ones. Perhaps you could write queries to…\n\nFind the IDs of movies released in 2004\nFind the IDs of people who starred in those movies\nFind the names of people with those people IDs\n\nThen, try nesting those queries to arrive at a single query that returns all people who starred in a movie released in 2004. Consider how you might then order the results of your query.\nList the names of all people who have directed a movie that received a rating of at least 9.0\nNotice that this query, like the previous, requires you to use data from multiple tables. Recall that you can “nest” queries in SQL, which allows you to break a larger query into smaller ones. Perhaps you could write queries to…\n\nFind the IDs of movies with at least a 9.0 rating\nFind the IDs of people who directed those movies\nFind the names of people with those people IDs\n\nThen, try nesting those queries to arrive at a single query that returns the names of all people who have directed a movie that received a rating of at least 9.0.\nList the titles of the five highest rated movies (in order) that Chadwick Boseman starred in, starting with the highest rated\nNotice that this query, like the previous, requires you to use data from multiple tables. Recall that you can “nest” queries in SQL, which allows you to break a larger query into smaller ones. Perhaps you could write queries to…\n\nFind the ID of Chadwick Boseman\nFind the IDs of movies associated with Chadwick Boseman’s ID\nFind the movie titles with those movie IDs\n\nThen, try nesting those queries to arrive at a single query that returns the titles of Chadwick Boseman’s movies.\nFrom there, you’ll need to determine the ratings of those titles and sort those titles by rating, in descending order. Consider how you could combine a relevant table (likely ratings!) and order the results by a relevant column.\nFinally, read up on SQL’s LIMIT keyword, which will return the top (n) rows in a query.\nList the titles of all movies in which both Bradley Cooper and Jennifer Lawrence starred\nNotice that this query, like the previous, requires you to use data from multiple tables. Recall that you can “nest” queries in SQL, which allows you to break a larger query into smaller ones. Perhaps you could write queries to…\n\nFind the ID of Bradley Cooper\nFind the ID of Jennifer Lawrence\nFind the IDs of movies associated with Bradley Cooper’s ID\nFind the IDs of movies associated with Jennifer Lawrence’s ID\nFind movie titles from the movie IDs associated with both Bradley Cooper and Jennifer Lawrence\n\nThen, try nesting those queries to arrive at a single query that returns the movies in which both Bradley Cooper and Jennifer Lawrence starred.\nRecall that you can build compound conditions in SQL using AND or OR.\nList the names of all people who starred in a movie in which Kevin Bacon also starred\nNotice that this query, like the previous, requires you to use data from multiple tables. Recall that you can “nest” queries in SQL, which allows you to break a larger query into smaller ones. Perhaps you could write queries to…\n\nFind the ID of Kevin Bacon (the one born in 1958!)\nFind the IDs of movies associated with Kevin Bacon’s ID\nFind the IDs of people associated with those movie IDs\nFind the names of people with those people IDs\n\nThen, try nesting those queries to arrive at a single query that returns the names of all people who starred in a movie in which Kevin Bacon also starred. Keep in mind that you’ll want to exclude Kevin Bacon himself from the results!"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#walkthrough",
    "href": "homework/hw_8/8.2_movies.html#walkthrough",
    "title": "Movies",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#usage",
    "href": "homework/hw_8/8.2_movies.html#usage",
    "title": "Movies",
    "section": "Usage",
    "text": "Usage\nTo test your queries in VS Code, you can query the database by running\n$ cat filename.sql | sqlite3 movies.db\n\nwhere filename.sql is the file containing your SQL query.\nYou can also run\n$ cat filename.sql | sqlite3 movies.db &gt; output.txt\n\nto redirect the output of the query to a text file called output.txt. (This can be useful for checking how many rows are returned by your query!)"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#how-to-test",
    "href": "homework/hw_8/8.2_movies.html#how-to-test",
    "title": "Movies",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to instead test your code on your own for each of the following. You can run sqlite3 movies.db to run additional queries on the database to ensure that your result is correct.\nIf you’re using the movies.db database provided in this problem set’s distribution, you should find that\n\nExecuting 1.sql results in a table with 1 column and 10,494 rows.\nExecuting 2.sql results in a table with 1 column and 1 row.\nExecuting 3.sql results in a table with 1 column and 130,992 rows.\nExecuting 4.sql results in a table with 1 column and 1 row.\nExecuting 5.sql results in a table with 2 columns and 14 rows.\nExecuting 6.sql results in a table with 1 column and 1 row.\nExecuting 7.sql results in a table with 2 columns and 7,295 rows.\nExecuting 8.sql results in a table with 1 column and 10 rows.\nExecuting 9.sql results in a table with 1 column and 35,612 rows.\nExecuting 10.sql results in a table with 1 column and 4,726 rows.\nExecuting 11.sql results in a table with 1 column and 5 rows.\nExecuting 12.sql results in a table with 1 column and 4 rows.\nExecuting 13.sql results in a table with 1 column and 553 rows.\n\nNote that row counts do not include header rows that only show column names.\nIf your query returns a number of rows that is slightly different from the expected output, be sure that you’re properly handling duplicates! For queries that ask for a list of names, no one person should be listed twice, but two different people who have the same name should each be listed.\n\nCorrectness\ncheck50 cs50/problems/2025/x/movies"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#how-to-submit",
    "href": "homework/hw_8/8.2_movies.html#how-to-submit",
    "title": "Movies",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/movies"
  },
  {
    "objectID": "homework/hw_8/8.2_movies.html#acknowledgements",
    "href": "homework/hw_8/8.2_movies.html#acknowledgements",
    "title": "Movies",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nInformation courtesy of IMDb (imdb.com). Used with permission."
  },
  {
    "objectID": "homework/hw_7.html",
    "href": "homework/hw_7.html",
    "title": "Problem Set 6",
    "section": "",
    "text": "Week 6 Problem Set\nSource: https://cs50.harvard.edu/x/psets/6/",
    "crumbs": [
      "Homework",
      "Homework 07 🐍"
    ]
  },
  {
    "objectID": "homework/hw_7.html#what-to-do",
    "href": "homework/hw_7.html#what-to-do",
    "title": "Problem Set 6",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date.\nSubmit Hello in Python\nSubmit one of:\n\nthis version of Mario in Python, if feeling less comfortable\nthis version of Mario in Python, if feeling more comfortable\n\nSubmit one of:\n\nCash in Python, if feeling less comfortable\nCredit in Python, if feeling more comfortable\n\nSubmit Readability in Python\nSubmit DNA in Python\n\nIf you submit both versions of Mario, we’ll record the higher of your two scores. If you submit both Cash and Credit, we’ll record the higher of your two scores.",
    "crumbs": [
      "Homework",
      "Homework 07 🐍"
    ]
  },
  {
    "objectID": "homework/hw_7.html#when-to-do-it",
    "href": "homework/hw_7.html#when-to-do-it",
    "title": "Problem Set 6",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 07 🐍"
    ]
  },
  {
    "objectID": "homework/hw_7.html#advice",
    "href": "homework/hw_7.html#advice",
    "title": "Problem Set 6",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from Week 6.",
    "crumbs": [
      "Homework",
      "Homework 07 🐍"
    ]
  },
  {
    "objectID": "homework/hw_7.html#academic-honesty",
    "href": "homework/hw_7.html#academic-honesty",
    "title": "Problem Set 6",
    "section": "Academic Honesty",
    "text": "Academic Honesty\n\nFor Hello, Mario, Cash, Credit, and Readability, it is reasonable to look at your own implementations thereof in C and others’ implementations thereof in C.\nIt is not reasonable to look at others’ implementations of the same in Python.\nInsofar as a goal of these problems is to teach you how to teach yourself a new language, keep in mind that these acts are not only reasonable, per the syllabus, but encouraged toward that end:\n\nIncorporating a few lines of code that you find online or elsewhere into your own code, provided that those lines are not themselves solutions to assigned problems and that you cite the lines’ origins.\nTurning to the web or elsewhere for instruction beyond the course’s own, for references, and for solutions to technical difficulties, but not for outright solutions to problem set’s problems or your own final project.",
    "crumbs": [
      "Homework",
      "Homework 07 🐍"
    ]
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html",
    "href": "homework/hw_7/7.6_readability.html",
    "title": "Readability",
    "section": "",
    "text": "Week 6, Problem 6\nSource: https://cs50.harvard.edu/x/psets/6/readability/"
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html#problem-to-solve",
    "href": "homework/hw_7/7.6_readability.html#problem-to-solve",
    "title": "Readability",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nWrite, in a file called readability.py in a folder called sentimental-readability, a program that first asks the user to type in some text, and then outputs the grade level for the text, according to the Coleman-Liau formula, exactly as you did in Problem Set 2, except that your program this time should be written in Python."
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html#demo",
    "href": "homework/hw_7/7.6_readability.html#demo",
    "title": "Readability",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html#specification",
    "href": "homework/hw_7/7.6_readability.html#specification",
    "title": "Readability",
    "section": "Specification",
    "text": "Specification\n\nRecall that the Coleman-Liau index is computed as 0.0588 * L - 0.296 * S - 15.8, where L is the average number of letters per 100 words in the text, and S is the average number of sentences per 100 words in the text.\nUse get_string from the CS50 Library to get the user’s input, and print to output your answer.\nYour program should count the number of letters, words, and sentences in the text. You may assume that a letter is any lowercase character from a to z or any uppercase character from A to Z, any sequence of characters separated by spaces should count as a word, and that any occurrence of a period, exclamation point, or question mark indicates the end of a sentence.\nYour program should print as output \"Grade X\" where X is the grade level computed by the Coleman-Liau formula, rounded to the nearest integer.\nIf the resulting index number is 16 or higher (equivalent to or greater than a senior undergraduate reading level), your program should output \"Grade 16+\" instead of giving the exact index number. If the index number is less than 1, your program should output \"Before Grade 1\"."
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html#how-to-test",
    "href": "homework/hw_7/7.6_readability.html#how-to-test",
    "title": "Readability",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python readability.py, and wait for a prompt for input. Type in One fish. Two fish. Red fish. Blue fish. and press enter. Your program should output Before Grade 1.\nRun your program as python readability.py, and wait for a prompt for input. Type in Would you like them here or there? I would not like them here or there. I would not like them anywhere. and press enter. Your program should output Grade 2.\nRun your program as python readability.py, and wait for a prompt for input. Type in Congratulations! Today is your day. You're off to Great Places! You're off and away! and press enter. Your program should output Grade 3.\nRun your program as python readability.py, and wait for a prompt for input. Type in Harry Potter was a highly unusual boy in many ways. For one thing, he hated the summer holidays more than any other time of year. For another, he really wanted to do his homework, but was forced to do it in secret, in the dead of the night. And he also happened to be a wizard. and press enter. Your program should output Grade 5.\nRun your program as python readability.py, and wait for a prompt for input. Type in In my younger and more vulnerable years my father gave me some advice that I've been turning over in my mind ever since. and press enter. Your program should output Grade 7.\nRun your program as python readability.py, and wait for a prompt for input. Type in Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, \"and what is the use of a book,\" thought Alice \"without pictures or conversation?\" and press enter. Your program should output Grade 8.\nRun your program as python readability.py, and wait for a prompt for input. Type in When he was nearly thirteen, my brother Jem got his arm badly broken at the elbow. When it healed, and Jem's fears of never being able to play football were assuaged, he was seldom self-conscious about his injury. His left arm was somewhat shorter than his right; when he stood or walked, the back of his hand was at right angles to his body, his thumb parallel to his thigh. and press enter. Your program should output Grade 8.\nRun your program as python readability.py, and wait for a prompt for input. Type in There are more things in Heaven and Earth, Horatio, than are dreamt of in your philosophy. and press enter. Your program should output Grade 9.\nRun your program as python readability.py, and wait for a prompt for input. Type in It was a bright cold day in April, and the clocks were striking thirteen. Winston Smith, his chin nuzzled into his breast in an effort to escape the vile wind, slipped quickly through the glass doors of Victory Mansions, though not quickly enough to prevent a swirl of gritty dust from entering along with him. and press enter. Your program should output Grade 10.\nRun your program as python readability.py, and wait for a prompt for input. Type in A large class of computational problems involve the determination of properties of graphs, digraphs, integers, arrays of integers, finite families of finite sets, boolean formulas and elements of other countable domains. and press enter. Your program should output Grade 16+.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/readability\n\n\n\nStyle\nstyle50 readability.py"
  },
  {
    "objectID": "homework/hw_7/7.6_readability.html#how-to-submit",
    "href": "homework/hw_7/7.6_readability.html#how-to-submit",
    "title": "Readability",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/readability"
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html",
    "href": "homework/hw_7/7.4_cash.html",
    "title": "Cash",
    "section": "",
    "text": "Week 6, Problem 4\nSource: https://cs50.harvard.edu/x/psets/6/cash/"
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html#problem-to-solve",
    "href": "homework/hw_7/7.4_cash.html#problem-to-solve",
    "title": "Cash",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a file called cash.py in a folder called sentimental-cash, write a program that asks the user how much change is owed and then spits out the minimum number of coins with which said change can be made. You can do this exactly as you did in Problem Set 1, except that your program this time should be written in Python, and you should assume that the user will input their change in dollars (e.g., 0.50 dollars instead of 50 cents)."
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html#demo",
    "href": "homework/hw_7/7.4_cash.html#demo",
    "title": "Cash",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html#specification",
    "href": "homework/hw_7/7.4_cash.html#specification",
    "title": "Cash",
    "section": "Specification",
    "text": "Specification\n\nUse get_float from the CS50 Library to get the user’s input and print to output your answer. Assume that the only coins available are quarters (25¢), dimes (10¢), nickels (5¢), and pennies (1¢).\n\nWe ask that you use get_float so that you can handle dollars and cents, albeit sans dollar sign. In other words, if some customer is owed $9.75 (as in the case where a newspaper costs 25¢ but the customer pays with a $10 bill), assume that your program’s input will be 9.75 and not $9.75 or 975. However, if some customer is owed $9 exactly, assume that your program’s input will be 9.00 or just 9 but, again, not $9 or 900. Of course, by nature of floating-point values, your program will likely work with inputs like 9.0 and 9.000 as well; you need not worry about checking whether the user’s input is “formatted” like money should be.\n\nIf the user fails to provide a non-negative value, your program should re-prompt the user for a valid amount again and again until the user complies.\nIncidentally, so that we can automate some tests of your code, we ask that your program’s last line of output be only the minimum number of coins possible: an integer followed by a newline."
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html#how-to-test",
    "href": "homework/hw_7/7.4_cash.html#how-to-test",
    "title": "Cash",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python cash.py, and wait for a prompt for input. Type in 0.41 and press enter. Your program should output 4.\nRun your program as python cash.py, and wait for a prompt for input. Type in 0.01 and press enter. Your program should output 1.\nRun your program as python cash.py, and wait for a prompt for input. Type in 0.15 and press enter. Your program should output 2.\nRun your program as python cash.py, and wait for a prompt for input. Type in 1.60 and press enter. Your program should output 7.\nRun your program as python cash.py, and wait for a prompt for input. Type in 23 and press enter. Your program should output 92.\nRun your program as python cash.py, and wait for a prompt for input. Type in 4.2 and press enter. Your program should output 18.\nRun your program as python cash.py, and wait for a prompt for input. Type in -1 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python cash.py, and wait for a prompt for input. Type in foo and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python cash.py, and wait for a prompt for input. Do not type anything, and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/cash\n\n\n\nStyle\nstyle50 cash.py"
  },
  {
    "objectID": "homework/hw_7/7.4_cash.html#how-to-submit",
    "href": "homework/hw_7/7.4_cash.html#how-to-submit",
    "title": "Cash",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/cash"
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html",
    "href": "homework/hw_7/7.2_this_version_of_mario.html",
    "title": "this version of Mario",
    "section": "",
    "text": "Week 6, Problem 2\nSource: https://cs50.harvard.edu/x/psets/6/mario/less/"
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html#problem-to-solve",
    "href": "homework/hw_7/7.2_this_version_of_mario.html#problem-to-solve",
    "title": "this version of Mario",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a file called mario.py in a folder called sentimental-mario-less, write a program that recreates a half-pyramid using hashes (#) for blocks, exactly as you did in Problem Set 1. Your program this time should be written in Python!"
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html#demo",
    "href": "homework/hw_7/7.2_this_version_of_mario.html#demo",
    "title": "this version of Mario",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html#specification",
    "href": "homework/hw_7/7.2_this_version_of_mario.html#specification",
    "title": "this version of Mario",
    "section": "Specification",
    "text": "Specification\n\nTo make things more interesting, first prompt the user with get_int for the half-pyramid’s height, a positive integer between 1 and 8, inclusive.\nIf the user fails to provide a positive integer no greater than 8, you should re-prompt for the same again.\nThen, generate (with the help of print and one or more loops) the desired half-pyramid.\nTake care to align the bottom-left corner of your half-pyramid with the left-hand edge of your terminal window."
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html#how-to-test",
    "href": "homework/hw_7/7.2_this_version_of_mario.html#how-to-test",
    "title": "this version of Mario",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python mario.py and wait for a prompt for input. Type in -1 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Type in 0 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Type in 1 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n#\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 2 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n #\n##\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 8 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n       #\n      ##\n     ###\n    ####\n   #####\n  ######\n #######\n########\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 9 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number. Then, type in 2 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n #\n##\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in foo and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Do not type anything, and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/mario/less\n\n\n\nStyle\nstyle50 mario.py"
  },
  {
    "objectID": "homework/hw_7/7.2_this_version_of_mario.html#how-to-submit",
    "href": "homework/hw_7/7.2_this_version_of_mario.html#how-to-submit",
    "title": "this version of Mario",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/mario/less"
  },
  {
    "objectID": "homework/hw_6.html",
    "href": "homework/hw_6.html",
    "title": "Problem Set 5",
    "section": "",
    "text": "Week 5 Problem Set\nSource: https://cs50.harvard.edu/x/psets/5/",
    "crumbs": [
      "Homework",
      "Homework 06 🟢"
    ]
  },
  {
    "objectID": "homework/hw_6.html#what-to-do",
    "href": "homework/hw_6.html#what-to-do",
    "title": "Problem Set 5",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Inheritance\nSubmit Speller",
    "crumbs": [
      "Homework",
      "Homework 06 🟢"
    ]
  },
  {
    "objectID": "homework/hw_6.html#when-to-do-it",
    "href": "homework/hw_6.html#when-to-do-it",
    "title": "Problem Set 5",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 06 🟢"
    ]
  },
  {
    "objectID": "homework/hw_6.html#advice",
    "href": "homework/hw_6.html#advice",
    "title": "Problem Set 5",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from Week 5.\nIf you see any errors when compiling your code with make, focus first on fixing the very first error you see, scrolling up as needed. If unsure what it means, try asking help50 for help. For instance, if trying to compile speller, and\nmake speller\n\nis yielding errors, try running\nhelp50 make speller\n\ninstead!",
    "crumbs": [
      "Homework",
      "Homework 06 🟢"
    ]
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html",
    "href": "homework/hw_6/6.1_inheritance.html",
    "title": "Inheritance",
    "section": "",
    "text": "Week 5, Problem 1\nSource: https://cs50.harvard.edu/x/psets/5/inheritance/"
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#problem-to-solve",
    "href": "homework/hw_6/6.1_inheritance.html#problem-to-solve",
    "title": "Inheritance",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nA person’s blood type is determined by two alleles (i.e., different forms of a gene). The three possible alleles are A, B, and O, of which each person has two (possibly the same, possibly different). Each of a child’s parents randomly passes one of their two blood type alleles to their child. The possible blood type combinations, then, are: OO, OA, OB, AO, AA, AB, BO, BA, and BB.\nFor example, if one parent has blood type AO and the other parent has blood type BB, then the child’s possible blood types would be AB and OB, depending on which allele is received from each parent. Similarly, if one parent has blood type AO and the other OB, then the child’s possible blood types would be AO, OB, AB, and OO.\nIn a file called inheritance.c in a folder called inheritance, simulate the inheritance of blood types for each member of a family."
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#demo",
    "href": "homework/hw_6/6.1_inheritance.html#demo",
    "title": "Inheritance",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#distribution-code",
    "href": "homework/hw_6/6.1_inheritance.html#distribution-code",
    "title": "Inheritance",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/5/inheritance.zip\n\nin order to download a ZIP called inheritance.zip into your codespace.\nThen execute\nunzip inheritance.zip\n\nto create a folder called inheritance. You no longer need the ZIP file, so you can execute\nrm inheritance.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd inheritance\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\ninheritance/ $\n\nExecute ls by itself, and you should see and see a file named inheritance.c.\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#implementation-details",
    "href": "homework/hw_6/6.1_inheritance.html#implementation-details",
    "title": "Inheritance",
    "section": "Implementation Details",
    "text": "Implementation Details\nComplete the implementation of inheritance.c, such that it creates a family of a specified generation size and assigns blood type alleles to each family member. The oldest generation will have alleles assigned randomly to them.\n\nThe create_family function takes an integer (generations) as input and should allocate (as via malloc) one person for each member of the family of that number of generations, returning a pointer to the person in the youngest generation.\n\nFor example, create_family(3) should return a pointer to a person with two parents, where each parent also has two parents.\nEach person should have alleles assigned to them. The oldest generation should have alleles randomly chosen (as by calling the random_allele function), and younger generations should inherit one allele (chosen at random) from each parent.\nEach person should have parents assigned to them. The oldest generation should have both parents set to NULL, and younger generations should have parents be an array of two pointers, each pointing to a different parent."
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#hints",
    "href": "homework/hw_6/6.1_inheritance.html#hints",
    "title": "Inheritance",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nUnderstand the code in inheritance.c\nTake a look at the distribution code in inheritance.c.\nNotice the definition of a type called person. Each person has an array of two parents, each of which is a pointer to another person struct. Each person also has an array of two alleles, each of which is a char (either 'A', 'B', or 'O').\n// Each person has two parents and two alleles\ntypedef struct person\n{\n    struct person *parents[2];\n    char alleles[2];\n}\nperson;\n\nNow, take a look at the main function. The function begins by “seeding” (i.e., providing some initial input to) a random number generator, which we’ll use later to generate random alleles.\n// Seed random number generator\nsrandom(time(0));\n\nThe main function then calls the create_family function to simulate the creation of person structs for a family of 3 generations (i.e. a person, their parents, and their grandparents).\n// Create a new family with three generations\nperson *p = create_family(GENERATIONS);\n\nWe then call print_family to print out each of those family members and their blood types.\n// Print family tree of blood types\nprint_family(p, 0);\n\nFinally, the function calls free_family to free any memory that was previously allocated with malloc.\n// Free memory\nfree_family(p);\n\nThe create_family and free_family functions are left to you to write!\nComplete the create_family function\nThe create_family function should return a pointer to a person who has inherited their blood type from the number of generations given as input.\n\nNotice first that this problem poses a good opportunity for recursion.\n\nTo determine the present person’s blood type, you need to first determine their parents’ blood types.\nTo determine those parents’ blood types, you must first determine their parents’ blood types. And so on until you reach the last generation you wish to simulate.\n\n\nTo solve this problem, you’ll find several TODOs in the distribution code.\nFirst, you should allocate memory for a new person. Recall that you can use malloc to allocate memory, and sizeof(person) to get the number of bytes to allocate.\n// Allocate memory for new person\nperson *new_person = malloc(sizeof(person));\n\nNext, you should check if there are still generations left to create: that is, whether generations &gt; 1.\nIf generations &gt; 1, then there are more generations that still need to be allocated. We’ve already created two new parents, parent0 and parent1, by recursively calling create_family. Your create_family function should then set the parent pointers of the new person you created. Finally, assign both alleles for the new person by randomly choosing one allele from each parent.\n\nRemember, to access a variable via a pointer, you can use arrow notation. For example, if p is a pointer to a person, then a pointer to this person’s first parent can be accessed by p-&gt;parents[0].\nYou might find the random() function useful for randomly assigning alleles. This function returns an integer between 0 and RAND_MAX, or 32767. In particular, to generate a pseudorandom number that is either 0 or 1, you can use the expression random() % 2.\n\n// Create two new parents for current person by recursively calling create_family\nperson *parent0 = create_family(generations - 1);\nperson *parent1 = create_family(generations - 1);\n\n// Set parent pointers for current person\nnew_person-&gt;parents[0] = parent0;\nnew_person-&gt;parents[1] = parent1;\n\n// Randomly assign current person's alleles based on the alleles of their parents\nnew_person-&gt;alleles[0] = parent0-&gt;alleles[random() % 2];\nnew_person-&gt;alleles[1] = parent1-&gt;alleles[random() % 2];\n\nLet’s say there are no more generations left to simulate. That is, generations == 1. If so, there will be no parent data for this person. Both parents of your new person should be set to NULL, and each allele should be generated randomly.\n// Set parent pointers to NULL\nnew_person-&gt;parents[0] = NULL;\nnew_person-&gt;parents[1] = NULL;\n\n// Randomly assign alleles\nnew_person-&gt;alleles[0] = random_allele();\nnew_person-&gt;alleles[1] = random_allele();\n\nFinally, your function should return a pointer for the person that was allocated.\n// Return newly created person\nreturn new_person;\n\nComplete the free_family function\nThe free_family function should accept as input a pointer to a person, free memory for that person, and then recursively free memory for all of their ancestors.\n\nSince this is a recursive function, you should first handle the base case. If the input to the function is NULL, then there’s nothing to free, so your function can return immediately.\nOtherwise, you should recursively free both of the person’s parents before freeing the child.\n\nThe below is quite the hint, but here’s how to do just that!\n// Free `p` and all ancestors of `p`.\nvoid free_family(person *p)\n{\n    // Handle base case\n    if (p == NULL)\n    {\n        return;\n    }\n\n    // Free parents recursively\n    free_family(p-&gt;parents[0]);\n    free_family(p-&gt;parents[1]);\n\n    // Free child\n    free(p);\n}\n\n\nWalkthrough\nNot sure how to solve?"
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#how-to-test",
    "href": "homework/hw_6/6.1_inheritance.html#how-to-test",
    "title": "Inheritance",
    "section": "How to Test",
    "text": "How to Test\nUpon running ./inheritance, your program should adhere to the rules described in the background. The child should have two alleles, one from each parent. The parents should each have two alleles, one from each of their parents.\nFor example, in the example below, the child in Generation 0 received an O allele from both Generation 1 parents. The first parent received an A from the first grandparent and a O from the second grandparent. Similarly, the second parent received an O and a B from their grandparents.\n$ ./inheritance\nChild (Generation 0): blood type OO\n    Parent (Generation 1): blood type AO\n        Grandparent (Generation 2): blood type OA\n        Grandparent (Generation 2): blood type BO\n    Parent (Generation 1): blood type OB\n        Grandparent (Generation 2): blood type AO\n        Grandparent (Generation 2): blood type BO\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/inheritance\n\n\n\nStyle\nstyle50 inheritance.c"
  },
  {
    "objectID": "homework/hw_6/6.1_inheritance.html#how-to-submit",
    "href": "homework/hw_6/6.1_inheritance.html#how-to-submit",
    "title": "Inheritance",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/inheritance"
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html",
    "href": "homework/hw_5/5.4_recover.html",
    "title": "Recover",
    "section": "",
    "text": "Week 4, Problem 4\nSource: https://cs50.harvard.edu/x/psets/4/recover/"
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#problem-to-solve",
    "href": "homework/hw_5/5.4_recover.html#problem-to-solve",
    "title": "Recover",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn anticipation of this problem, we spent the past several days taking photos around campus, all of which were saved on a digital camera as JPEGs on a memory card. Unfortunately, we somehow deleted them all! Thankfully, in the computer world, “deleted” tends not to mean “deleted” so much as “forgotten.” Even though the camera insists that the card is now blank, we’re pretty sure that’s not quite true. Indeed, we’re hoping (er, expecting!) you can write a program that recovers the photos for us!\nIn a file called recover.c in a folder called recover, write a program to recover JPEGs from a memory card."
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#distribution-code",
    "href": "homework/hw_5/5.4_recover.html#distribution-code",
    "title": "Recover",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2025/x/psets/4/recover.zip\n\nin order to download a ZIP called recover.zip into your codespace.\nThen execute\nunzip recover.zip\n\nto create a folder called recover. You no longer need the ZIP file, so you can execute\nrm recover.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd recover\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nrecover/ $\n\nExecute ls by itself, and you should see two files: recover.c and card.raw."
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#background",
    "href": "homework/hw_5/5.4_recover.html#background",
    "title": "Recover",
    "section": "Background",
    "text": "Background\nEven though JPEGs are more complicated than BMPs, JPEGs have “signatures,” patterns of bytes that can distinguish them from other file formats. Specifically, the first three bytes of JPEGs are\n0xff 0xd8 0xff\n\nfrom first byte to third byte, left to right. The fourth byte, meanwhile, is either 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, or 0xef. Put another way, the fourth byte’s first four bits are 1110.\nOdds are, if you find this pattern of four bytes on media known to store photos (e.g., my memory card), they demarcate the start of a JPEG. To be fair, you might encounter these patterns on some disk purely by chance, so data recovery isn’t an exact science.\nFortunately, digital cameras tend to store photographs contiguously on memory cards, whereby each photo is stored immediately after the previously taken photo. Accordingly, the start of a JPEG usually demarks the end of another. However, digital cameras often initialize cards with a FAT file system whose “block size” is 512 bytes (B). The implication is that these cameras only write to those cards in units of 512 B. A photo that’s 1 MB (i.e., 1,048,576 B) thus takes up 1048576 ÷ 512 = 2048 “blocks” on a memory card. But so does a photo that’s, say, one byte smaller (i.e., 1,048,575 B)! The wasted space on disk is called “slack space.” Forensic investigators often look at slack space for remnants of suspicious data.\nThe implication of all these details is that you, the investigator, can probably write a program that iterates over a copy of my memory card, looking for JPEGs’ signatures. Each time you find a signature, you can open a new file for writing and start filling that file with bytes from my memory card, closing that file only once you encounter another signature. Moreover, rather than read my memory card’s bytes one at a time, you can read 512 of them at a time into a buffer for efficiency’s sake. Thanks to FAT, you can trust that JPEGs’ signatures will be “block-aligned.” That is, you need only look for those signatures in a block’s first four bytes.\nRealize, of course, that JPEGs can span contiguous blocks. Otherwise, no JPEG could be larger than 512 B. But the last byte of a JPEG might not fall at the very end of a block. Recall the possibility of slack space. But not to worry. Because this memory card was brand-new when I started snapping photos, odds are it’d been “zeroed” (i.e., filled with 0s) by the manufacturer, in which case any slack space will be filled with 0s. It’s okay if those trailing 0s end up in the JPEGs you recover; they should still be viewable.\nNow, I only have one memory card, but there are a lot of you! And so I’ve gone ahead and created a “forensic image” of the card, storing its contents, byte after byte, in a file called card.raw. So that you don’t waste time iterating over millions of 0s unnecessarily, I’ve only imaged the first few megabytes of the memory card. But you should ultimately find that the image contains 50 JPEGs."
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#specification",
    "href": "homework/hw_5/5.4_recover.html#specification",
    "title": "Recover",
    "section": "Specification",
    "text": "Specification\nImplement a program called recover that recovers JPEGs from a forensic image.\n\nImplement your program in a file called recover.c in a directory called recover.\nYour program should accept exactly one command-line argument, the name of a forensic image from which to recover JPEGs.\nIf your program is not executed with exactly one command-line argument, it should remind the user of correct usage, and main should return 1.\nIf the forensic image cannot be opened for reading, your program should inform the user as much, and main should return 1.\nThe files you generate should each be named ###.jpg, where ### is a three-digit decimal number, starting with 000 for the first image and counting up.\nYour program, if it uses malloc, must not leak any memory."
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#hints",
    "href": "homework/hw_5/5.4_recover.html#hints",
    "title": "Recover",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nWrite some pseudocode before writing more code\nIf unsure how to solve the larger problem, break it down into smaller problems that you can probably solve first. For instance, this problem is really only a handful of problems:\n\nAccept a single command-line argument: the name of a memory card\nOpen the memory card\nWhile there’s still data left to read in the memory card\n\nCreate JPEGs from the data\n\n\nLet’s write some pseudcode as comments to remind you to do just that:\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\n    // Accept a single command-line argument\n\n    // Open the memory card\n\n    // While there's still data left to read from the memory card\n\n        // Create JPEGs from the data\n}\n\nConvert the pseudocode to code\nFirst, consider how to accept a single command-line argument. If the user misuses the program, you should tell them the program’s proper usage.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\n    // Accept a single command-line argument\n    if (argc != 2)\n    {\n        printf(\"Usage: ./recover FILE\\n\");\n        return 1;\n    }\n\n    // Open the memory card\n\n    // While there's still data left to read from the memory card\n\n        // Create JPEGs from the data\n}\n\nNow that you’ve checked for proper usage, you can open the memory card. Keep in mind that you can open card.raw programmatically with fopen, as with the below.\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\n    // Accept a single command-line argument\n    if (argc != 2)\n    {\n        printf(\"Usage: ./recover FILE\\n\");\n        return 1;\n    }\n\n    // Open the memory card\n    FILE *card = fopen(argv[1], \"r\");\n\n    // While there's still data left to read from the memory card\n\n        // Create JPEGs from the data\n}\n\nYou should, of course, check to be sure the file was opened properly! If it wasn’t, tell the user and exit the program: we’ll leave this part up to you.\nNext, your program should read the data from the card you’ve opened, until there is no longer any data to read. Along the way, your program should recover every one of the JPEGs from card.raw, storing each as a separate file in your current working directory.\nFirst consider how to read card.raw all the way through. Recall that, to read data from a file, you need to temporarily store that data in a “buffer.” And recall further that card.raw stores data in blocks of 512 bytes. As such, you’ll likely want to create a buffer of 512 bytes to store blocks of data as you read them sequentially. One way of doing so is to use the uint8_t type from stdint.h, which stores exactly 8 bits (1 byte). The type is called uint8_t since it stores an unsigned/positive/non-negative integer that requires 8 bits of space (i.e., one byte).\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\n    // Accept a single command-line argument\n    if (argc != 2)\n    {\n        printf(\"Usage: ./recover FILE\\n\");\n        return 1;\n    }\n\n    // Open the memory card\n    FILE *card = fopen(argv[1], \"r\");\n\n    // Create a buffer for a block of data\n    uint8_t buffer[512];\n\n    // While there's still data left to read from the memory card\n\n        // Create JPEGs from the data\n}\n\nIt’s probably not the best idea, though, to use 512 as a “magic number” here. Odds are you could improve this design further!\nNow, consider how to read data from the memory card. Per its manual page, fread returns the number of bytes that it has read, in which case it should either return 512 or 0, given that card.raw contains some number of 512-byte blocks. In order to read every block from card.raw, after opening it with fopen, it should suffice to use a loop like this.\n#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[])\n{\n    // Accept a single command-line argument\n    if (argc != 2)\n    {\n        printf(\"Usage: ./recover FILE\\n\");\n        return 1;\n    }\n\n    // Open the memory card\n    FILE *card = fopen(argv[1], \"r\");\n\n    // Create a buffer for a block of data\n    uint8_t buffer[512];\n\n    // While there's still data left to read from the memory card\n    while (fread(buffer, 1, 512, card) == 512)\n    {\n        // Create JPEGs from the data\n\n    }\n}\n\nThat way, as soon as fread returns 0 (which is effectively false), your loop will end.\nFinally, it’s up to you to determine how to programmatically create JPEGs as you continue to read from card.raw. For this, you might find the below walkthrough of use to you.\nKeep in mind your program should number the files it outputs by naming each ###.jpg, where ### is three-digit decimal number from 000 on up. Befriend sprintf and note that sprintf stores a formatted string at a location in memory. Given the prescribed ###.jpg format for a JPEG’s filename, how many bytes should you allocate for that string? (Don’t forget the NUL character!)\nTo check whether the JPEGs your program spit out are correct, simply double-click and take a look! If each photo appears intact, your operation was likely a success!\nAnd of course, remember to fclose every file you’ve opened with fopen!\nKeep your working directory clean\nOdds are the JPEGs that the first draft of your code spits out won’t be correct. (If you open them up and don’t see anything, they’re probably not correct!) Execute the command below to delete all JPEGs in your current working directory.\nrm *.jpg\n\nIf you’d rather not be prompted to confirm each deletion, execute the command below instead.\nrm -f *.jpg\n\nJust be careful with that -f switch, as it “forces” deletion without prompting you."
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#walkthrough",
    "href": "homework/hw_5/5.4_recover.html#walkthrough",
    "title": "Recover",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#how-to-test",
    "href": "homework/hw_5/5.4_recover.html#how-to-test",
    "title": "Recover",
    "section": "How to Test",
    "text": "How to Test\n\nRunning the Program\n./recover card.raw\n\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/recover\n\n\n\nStyle\nstyle50 recover.c"
  },
  {
    "objectID": "homework/hw_5/5.4_recover.html#how-to-submit",
    "href": "homework/hw_5/5.4_recover.html#how-to-submit",
    "title": "Recover",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/recover"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html",
    "href": "homework/hw_5/5.2_this_version_of_filter.html",
    "title": "this version of Filter",
    "section": "",
    "text": "Week 4, Problem 2\nSource: https://cs50.harvard.edu/x/psets/4/filter/less/"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#problem-to-solve",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#problem-to-solve",
    "title": "this version of Filter",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nPerhaps the simplest way to represent an image is with a grid of pixels (i.e., dots), each of which can be of a different color. For black-and-white images, we thus need 1 bit per pixel, as 0 could represent black and 1 could represent white, as in the below.\n\n\n\na simple bitmap\n\n\nIn this sense, then, is an image just a bitmap (i.e., a map of bits). For more colorful images, you simply need more bits per pixel. A file format (like BMP, JPEG, or PNG) that supports “24-bit color” uses 24 bits per pixel. (BMP actually supports 1-, 4-, 8-, 16-, 24-, and 32-bit color.)\nA 24-bit BMP uses 8 bits to signify the amount of red in a pixel’s color, 8 bits to signify the amount of green in a pixel’s color, and 8 bits to signify the amount of blue in a pixel’s color. If you’ve ever heard of RGB color, well, there you have it: red, green, blue.\nIf the R, G, and B values of some pixel in a BMP are, say, 0xff, 0x00, and 0x00 in hexadecimal, that pixel is purely red, as 0xff (otherwise known as 255 in decimal) implies “a lot of red,” while 0x00 and 0x00 imply “no green” and “no blue,” respectively. In this problem, you’ll manipulate these R, G, and B values of individual pixels, ultimately creating your very own image filters.\nIn a file called helpers.c in a folder called filter-less, write a program to apply filters to BMPs."
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#demo",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#demo",
    "title": "this version of Filter",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#distribution-code",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#distribution-code",
    "title": "this version of Filter",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/4/filter-less.zip\n\nin order to download a ZIP called filter-less.zip into your codespace.\nThen execute\nunzip filter-less.zip\n\nto create a folder called filter-less. You no longer need the ZIP file, so you can execute\nrm filter-less.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd filter-less\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nfilter-less/ $\n\nExecute ls by itself, and you should see a few files: bmp.h, filter.c, helpers.h, helpers.c, and Makefile. You should also see a folder, images/, with four BMP files. If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#background",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#background",
    "title": "this version of Filter",
    "section": "Background",
    "text": "Background\n\nA Bit(map) More Technical\nRecall that a file is just a sequence of bits, arranged in some fashion. A 24-bit BMP file, then, is essentially just a sequence of bits, (almost) every 24 of which happen to represent some pixel’s color. But a BMP file also contains some “metadata,” information like an image’s height and width. That metadata is stored at the beginning of the file in the form of two data structures generally referred to as “headers,” not to be confused with C’s header files. (Incidentally, these headers have evolved over time. This problem uses the latest version of Microsoft’s BMP format, 4.0, which debuted with Windows 95.)\nThe first of these headers, called BITMAPFILEHEADER, is 14 bytes long. (Recall that 1 byte equals 8 bits.) The second of these headers, called BITMAPINFOHEADER, is 40 bytes long. Immediately following these headers is the actual bitmap: an array of bytes, triples of which represent a pixel’s color. However, BMP stores these triples backwards (i.e., as BGR), with 8 bits for blue, followed by 8 bits for green, followed by 8 bits for red. (Some BMPs also store the entire bitmap backwards, with an image’s top row at the end of the BMP file. But we’ve stored this problem set’s BMPs as described herein, with each bitmap’s top row first and bottom row last.) In other words, were we to convert the 1-bit smiley above to a 24-bit smiley, substituting red for black, a 24-bit BMP would store this bitmap as follows, where 0000ff signifies red and ffffff signifies white; we’ve highlighted in red all instances of 0000ff.\n\n\n\nred smile\n\n\nBecause we’ve presented these bits from left to right, top to bottom, in 8 columns, you can actually see the red smiley if you take a step back.\nTo be clear, recall that a hexadecimal digit represents 4 bits. Accordingly, ffffff in hexadecimal actually signifies 111111111111111111111111 in binary.\nNotice that you could represent a bitmap as a 2-dimensional array of pixels: where the image is an array of rows, each row is an array of pixels. Indeed, that’s how we’ve chosen to represent bitmap images in this problem.\n\n\nImage Filtering\nWhat does it even mean to filter an image? You can think of filtering an image as taking the pixels of some original image, and modifying each pixel in such a way that a particular effect is apparent in the resulting image."
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#understanding",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#understanding",
    "title": "this version of Filter",
    "section": "Understanding",
    "text": "Understanding\nLet’s now take a look at some of the files provided to you as distribution code to get an understanding for what’s inside of them.\n\nbmp.h\nOpen up bmp.h (as by double-clicking on it in the file browser) and have a look.\nYou’ll see definitions of the headers we’ve mentioned (BITMAPINFOHEADER and BITMAPFILEHEADER). In addition, that file defines BYTE, DWORD, LONG, and WORD, data types normally found in the world of Windows programming. Notice how they’re just aliases for primitives with which you are (hopefully) already familiar. It appears that BITMAPFILEHEADER and BITMAPINFOHEADER make use of these types.\nPerhaps most importantly for you, this file also defines a struct called RGBTRIPLE that, quite simply, “encapsulates” three bytes: one blue, one green, and one red (the order, recall, in which we expect to find RGB triples actually on disk).\nWhy are these structs useful? Well, recall that a file is just a sequence of bytes (or, ultimately, bits) on disk. But those bytes are generally ordered in such a way that the first few represent something, the next few represent something else, and so on. “File formats” exist because the world has standardized what bytes mean what. Now, we could just read a file from disk into RAM as one big array of bytes. And we could just remember that the byte at array[i] represents one thing, while the byte at array[j] represents another. But why not give some of those bytes names so that we can retrieve them from memory more easily? That’s precisely what the structs in bmp.h allow us to do. Rather than think of some file as one long sequence of bytes, we can instead think of it as a sequence of structs.\n\n\nfilter.c\nNow, let’s open up filter.c. This file has been written already for you, but there are a couple important points worth noting here.\nFirst, notice the definition of filters on line 10. That string tells the program what the allowable command-line arguments to the program are: b, g, r, and s. Each of them specifies a different filter that we might apply to our images: blur, grayscale, reflection, and sepia.\nThe next several lines open up an image file, make sure it’s indeed a BMP file, and read all of the pixel information into a 2D array called image.\nScroll down to the switch statement that begins on line 101. Notice that, depending on what filter we’ve chosen, a different function is called: if the user chooses filter b, the program calls the blur function; if g, then grayscale is called; if r, then reflect is called; and if s, then sepia is called. Notice, too, that each of these functions take as arguments the height of the image, the width of the image, and the 2D array of pixels.\nThese are the functions you’ll (soon!) implement. As you might imagine, the goal is for each of these functions to edit the 2D array of pixels in such a way that the desired filter is applied to the image.\nThe remaining lines of the program take the resulting image and write them out to a new image file.\n\n\nhelpers.h\nNext, take a look at helpers.h. This file is quite short, and just provides the function prototypes for the functions you saw earlier.\nHere, take note of the fact that each function takes a 2D array called image as an argument, where image is an array of height many rows, and each row is itself another array of width many RGBTRIPLEs. So if image represents the whole picture, then image[0] represents the first row, and image[0][0] represents the pixel in the upper-left corner of the image.\n\n\nhelpers.c\nNow, open up helpers.c. Here’s where the implementation of the functions declared in helpers.h belong. But note that, right now, the implementations are missing! This part is up to you.\n\n\nMakefile\nFinally, let’s look at Makefile. This file specifies what should happen when we run a terminal command like make filter. Whereas programs you may have written before were confined to just one file, filter seems to use multiple files: filter.c and helpers.c. So we’ll need to tell make how to compile this file.\nTry compiling filter for yourself by going to your terminal and running\n$ make filter\n\nThen, you can run the program by running:\n$ ./filter -g images/yard.bmp out.bmp\n\nwhich takes the image at images/yard.bmp, and generates a new image called out.bmp after running the pixels through the grayscale function. grayscale doesn’t do anything just yet, though, so the output image should look the same as the original yard."
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#specification",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#specification",
    "title": "this version of Filter",
    "section": "Specification",
    "text": "Specification\nImplement the functions in helpers.c such that a user can apply grayscale, sepia, reflection, or blur filters to their images.\n\nThe function grayscale should take an image and turn it into a black-and-white version of the same image.\n\nThe grayscale algorithm\nThe “grayscale” filter is a mainstay of the image filtering world: it takes (potentially quite colorful) images and converts them to “black-and-white”, as though the image were taken before the popularization of color photography. How does something like that work?\n\nRecall that if the red, green, and blue values are all set to 0x00 (hexadecimal for 0), then the pixel is black. And if all values are set to 0xff (hexadecimal for 255), then the pixel is white. So long as the red, green, and blue values are all equal, the result will be varying shades of gray along the black-white spectrum, with higher values meaning lighter shades (closer to white) and lower values meaning darker shades (closer to black).\nSo to convert a pixel to grayscale, you just need to make sure the red, green, and blue values are all the same value. But how do you know what value to make them? Well, it’s probably reasonable to expect that if the original red, green, and blue values were all pretty high, then the new value should also be pretty high. And if the original values were all low, then the new value should also be low.\nIn fact, to ensure each pixel of the new image still has the same general brightness or darkness as the old image, you can take the average of the red, green, and blue values to determine what shade of grey to make the new pixel.\n\nIf you apply the above algorithm to each pixel in the image, the result will be an image converted to grayscale.\n\nThe function sepia should take an image and turn it into a sepia version of the same image.\n\nThe sepia algorithm\nMost image editing programs support a “sepia” filter, which gives images an old-timey feel by making the whole image look a bit reddish-brown.\n\nAn image can be converted to sepia by taking each pixel, and computing new red, green, and blue values based on the original values of the three.\nThere are a number of algorithms for converting an image to sepia, but for this problem, we’ll ask you to use the following algorithm. For each pixel, the sepia color values should be calculated based on the original color values per the below.\nsepiaRed = .393 * originalRed + .769 * originalGreen + .189 * originalBlue\nsepiaGreen = .349 * originalRed + .686 * originalGreen + .168 * originalBlue\nsepiaBlue = .272 * originalRed + .534 * originalGreen + .131 * originalBlue\n\nOf course, the result of each of these formulas may not be an integer, but each value could be rounded to the nearest integer. It’s also possible that the result of the formula is a number greater than 255, the maximum value for an 8-bit color value. In that case, the red, green, and blue values should be capped at 255. As a result, we can guarantee that the resulting red, green, and blue values will be whole numbers between 0 and 255, inclusive.\n\nIf you apply the above algorithm to each pixel in the image, the result will be an image converted to sepia.\n\nThe reflect function should take an image and reflect it horizontally.\n\nThe reflect algorithm\nSome more adventurous filters might go further than merely editing the pixels in place; they might move the pixels around the image. Reflecting an image, for example, is a filter where the resulting image is what you would get by placing the original image in front of a mirror.\n\nAny pixels on the left side of the image should end up on the right, and vice versa.\nNote that all of the original pixels of the original image will still be present in the reflected image, it’s just that those pixels may have been rearranged to be in a different place in the image.\n\nIf you apply the above algorithm to each pixel in the image, the result should look like a mirror image of the original.\n\nFinally, the blur function should take an image and turn it into a box-blurred version of the same image.\n\nThe blur algorithm\nThere are a number of ways to create the effect of blurring or softening an image, giving the resulting picture a hazy, dreamlike feeling (or perhaps just the feeling of having lost your glasses). For this problem, we’ll use the “box blur,” which works by taking each pixel and, for each color value, giving it a new value by averaging the color values of neighboring pixels.\n\nConsider the following grid of pixels, where we’ve numbered each pixel.\n\n\n\na grid of pixels\n\n\nThe new value of each pixel would be the average of the values of all of the pixels that are within 1 row and column of the original pixel (forming a 3x3 box). For example, each of the color values for pixel 6 would be obtained by averaging the original color values of pixels 1, 2, 3, 5, 6, 7, 9, 10, and 11 (note that pixel 6 itself is included in the average). Likewise, the color values for pixel 11 would be be obtained by averaging the color values of pixels 6, 7, 8, 10, 11, 12, 14, 15 and 16.\nFor a pixel along the edge or corner, like pixel 15, we would still look for all pixels within 1 row and column, but only those that are actually within the image: in this case, we’d take the average of pixels 10, 11, 12, 14, 15, and 16.\n\nIf you apply the above algorithm to each pixel in the image, the result should look like a blurry, out-of-focus version of the original.\nYou should not modify any of the function signatures, nor should you modify any other files other than helpers.c."
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#hints",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#hints",
    "title": "this version of Filter",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nImplement grayscale\nGiven the grayscale algorithm you learned about above, let’s write some pseudocode to help you tackle this problem:\nvoid grayscale(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Loop over all pixels\n\n        // Take average of red, green, and blue\n\n        // Update pixel values\n}\n\nFirst, how might you loop over all pixels? Recall that the image’s pixels are stored in the two-dimensional array, image. To iterate over a two-dimensional array, you’ll need two loops, one nested inside the other.\nvoid grayscale(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Loop over all pixels\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            // Take average of red, green, and blue\n\n            // Update pixel values\n        }\n    }\n}\n\nNow, you can use image[i][j] to access any individual pixel of the image. But how to take the average of the red, green, and blue elements? Recall each element of image is an RGBTRIPLE, which is the struct defined in bmp.h to represent a pixel. The usual syntax to access members of a struct applies, wherein image[i][j].rgbtRed will give you access to the RGBTRIPLE’s red value, image[i][j].rgbtGreen will give you access to its green value, and so on.\nWhen you compute the average, keep in mind the values of a pixel’s rgbtRed, rgbtGreen, and rgbtBlue components are all integers. So be sure to round any floating-point numbers to the nearest integer when assigning them to a pixel value! And why might you want to divide the sum of these integers by 3.0 and not 3?\nOnce you’ve averaged the pixel’s red, green, and blue values into a resulting grayscale color, go ahead and update the pixel’s red, green, and blue values. By now, you’re already acquainted with the syntax for assignment!\nImplement sepia\nLet’s write some pseudocode to help you implement the sepia algorithm we learned about above, recalling the use of nested for loops to visit every pixel.\nvoid sepia(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Loop over all pixels\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            // Compute sepia values\n\n            // Update pixel with sepia values\n        }\n    }\n}\n\nTo compute the sepia values, revisit the above bullets. You have a formula to compute the sepia values, but there are still a few catches. In particular, you’ll need to…\n\nRound the result of each computation to the nearest integer\nEnsure the resulting value is no larger than 255\n\nHow might a function that returns the lesser of two integers come in handy while implementing sepia, particularly when you need to make sure a color’s value is no higher than 255? You’re welcome, but not required, to write a helper function of your own to do just that!\nImplement reflect\nUsing what you know about the algorithm for image reflection, you know that in the reflect function, you’ll need to swap the values of pixels on opposite sides of a row. Write some pseudocode to help you get started:\nvoid reflect(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Loop over all pixels\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            // Swap pixels\n        }\n    }\n}\n\nRecall from lecture how we implemented swapping two values with a temporary variable. No need to use a separate function for swapping unless you would like to!\nAnd now’s a good time to think about your nested for loops. The outer for loop iterates over every row, while the inner for loop iterates over every pixel in that row. To successfully reflect a row, though, need you iterate over every pixel in it?\nImplement blur\nWhen implementing the blur algorithm, you might find that blurring one pixel ends up affecting the blur of another pixel. Therefore, it might be best to create a copy of image by declaring a new, two-dimensional array with code like RGBTRIPLE copy[height][width];. Then copy image into copy, pixel by pixel, with nested for loops, like so:\nvoid blur(int height, int width, RGBTRIPLE image[height][width])\n{\n    // Create a copy of image\n    RGBTRIPLE copy[height][width];\n    for (int i = 0; i &lt; height; i++)\n    {\n        for (int j = 0; j &lt; width; j++)\n        {\n            copy[i][j] = image[i][j];\n        }\n    }\n}\n\nNow, you can read pixels’ colors from copy but write (i.e., change) pixels’ colors in image!"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#walkthrough",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#walkthrough",
    "title": "this version of Filter",
    "section": "Walkthrough",
    "text": "Walkthrough\nPlease note that there are 5 videos in this playlist."
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#how-to-test",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#how-to-test",
    "title": "this version of Filter",
    "section": "How to Test",
    "text": "How to Test\nBe sure to test all of your filters on the sample bitmap files provided!\n\nCorrectness\ncheck50 cs50/problems/2025/x/filter/less\n\n\n\nStyle\nstyle50 helpers.c"
  },
  {
    "objectID": "homework/hw_5/5.2_this_version_of_filter.html#how-to-submit",
    "href": "homework/hw_5/5.2_this_version_of_filter.html#how-to-submit",
    "title": "this version of Filter",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/filter/less"
  },
  {
    "objectID": "homework/hw_4.html",
    "href": "homework/hw_4.html",
    "title": "Problem Set 3",
    "section": "",
    "text": "Week 3 Problem Set\nSource: https://cs50.harvard.edu/x/psets/3/",
    "crumbs": [
      "Homework",
      "Homework 04 🟢"
    ]
  },
  {
    "objectID": "homework/hw_4.html#what-to-do",
    "href": "homework/hw_4.html#what-to-do",
    "title": "Problem Set 3",
    "section": "What to Do",
    "text": "What to Do\n\nSubmit Sort\nSubmit Plurality\nSubmit one of:\n\nRunoff, if feeling more or less comfortable\nTideman, if feeling very, very, very comfortable\n\n\nIf you submit both Runoff and Tideman, we’ll record the higher of your two scores. Note that Tideman is optional but challenging!",
    "crumbs": [
      "Homework",
      "Homework 04 🟢"
    ]
  },
  {
    "objectID": "homework/hw_4.html#when-to-do-it",
    "href": "homework/hw_4.html#when-to-do-it",
    "title": "Problem Set 3",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 04 🟢"
    ]
  },
  {
    "objectID": "homework/hw_4.html#advice",
    "href": "homework/hw_4.html#advice",
    "title": "Problem Set 3",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from class via Week 3’s source code.\nIf you see any errors when compiling your code with make, focus first on fixing the very first error you see, scrolling up as needed. If unsure what it means, try asking help50 for help. For instance, if trying to compile plurality, and\nmake plurality\n\nis yielding errors, try running\nhelp50 make plurality\n\ninstead!",
    "crumbs": [
      "Homework",
      "Homework 04 🟢"
    ]
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html",
    "href": "homework/hw_4/4.3_runoff.html",
    "title": "Runoff",
    "section": "",
    "text": "Week 3, Problem 3\nSource: https://cs50.harvard.edu/x/psets/3/runoff/"
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#problem-to-solve",
    "href": "homework/hw_4/4.3_runoff.html#problem-to-solve",
    "title": "Runoff",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nYou already know about plurality elections, which follow a very simple algorithm for determining the winner of an election: every voter gets one vote, and the candidate with the most votes wins.\nBut the plurality vote does have some disadvantages. What happens, for instance, in an election with three candidates, and the ballots below are cast?\n\n\n\nFive ballots, tie betweeen Alice and Bob\n\n\nA plurality vote would here declare a tie between Alice and Bob, since each has two votes. But is that the right outcome?\nThere’s another kind of voting system known as a ranked-choice voting system. In a ranked-choice system, voters can vote for more than one candidate. Instead of just voting for their top choice, they can rank the candidates in order of preference. The resulting ballots might therefore look like the below.\n\n\n\nFive ballots, with ranked preferences\n\n\nHere, each voter, in addition to specifying their first preference candidate, has also indicated their second and third choices. And now, what was previously a tied election could now have a winner. The race was originally tied between Alice and Bob, so Charlie was out of the running. But the voter who chose Charlie preferred Alice over Bob, so Alice could here be declared the winner.\nRanked choice voting can also solve yet another potential drawback of plurality voting. Take a look at the following ballots.\n\n\n\nNine ballots, with ranked preferences\n\n\nWho should win this election? In a plurality vote where each voter chooses their first preference only, Charlie wins this election with four votes compared to only three for Bob and two for Alice. But a majority of the voters (5 out of the 9) would be happier with either Alice or Bob instead of Charlie. By considering ranked preferences, a voting system may be able to choose a winner that better reflects the preferences of the voters.\nOne such ranked choice voting system is the instant runoff system. In an instant runoff election, voters can rank as many candidates as they wish. If any candidate has a majority (more than 50%) of the first preference votes, that candidate is declared the winner of the election.\nIf no candidate has more than 50% of the vote, then an “instant runoff” occurrs. The candidate who received the fewest number of votes is eliminated from the election, and anyone who originally chose that candidate as their first preference now has their second preference considered. Why do it this way? Effectively, this simulates what would have happened if the least popular candidate had not been in the election to begin with.\nThe process repeats: if no candidate has a majority of the votes, the last place candidate is eliminated, and anyone who voted for them will instead vote for their next preference (who hasn’t themselves already been eliminated). Once a candidate has a majority, that candidate is declared the winner.\nSounds a bit more complicated than a plurality vote, doesn’t it? But it arguably has the benefit of being an election system where the winner of the election more accurately represents the preferences of the voters. In a file called runoff.c in a folder called runoff, create a program to simulate a runoff election."
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#demo",
    "href": "homework/hw_4/4.3_runoff.html#demo",
    "title": "Runoff",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#distribution-code",
    "href": "homework/hw_4/4.3_runoff.html#distribution-code",
    "title": "Runoff",
    "section": "Distribution Code",
    "text": "Distribution Code\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/3/runoff.zip\n\nin order to download a ZIP called runoff.zip into your codespace.\nThen execute\nunzip runoff.zip\n\nto create a folder called runoff. You no longer need the ZIP file, so you can execute\nrm runoff.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd runoff\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nrunoff/ $\n\nIf all was successful, you should execute\nls\n\nand see a file named runoff.c. Executing code runoff.c should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!\nUnderstand the code in runoff.c\nWhenever you’ll extend the functionality of existing code, it’s best to be sure you first understand it in its present state.\nLook at the top of runoff.c first. Two constants are defined: MAX_CANDIDATES for the maximum number of candidates in the election, and MAX_VOTERS for the maximum number of voters in the election.\n// Max voters and candidates\n#define MAX_VOTERS 100\n#define MAX_CANDIDATES 9\n\nNotice that MAX_CANDIDATES is used to size an array, candidates.\n// Array of candidates\ncandidate candidates[MAX_CANDIDATES];\n\ncandidates is an array of candidates. In runoff.c a candidate is a struct. Every candidate has a string field for their name, an int representing the number of votes they currently have, and a bool value called eliminated that indicates whether the candidate has been eliminated from the election. The array candidates will keep track of all of the candidates in the election.\n// Candidates have name, vote count, eliminated status\ntypedef struct\n{\n    string name;\n    int votes;\n    bool eliminated;\n}\ncandidate;\n\nNow you can better understand preferences, the two-dimensional array. The array preferences[i] will represent all of the preferences for voter number i. The integer, preferences[i][j], will store the index of the candidate, from the candidates array, who is the jth preference for voter i.\n// preferences[i][j] is jth preference for voter i\nint preferences[MAX_VOTERS][MAX_CANDIDATES];\n\nThe program also has two global variables: voter_count and candidate_count.\n// Numbers of voters and candidates\nint voter_count;\nint candidate_count;\n\nNow onto main. Notice that after determining the number of candidates and the number of voters, the main voting loop begins, giving every voter a chance to vote. As the voter enters their preferences, the vote function is called to keep track of all of the preferences. If at any point, the ballot is deemed to be invalid, the program exits.\nOnce all of the votes are in, another loop begins: this one’s going to keep looping through the runoff process of checking for a winner and eliminating the last place candidate until there is a winner.\nThe first call here is to a function called tabulate, which should look at all of the voters’ preferences and compute the current vote totals, by looking at each voter’s top choice candidate who hasn’t yet been eliminated. Next, the print_winner function should print out the winner if there is one; if there is, the program is over. But otherwise, the program needs to determine the fewest number of votes anyone still in the election received (via a call to find_min). If it turns out that everyone in the election is tied with the same number of votes (as determined by the is_tie function), the election is declared a tie; otherwise, the last-place candidate (or candidates) is eliminated from the election via a call to the eliminate function.\nIf you look a bit further down in the file, you’ll see that the rest of the functions—vote, tabulate, print_winner, find_min, is_tie, and eliminate—are all left to up to you to complete! You should only modify these functions in runoff.c, though you may #include additional header files atop runoff.c if you’d like"
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#hints",
    "href": "homework/hw_4/4.3_runoff.html#hints",
    "title": "Runoff",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nComplete the vote function\nComplete the vote function.\n\nThe function takes three arguments: voter, rank, and name.\nIf name is a match for the name of a valid candidate, then you should update the global preferences array to indicate that the voter voter has that candidate as their rank preference. Keep in mind 0 is the first preference, 1 is the second preference, etc. You may assume that no two candidates will have the same name.\nIf the preference is successfully recorded, the function should return true. The function should return false otherwise. Consider, for instance, when name is not the name of one of the candidates.\n\nAs you write your code, consider these hints:\n\nRecall that candidate_count stores the number of candidates in the election.\nRecall that you can use strcmp to compare two strings.\nRecall that preferences[i][j] stores the index of the candidate who is the jth ranked preference for the ith voter. Complete the tabulate function\n\nComplete the tabulate function.\n\nThe function should update the number of votes each candidate has at this stage in the runoff.\nRecall that at each stage in the runoff, every voter effectively votes for their top-preferred candidate who has not already been eliminated.\n\nAs you write your code, consider these hints:\n\nRecall that voter_count stores the number of voters in the election and that, for each voter in our election, we want to count one ballot.\nRecall that for a voter i, their top choice candidate is represented by preferences[i][0], their second choice candidate by preferences[i][1], etc.\nRecall that the candidate struct has a field called eliminated, which will be true if the candidate has been eliminated from the election.\nRecall that the candidate struct has a field called votes, which you’ll likely want to update for each voter’s preferred candidate.\nRecall that once you’ve cast a vote for a voter’s first non-eliminated candidate, you’ll want to stop there, not continue down their ballot. You can break out of a loop early using break inside of a conditional. Complete the print_winner function\n\nComplete the print_winner function.\n\nIf any candidate has more than half of the vote, their name should be printed and the function should return true.\nIf nobody has won the election yet, the function should return false.\n\nAs you write your code, consider this hint:\n\nRecall that voter_count stores the number of voters in the election. Given that, how would you express the number of votes needed to win the election? Complete the find_min function\n\nComplete the find_min function.\n\nThe function should return the minimum vote total for any candidate who is still in the election.\n\nAs you write your code, consider this hint:\n\nYou’ll likely want to loop through the candidates to find the one who is both still in the election and has the fewest number of votes. What information should you keep track of as you loop through the candidates? Complete the is_tie function\n\nComplete the is_tie function.\n\nThe function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.\nThe function should return true if every candidate remaining in the election has the same number of votes, and should return false otherwise.\n\nAs you write your code, consider this hint:\n\nRecall that a tie happens if every candidate still in the election has the same number of votes. Note, too, that the is_tie function takes an argument min, which is the smallest number of votes any candidate currently has. How might you use min to determine if the election is a tie (or, conversely, not a tie)? Complete the eliminate function\n\nComplete the eliminate function.\n\nThe function takes an argument min, which will be the minimum number of votes that anyone in the election currently has.\nThe function should eliminate the candidate (or candidates) who have min number of votes."
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#walkthrough",
    "href": "homework/hw_4/4.3_runoff.html#walkthrough",
    "title": "Runoff",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#how-to-test",
    "href": "homework/hw_4/4.3_runoff.html#how-to-test",
    "title": "Runoff",
    "section": "How to Test",
    "text": "How to Test\nBe sure to test your code to make sure it handles…\n\nAn election with any number of candidate (up to the MAX of 9)\nVoting for a candidate by name\nInvalid votes for candidates who are not on the ballot\nPrinting the winner of the election if there is only one\nNot eliminating anyone in the case of a tie between all remaining candidates\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/runoff\n\n\n\nStyle\nstyle50 runoff.c"
  },
  {
    "objectID": "homework/hw_4/4.3_runoff.html#how-to-submit",
    "href": "homework/hw_4/4.3_runoff.html#how-to-submit",
    "title": "Runoff",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/runoff"
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html",
    "href": "homework/hw_4/4.1_sort.html",
    "title": "Sort",
    "section": "",
    "text": "Week 3, Problem 1\nSource: https://cs50.harvard.edu/x/psets/3/sort/"
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#problem-to-solve",
    "href": "homework/hw_4/4.1_sort.html#problem-to-solve",
    "title": "Sort",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nRecall from lecture that we saw a few algorithms for sorting a sequence of numbers: selection sort, bubble sort, and merge sort.\n\nSelection sort iterates through the unsorted portions of a list, selecting the smallest element each time and moving it to its correct location.\nBubble sort compares pairs of adjacent values one at a time and swaps them if they are in the incorrect order. This continues until the list is sorted.\nMerge sort recursively divides the list into two repeatedly and then merges the smaller lists back into a larger one in the correct order.\n\nIn this problem, you’ll analyze three (compiled!) sorting programs to determine which algorithms they use. In a file called answers.txt in a folder called sort, record your answers, along with an explanation for each program, by filling in the blanks marked TODO."
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#distribution-code",
    "href": "homework/hw_4/4.1_sort.html#distribution-code",
    "title": "Sort",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll need some “distribution code”—that is, code written by CS50’s staff. Provided to you are three already-compiled C programs, sort1, sort2, and sort3, as well as several .txt files for input and another file, answers.txt, in which to write your answers. Each of sort1, sort2, and sort3 implements a different sorting algorithm: selection sort, bubble sort, or merge sort (though not necessarily in that order!). Your task is to determine which sorting algorithm is used by each file. Start by downloading these files.\nDownload distribution files\nOpen VS Code.\nStart by clicking inside your terminal window, then execute cd by itself. You should find that its “prompt” resembles the below.\n$\n\nClick inside of that terminal window and then execute\nwget https://cdn.cs50.net/2024/fall/psets/3/sort.zip\n\nfollowed by Enter in order to download a ZIP called sort.zip in your codespace. Take care not to overlook the space between wget and the following URL, or any other character for that matter!\nNow execute\nunzip sort.zip\n\nto create a folder called sort. You no longer need the ZIP file, so you can execute\nrm sort.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded."
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#hints",
    "href": "homework/hw_4/4.1_sort.html#hints",
    "title": "Sort",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nExplore the .txt files\n\nMultiple .txt files are provided to you. These files contain n lines of values, either reversed, shuffled, or sorted.\n\nFor example, reversed10000.txt contains 10000 lines of numbers that are reversed from 10000, while random50000.txt contains 50000 lines of numbers that are in random order.\n\nThe different types of .txt files may help you determine which sort is which. Consider how each algorithm performs with an already sorted list. How about a reversed list? Or shuffled list? It may help to work through a smaller list of each type and walk through each sorting process. Time each sort with different inputs\nTo run the sorts on the text files, in the terminal, run ./[program_name] [text_file.txt]. Make sure you have made use of cd to move into the sort directory!\n\nFor example, to sort reversed10000.txt with sort1, run ./sort1 reversed10000.txt.\n\nYou may find it helpful to time your sorts. To do so, run time ./[sort_file] [text_file.txt].\n\nFor example, you could run time ./sort1 reversed10000.txt to run sort1 on 10,000 reversed numbers. At the end of your terminal’s output, you can look at the real time to see how much time actually elapsed while running the program."
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#walkthrough",
    "href": "homework/hw_4/4.1_sort.html#walkthrough",
    "title": "Sort",
    "section": "Walkthrough",
    "text": "Walkthrough\nNot sure how to solve?"
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#how-to-test",
    "href": "homework/hw_4/4.1_sort.html#how-to-test",
    "title": "Sort",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\ncheck50 cs50/problems/2025/x/sort"
  },
  {
    "objectID": "homework/hw_4/4.1_sort.html#how-to-submit",
    "href": "homework/hw_4/4.1_sort.html#how-to-submit",
    "title": "Sort",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sort"
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html",
    "href": "homework/hw_3/3.4_substitution.html",
    "title": "Substitution",
    "section": "",
    "text": "Week 2, Problem 4\nSource: https://cs50.harvard.edu/x/psets/2/substitution/"
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#problem-to-solve",
    "href": "homework/hw_3/3.4_substitution.html#problem-to-solve",
    "title": "Substitution",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a substitution cipher, we “encrypt” (i.e., conceal in a reversible way) a message by replacing every letter with another letter. To do so, we use a key: in this case, a mapping of each of the letters of the alphabet to the letter it should correspond to when we encrypt it. To “decrypt” the message, the receiver of the message would need to know the key, so that they can reverse the process: translating the encrypt text (generally called ciphertext) back into the original message (generally called plaintext).\nA key, for example, might be the string NQXPOMAFTRHLZGECYJIUWSKDVB. This 26-character key means that A (the first letter of the alphabet) should be converted into N (the first character of the key), B (the second letter of the alphabet) should be converted into Q (the second character of the key), and so forth.\nA message like HELLO, then, would be encrypted as FOLLE, replacing each of the letters according to the mapping determined by the key.\nIn a file called substitution.c in a folder called substitution, create a program that enables you to encrypt messages using a substitution cipher. At the time the user executes the program, they should decide, by providing a command-line argument, on what the key should be in the secret message they’ll provide at runtime."
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#demo",
    "href": "homework/hw_3/3.4_substitution.html#demo",
    "title": "Substitution",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#specification",
    "href": "homework/hw_3/3.4_substitution.html#specification",
    "title": "Substitution",
    "section": "Specification",
    "text": "Specification\nDesign and implement a program, substitution, that encrypts messages using a substitution cipher.\n\nImplement your program in a file called substitution.c in a directory called substitution.\nYour program must accept a single command-line argument, the key to use for the substitution. The key itself should be case-insensitive, so whether any character in the key is uppercase or lowercase should not affect the behavior of your program.\nIf your program is executed without any command-line arguments or with more than one command-line argument, your program should print an error message of your choice (with printf) and return from main a value of 1 (which tends to signify an error) immediately.\nIf the key is invalid (as by not containing 26 characters, containing any character that is not an alphabetic character, or not containing each letter exactly once), your program should print an error message of your choice (with printf) and return from main a value of 1 immediately.\nYour program must output plaintext: (without a newline) and then prompt the user for a string of plaintext (using get_string).\nYour program must output ciphertext: (without a newline) followed by the plaintext’s corresponding ciphertext, with each alphabetical character in the plaintext substituted for the corresponding character in the ciphertext; non-alphabetical characters should be outputted unchanged.\nYour program must preserve case: capitalized letters must remain capitalized letters; lowercase letters must remain lowercase letters.\nAfter outputting ciphertext, you should print a newline. Your program should then exit by returning 0 from main.\n\nYou might find one or more functions declared in ctype.h to be helpful, per manual.cs50.io."
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#walkthrough",
    "href": "homework/hw_3/3.4_substitution.html#walkthrough",
    "title": "Substitution",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#how-to-test",
    "href": "homework/hw_3/3.4_substitution.html#how-to-test",
    "title": "Substitution",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/substitution\n\nHow to Use debug50\nLooking to run debug50? You can do so as follows, after compiling your code successfully with make,\ndebug50 ./substitution KEY\n\nwherein KEY is the key you give as a command-line argument to your program. Note that running\ndebug50 ./substitution\n\nwill (ideally!) cause your program end by prompting the user for a key.\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 substitution.c"
  },
  {
    "objectID": "homework/hw_3/3.4_substitution.html#how-to-submit",
    "href": "homework/hw_3/3.4_substitution.html#how-to-submit",
    "title": "Substitution",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/substitution"
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html",
    "href": "homework/hw_3/3.2_readability.html",
    "title": "Readability",
    "section": "",
    "text": "Week 2, Problem 2\nSource: https://cs50.harvard.edu/x/psets/2/readability/"
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#problem-to-solve",
    "href": "homework/hw_3/3.2_readability.html#problem-to-solve",
    "title": "Readability",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nAccording to Scholastic, E.B. White’s Charlotte’s Web is between a second- and fourth-grade reading level, and Lois Lowry’s The Giver is between an eighth- and twelfth-grade reading level. What does it mean, though, for a book to be at a particular reading level?\nWell, in many cases, a human expert might read a book and make a decision on the grade (i.e., year in school) for which they think the book is most appropriate. But an algorithm could likely figure that out too!\nIn a file called readability.c in a folder called readability, you’ll implement a program that calculates the approximate grade level needed to comprehend some text. Your program should print as output “Grade X” where “X” is the grade level computed, rounded to the nearest integer. If the grade level is 16 or higher (equivalent to or greater than a senior undergraduate reading level), your program should output “Grade 16+” instead of giving the exact index number. If the grade level is less than 1, your program should output “Before Grade 1”."
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#demo",
    "href": "homework/hw_3/3.2_readability.html#demo",
    "title": "Readability",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#background",
    "href": "homework/hw_3/3.2_readability.html#background",
    "title": "Readability",
    "section": "Background",
    "text": "Background\nSo what sorts of traits are characteristic of higher reading levels? Well, longer words probably correlate with higher reading levels. Likewise, longer sentences probably correlate with higher reading levels, too.\nA number of “readability tests” have been developed over the years that define formulas for computing the reading level of a text. One such readability test is the Coleman-Liau index. The Coleman-Liau index of a text is designed to output that (U.S.) grade level that is needed to understand some text. The formula is\nindex = 0.0588 * L - 0.296 * S - 15.8\n\nwhere L is the average number of letters per 100 words in the text, and S is the average number of sentences per 100 words in the text."
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#specification",
    "href": "homework/hw_3/3.2_readability.html#specification",
    "title": "Readability",
    "section": "Specification",
    "text": "Specification\nFor the purpose of this problem, we’ll consider any sequence of characters separated by a space to be a word (so a hyphenated word like “sister-in-law” should be considered one word, not three). You may assume that a sentence:\n\nwill contain at least one word;\nwill not start or end with a space; and\nwill not have multiple spaces in a row.\n\nUnder those assumptions, you might already be able to find a mathematical relationship between the number of words and the number of spaces.\nYou are, of course, welcome to attempt a more sophisticated solution that can tolerate multiple spaces between words! We’ve tuned check50 to accept either approach to spaces, so the choice is yours."
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#advice",
    "href": "homework/hw_3/3.2_readability.html#advice",
    "title": "Readability",
    "section": "Advice",
    "text": "Advice\nClick the below toggles to read some advice!\nWrite some code that you know will compile\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n\n}\n\nNotice that you’ve now included a few header files that will give you access to functions which might help you solve this problem.\nWrite some pseudocode before writing more code\nIf unsure how to solve the problem itself, break it down into smaller problems that you can probably solve first. For instance, this problem is really only a handful of problems:\n\nPrompt the user for some text\nCount the number of letters, words, and sentences in the text\nCompute the Coleman-Liau index\nPrint the grade level\n\nLet’s write some pseudcode as comments to remind you to do just that:\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt the user for some text\n\n    // Count the number of letters, words, and sentences in the text\n\n    // Compute the Coleman-Liau index\n\n    // Print the grade level\n}\n\nConvert the pseudocode to code\nFirst, consider how you might prompt the user for some text. Recall that get_string, a function in the CS50 library, can prompt the user for a string.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt the user for some text\n    string text = get_string(\"Text: \");\n\n    // Count the number of letters, words, and sentences in the text\n\n    // Compute the Coleman-Liau index\n\n    // Print the grade level\n}\n\nNow that you’ve collected input from the user, you can begin to analyze that input. First, try to count the number of letters in the text. Consider letters to be uppercase or lowercase alphabetical character, not punctuation, digits, or other symbols.\nOne way to approach this problem is to create a function called count_letters that takes a string, text, as input, and then returns the number of letters in that text as an int.\nint count_letters(string text)\n{\n    // Return the number of letters in text\n}\n\nYou’ll need to write your own code to count the number of letters in the text. But someone more experienced than you may have already written a function to determine if a character is alphabetical. This is a good opportunity to use the CS50 manual, a collection of explanations of common functions in the C Standard Library.\nYou can integrate count_letters into the code you’ve already written, as follows.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint count_letters(string text);\n\nint main(void)\n{\n    // Prompt the user for some text\n    string text = get_string(\"Text: \");\n\n    // Count the number of letters, words, and sentences in the text\n    int letters = count_letters(text);\n\n    // Compute the Coleman-Liau index\n\n    // Print the grade level\n}\n\nint count_letters(string text)\n{\n    // Return the number of letters in text\n}\n\nNext, write a function to count words.\nint count_words(string text)\n{\n    // Return the number of words in text\n}\n\nYou can now integrate count_words into your program as follows:\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint count_letters(string text);\nint count_words(string text);\n\nint main(void)\n{\n    // Prompt the user for some text\n    string text = get_string(\"Text: \");\n\n    // Count the number of letters, words, and sentences in the text\n    int letters = count_letters(text);\n    int words = count_words(text);\n\n    // Compute the Coleman-Liau index\n\n    // Print the grade level\n}\n\nint count_letters(string text)\n{\n    // Return the number of letters in text\n}\n\nint count_words(string text)\n{\n    // Return the number of words in text\n}\n\nFinally, write a function to count sentences. You can consider any sequence of characters that ends with a . or a ! or a ? to be a sentence.\nint count_sentences(string text)\n{\n    // Return the number of sentences in text\n}\n\nYou can integrate count_sentences into your program as follows:\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint count_letters(string text);\nint count_words(string text);\nint count_sentences(string text);\n\nint main(void)\n{\n    // Prompt the user for some text\n    string text = get_string(\"Text: \");\n\n    // Count the number of letters, words, and sentences in the text\n    int letters = count_letters(text);\n    int words = count_words(text);\n    int sentences = count_sentences(text);\n\n    // Compute the Coleman-Liau index\n\n    // Print the grade level\n}\n\nint count_letters(string text)\n{\n    // Return the number of letters in text\n}\n\nint count_words(string text)\n{\n    // Return the number of words in text\n}\n\nint count_sentences(string text)\n{\n    // Return the number of sentences in text\n}\n\nFinally, compute the Coleman-Liau index and print the resulting grade level.\n\nRecall that the Coleman-Liau index is computed using index = 0.0588 * L - 0.296 * S - 15.8\nL is the average number of letters per 100 words in the text: that is, the number of letters divided by the number of words, all multiplied by 100.\nS is the average number of sentences per 100 words in the text: that is, the number of sentences divided by the number of words, all multiplied by 100.\nYou’ll want to round the result to the nearest whole number, so recall that round is declared in math.h, per manual.cs50.io.\nRecall that, when dividing values of type int in C, the result will also be an int, with any remainder (i.e., digits after the decimal point) discarded. Put another way, the result will be “truncated.” You might want to cast your one or more values to float before performing division when calculating L and S!\n\nIf the resulting index number is 16 or higher (equivalent to or greater than a senior undergraduate reading level), your program should output “Grade 16+” instead of outputting an exact index number. If the index number is less than 1, your program should output “Before Grade 1”."
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#walkthrough",
    "href": "homework/hw_3/3.2_readability.html#walkthrough",
    "title": "Readability",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#how-to-test",
    "href": "homework/hw_3/3.2_readability.html#how-to-test",
    "title": "Readability",
    "section": "How to Test",
    "text": "How to Test\nTry running your program on the following texts, to ensure you see the specified grade level. Be sure to copy only the text, no extra spaces.\n\nOne fish. Two fish. Red fish. Blue fish. (Before Grade 1)\nWould you like them here or there? I would not like them here or there. I would not like them anywhere. (Grade 2)\nCongratulations! Today is your day. You're off to Great Places! You're off and away! (Grade 3)\nHarry Potter was a highly unusual boy in many ways. For one thing, he hated the summer holidays more than any other time of year. For another, he really wanted to do his homework, but was forced to do it in secret, in the dead of the night. And he also happened to be a wizard. (Grade 5)\nIn my younger and more vulnerable years my father gave me some advice that I've been turning over in my mind ever since. (Grade 7)\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, \"and what is the use of a book,\" thought Alice \"without pictures or conversation?\" (Grade 8)\nWhen he was nearly thirteen, my brother Jem got his arm badly broken at the elbow. When it healed, and Jem's fears of never being able to play football were assuaged, he was seldom self-conscious about his injury. His left arm was somewhat shorter than his right; when he stood or walked, the back of his hand was at right angles to his body, his thumb parallel to his thigh. (Grade 8)\nThere are more things in Heaven and Earth, Horatio, than are dreamt of in your philosophy. (Grade 9)\nIt was a bright cold day in April, and the clocks were striking thirteen. Winston Smith, his chin nuzzled into his breast in an effort to escape the vile wind, slipped quickly through the glass doors of Victory Mansions, though not quickly enough to prevent a swirl of gritty dust from entering along with him. (Grade 10)\nA large class of computational problems involve the determination of properties of graphs, digraphs, integers, arrays of integers, finite families of finite sets, boolean formulas and elements of other countable domains. (Grade 16+)\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/readability\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 readability.c"
  },
  {
    "objectID": "homework/hw_3/3.2_readability.html#how-to-submit",
    "href": "homework/hw_3/3.2_readability.html#how-to-submit",
    "title": "Readability",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/readability"
  },
  {
    "objectID": "homework/hw_2.html",
    "href": "homework/hw_2.html",
    "title": "Homework week 2",
    "section": "",
    "text": "Log into submit.cs50.io using your GitHub account and click Authorize cs50, then close the tab.\nLog into cs50.dev using your GitHub account to access your very own “codespace.”\nOnce your codespace has loaded, close any Welcome tabs that might have opened by default.\nRun update50 in your codespace’s terminal window to ensure that your codespace is up-to-date and, if prompted, click Rebuild now.\nComplete Hello, World.\nSubmit Hello, It’s Me.\nSubmit one of:\n\nthis version of Mario, if feeling less comfortable\nthis version of Mario, if feeling more comfortable\n\nSubmit one of:\n\nCash, if feeling less comfortable\nCredit, if feeling more comfortable\n\n\nIf you submit both versions of Mario, we’ll record the higher of your two scores. If you submit both Cash and Credit, we’ll record the higher of your two scores.",
    "crumbs": [
      "Homework",
      "Homework 02 🟢"
    ]
  },
  {
    "objectID": "homework/hw_2.html#what-to-do",
    "href": "homework/hw_2.html#what-to-do",
    "title": "Homework week 2",
    "section": "",
    "text": "Log into submit.cs50.io using your GitHub account and click Authorize cs50, then close the tab.\nLog into cs50.dev using your GitHub account to access your very own “codespace.”\nOnce your codespace has loaded, close any Welcome tabs that might have opened by default.\nRun update50 in your codespace’s terminal window to ensure that your codespace is up-to-date and, if prompted, click Rebuild now.\nComplete Hello, World.\nSubmit Hello, It’s Me.\nSubmit one of:\n\nthis version of Mario, if feeling less comfortable\nthis version of Mario, if feeling more comfortable\n\nSubmit one of:\n\nCash, if feeling less comfortable\nCredit, if feeling more comfortable\n\n\nIf you submit both versions of Mario, we’ll record the higher of your two scores. If you submit both Cash and Credit, we’ll record the higher of your two scores.",
    "crumbs": [
      "Homework",
      "Homework 02 🟢"
    ]
  },
  {
    "objectID": "homework/hw_2.html#when-to-do-it",
    "href": "homework/hw_2.html#when-to-do-it",
    "title": "Homework week 2",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 02 🟢"
    ]
  },
  {
    "objectID": "homework/hw_2.html#advice",
    "href": "homework/hw_2.html#advice",
    "title": "Homework week 2",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from class via Week 1’s source code.\nSee CS50’s style guide for C for tips on how to improve your code’s style.\nIf you see any errors when compiling your code with make, focus first on fixing the very first error you see, scrolling up as needed. If unsure what it means, try asking help50 for help. For instance, if trying to compile hello, and\nmake hello\n\nis yielding errors, try running\nhelp50 make hello\n\ninstead!",
    "crumbs": [
      "Homework",
      "Homework 02 🟢"
    ]
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html",
    "href": "homework/hw_2/2.5_cash.html",
    "title": "Cash",
    "section": "",
    "text": "Week 1, Problem 5\nSource: https://cs50.harvard.edu/x/psets/1/cash/"
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#problem-to-solve",
    "href": "homework/hw_2/2.5_cash.html#problem-to-solve",
    "title": "Cash",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nSuppose you work at a store and a customer gives you $1.00 (100 cents) for candy that costs $0.50 (50 cents). You’ll need to pay them their “change,” the amount leftover after paying for the cost of the candy. When making change, odds are you want to minimize the number of coins you’re dispensing for each customer, lest you run out (or annoy the customer!). In a file called cash.c in a folder called cash, implement a program in C that prints the minimum coins needed to make the given amount of change, in cents, as in the below:\nChange owed: 25\n1\n\nBut prompt the user for an int greater than 0, so that the program works for any amount of change:\nChange owed: 70\n4\n\nRe-prompt the user, again and again as needed, if their input is not greater than or equal to 0 (or if their input isn’t an int at all!)."
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#demo",
    "href": "homework/hw_2/2.5_cash.html#demo",
    "title": "Cash",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#greedy-algorithms",
    "href": "homework/hw_2/2.5_cash.html#greedy-algorithms",
    "title": "Cash",
    "section": "Greedy Algorithms",
    "text": "Greedy Algorithms\nFortunately, computer science has given cashiers everywhere ways to minimize numbers of coins due: greedy algorithms.\nAccording to the National Institute of Standards and Technology (NIST), a greedy algorithm is one “that always takes the best immediate, or local, solution while finding an answer. Greedy algorithms find the overall, or globally, optimal solution for some optimization problems, but may find less-than-optimal solutions for some instances of other problems.”\nWhat’s all that mean? Well, suppose that a cashier owes a customer some change and in that cashier’s drawer are quarters (25¢), dimes (10¢), nickels (5¢), and pennies (1¢). The problem to be solved is to decide which coins and how many of each to hand to the customer. Think of a “greedy” cashier as one who wants to take the biggest bite out of this problem as possible with each coin they take out of the drawer. For instance, if some customer is owed 41¢, the biggest first (i.e., best immediate, or local) bite that can be taken is 25¢. (That bite is “best” inasmuch as it gets us closer to 0¢ faster than any other coin would.) Note that a bite of this size would whittle what was a 41¢ problem down to a 16¢ problem, since 41 - 25 = 16. That is, the remainder is a similar but smaller problem. Needless to say, another 25¢ bite would be too big (assuming the cashier prefers not to lose money), and so our greedy cashier would move on to a bite of size 10¢, leaving him or her with a 6¢ problem. At that point, greed calls for one 5¢ bite followed by one 1¢ bite, at which point the problem is solved. The customer receives one quarter, one dime, one nickel, and one penny: four coins in total.\nIt turns out that this greedy approach (i.e., algorithm) is not only locally optimal but also globally so for America’s currency (and also the European Union’s). That is, so long as a cashier has enough of each coin, this largest-to-smallest approach will yield the fewest coins possible. How few? Well, you tell us!"
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#advice",
    "href": "homework/hw_2/2.5_cash.html#advice",
    "title": "Cash",
    "section": "Advice",
    "text": "Advice\nClick the below toggles to read some advice!\nWrite some code that you know will compile\nEven though this program won’t do anything, it should at least compile with make!\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n\n}\n\nNotice that you’ve now included cs50.h and stdio.h, two “header files” that will give you access to functions that might help you solve this problem.\nWrite some pseudocode before writing more code\nIf unsure how to solve the problem itself, break it down into smaller problems that you can probably solve first. For instance, this problem is really only a handful of problems:\n\nPrompt the user for change owed, in cents.\nCalculate how many quarters you should give customer. Subtract the value of those quarters from cents.\nCalculate how many dimes you should give customer. Subtract the value of those dimes from remaining cents.\nCalculate how many nickels you should give customer. Subtract the value of those nickels from remaining cents.\nCalculate how many pennies you should give customer. Subtract the value of those pennies from remaining cents.\nSum the number of quarters, dimes, nickels, and pennies used.\nPrint that sum.\n\nThis is the greedy algorithm you can use to solve this problem, so let’s write some pseudcode as comments to remind you to do just that:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt the user for change owed, in cents\n\n    // Calculate how many quarters you should give customer\n    // Subtract the value of those quarters from cents\n\n    // Calculate how many dimes you should give customer\n    // Subtract the value of those dimes from remaining cents\n\n    // Calculate how many nickels you should give customer\n    // Subtract the value of those nickels from remaining cents\n\n    // Calculate how many pennies you should give customer\n    // Subtract the value of those pennies from remaining cents\n\n    // Sum the number of quarters, dimes, nickels, and pennies used\n    // Print that sum\n}\n\nConvert the pseudocode to code\nFirst, consider how you might prompt the user for the cents they are owed. Recall that a do while loop is helpful when you want to do something at least once, and possibly again and again, as in the below:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt the user for change owed, in cents\n    int cents;\n    do\n    {\n        cents = get_int(\"Change owed: \");\n    }\n    while (cents &lt; 0);\n}\n\nIt’s wise to stop here and make your program. Test to be sure your program compiles, and that it reprompts you if you enter less than 0 cents (or if you enter an input like “cat”).\nNext, consider how to calculate how many quarters you should give the customer. Since we’re using a greedy algorithm, this question becomes “what’s the greatest number of quarters could you give them?”. You could write a solution to this problem in your main function. But, it might clear up your thinking to write a new function: one called calculate_quarters. That way you can better focus on the logic to calculate quarters. Later, you can integrate this function into your larger solution.\nint calculate_quarters(int cents)\n{\n    // Calculate how many quarters you should give customer\n}\n\nNotice that this function is indeed named calculate_quarters. Per int cents in parentheses, it takes an int called cents as input. And, per the int in front of its name, it should also “return” an int. That is, the output of this function is an integer: the number of quarters that fit into cents. If curious about this idea, recall there are several sample programs in Week 1’s Source Code that illustrate how functions can return a value.\nNow consider this way of implementing calculate_quarters by adding to the number of quarters until we’ve run out of cents to convert to quarters:\nint calculate_quarters(int cents)\n{\n    // Calculate how many quarters you should give customer\n    int quarters = 0;\n    while (cents &gt;= 25)\n    {\n        quarters++;\n        cents = cents - 25;\n    }\n    return quarters;\n}\n\nGranted, there is at least one simpler way to solve this calculate_quarters problem. But we’ll leave that up to you to figure out!\nWith calculate_quarters functioning as intended, you can integrate this function into your program. Take care to “declare” the function’s “signature” (i.e., int calculate_quarters(int cents)) above your main function, so you can indeed use calculate_quarters there while defining it later, below main.\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint calculate_quarters(int cents);\n\nint main(void)\n{\n    // Prompt the user for change owed, in cents\n    int cents;\n    do\n    {\n        cents = get_int(\"Change owed: \");\n    }\n    while (cents &lt; 0);\n\n    // Calculate how many quarters you should give customer\n    int quarters = calculate_quarters(cents);\n\n    // Subtract the value of those quarters from cents\n    cents = cents - (quarters * 25);\n}\n\nint calculate_quarters(int cents)\n{\n    // Calculate how many quarters you should give customer\n    int quarters = 0;\n    while (cents &gt;= 25)\n    {\n        quarters++;\n        cents = cents - 25;\n    }\n    return quarters;\n}\n\nA few problems down, and a few more to go! Notice a pattern you could re-use here?"
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#how-to-test",
    "href": "homework/hw_2/2.5_cash.html#how-to-test",
    "title": "Cash",
    "section": "How to Test",
    "text": "How to Test\nFor this program, try testing your code manually. It’s good practice:\n\nIf you input -1, does your program prompt you again?\nIf you input 0, does your program output 0?\nIf you input 1, does your program output 1 (i.e., one penny)?\nIf you input 4, does your program output 4 (i.e., four pennies)?\nIf you input 5, does your program output 1 (i.e., one nickel)?\nIf you input 24, does your program output 6 (i.e., two dimes and four pennies)?\nIf you input 25, does your program output 1 (i.e., one quarter)?\nIf you input 26, does your program output 2 (i.e., one quarter and one penny)?\nIf you input 99, does your program output 9 (i.e., three quarters, two dimes, and four pennies)?\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/cash\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 cash.c"
  },
  {
    "objectID": "homework/hw_2/2.5_cash.html#how-to-submit",
    "href": "homework/hw_2/2.5_cash.html#how-to-submit",
    "title": "Cash",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/cash"
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html",
    "href": "homework/hw_2/2.3_this_version_of_mario.html",
    "title": "this version of Mario (less)",
    "section": "",
    "text": "Week 1, Problem 3\nSource: https://cs50.harvard.edu/x/psets/1/mario/less/"
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#problem-to-solve",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#problem-to-solve",
    "title": "this version of Mario (less)",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nToward the end of World 1-1 in Nintendo’s Super Mario Bros., Mario must ascend right-aligned pyramid of bricks, as in the below.\n\n\n\nscreenshot of Mario jumping up a right-aligned pyramid\n\n\nIn a file called mario.c in a folder called mario-less, implement a program in C that recreates that pyramid, using hashes (#) for bricks, as in the below:\n       #\n      ##\n     ###\n    ####\n   #####\n  ######\n #######\n########\n\nBut prompt the user for an int for the pyramid’s actual height, so that the program can also output shorter pyramids like the below:\n  #\n ##\n###\n\nRe-prompt the user, again and again as needed, if their input is not greater than 0 or not an int altogether.\nHints\n\nRecall that you can get an int from a user with get_int, which is declared in cs50.h.\nRecall that you can print a string with printf, which is declared in stdio.h."
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#demo",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#demo",
    "title": "this version of Mario (less)",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#advice",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#advice",
    "title": "this version of Mario (less)",
    "section": "Advice",
    "text": "Advice\nClick the below toggles to read some advice!\nWrite some code that you know will compile\nEven though this program won’t do anything, it should at least compile with make!\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n\n}\n\nWrite some pseudocode before writing more code\nIf unsure how to solve the problem itself, break it down into smaller problems that you can probably solve first. For instance, this problem is really two problems:\n\nPrompt the user for the pyramid’s height\nPrint a pyramid of that height\n\nSo write some pseudcode as comments that remind you to do just that:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n\n    // Print a pyramid of that height\n}\n\nConvert the pseudocode to code\nFirst, consider how you might prompt the user for the pyramid’s height. Recall that a do while loop is helpful when you want to do something at least once, and possibly again and again, as in the below:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n}\n\nSecond, consider how you might print a pyramid of that height, from top to bottom. Notice how the first row should have one brick, the second row should have two bricks, and so on. Odds are you’ll want a loop, as in the below, even if not (yet!) sure what to put in that loop. So add some more pseudocode as a comment for now:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n    for (int i = 0; i &lt; n; i++)\n    {\n        // Print row of bricks\n    }\n}\n\nHow to print that row of bricks? Well, wouldn’t it be nice if there were a function called print_row that could do just that? Let’s suppose that there is:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_row(int bricks);\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n    for (int i = 0; i &lt; n; i++)\n    {\n        // Print row of bricks\n    }\n}\n\nvoid print_row(int bricks)\n{\n    // Print row of bricks\n}\n\nWe could then call that function from main, as in the below:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_row(int bricks);\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n    for (int i = 0; i &lt; n; i++)\n    {\n        // Print row of bricks\n        print_row(i + 1);\n    }\n}\n\nvoid print_row(int bricks)\n{\n    // Print row of bricks\n}\n\nWhy i + 1, though?\nLet’s now implement print_row:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_row(int bricks);\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n    for (int i = 0; i &lt; n; i++)\n    {\n        // Print row of bricks\n        print_row(i + 1);\n    }\n}\n\nvoid print_row(int bricks)\n{\n    for (int i = 0; i &lt; bricks; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nWhy the \\n at the end, though?\nUnfortunately, this code prints a left-aligned pyramid, but you need a right-aligned one! Perhaps we should print some blank spaces before some of the bricks, to move them to the right? Let’s change print_row as follows so that it can print both:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_row(int spaces, int bricks);\n\nint main(void)\n{\n    // Prompt the user for the pyramid's height\n    int n;\n    do\n    {\n        n = get_int(\"Height: \");\n    }\n    while (n &lt; 1);\n\n    // Print a pyramid of that height\n    for (int i = 0; i &lt; n; i++)\n    {\n        // Print row of bricks\n    }\n}\n\nvoid print_row(int spaces, int bricks)\n{\n    // Print spaces\n\n    // Print bricks\n}\n\nSome pseudocode now remains in both main and print_row, so that we leave to you!\nAnd consider whether you could factor out some of the code in main to a get_height function, too, that returns the int you need!"
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#walkthrough",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#walkthrough",
    "title": "this version of Mario (less)",
    "section": "Walkthrough",
    "text": "Walkthrough\nNote this walkthrough specifies your program should prompt the user for a pyramid’s height and re-prompt if the user inputs a value less than 1 or greater than 8. The specification only requires you to re-prompt the user if they input a value less than 1."
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#how-to-test",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#how-to-test",
    "title": "this version of Mario (less)",
    "section": "How to Test",
    "text": "How to Test\nDoes your code work as prescribed when you input:\n\n-1 or other negative numbers?\n0?\n1 or other positive numbers?\nletters or words?\nno input at all, when you only hit Enter?\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/mario/less\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 mario.c"
  },
  {
    "objectID": "homework/hw_2/2.3_this_version_of_mario.html#how-to-submit",
    "href": "homework/hw_2/2.3_this_version_of_mario.html#how-to-submit",
    "title": "this version of Mario (less)",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/mario/less"
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html",
    "href": "homework/hw_2/2.1_hello_world.html",
    "title": "Hello, World",
    "section": "",
    "text": "Week 1, Problem 1\nSource: https://cs50.harvard.edu/x/psets/1/world/"
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html#problem-to-solve",
    "href": "homework/hw_2/2.1_hello_world.html#problem-to-solve",
    "title": "Hello, World",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nThanks to Professor Brian Kernighan (who taught CS50 when David took it!), “hello, world” has been implemented in hundreds of languages. Let’s add your implementation to the list!\nIn a file called hello.c, in a folder called world, implement a program in C that prints hello, world\\n, and that’s it!\nHint\nHere’s the actual code you should write! (Quite the hint, huh?) Best to type it yourself, though, rather than copy/paste, so that you start to develop some “muscle memory” for writing code.\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}"
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html#demo",
    "href": "homework/hw_2/2.1_hello_world.html#demo",
    "title": "Hello, World",
    "section": "Demo",
    "text": "Demo\nHere’s a demo of what should happen when you compile and execute your program."
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html#how-to-begin",
    "href": "homework/hw_2/2.1_hello_world.html#how-to-begin",
    "title": "Hello, World",
    "section": "How to Begin",
    "text": "How to Begin\nOpen VS Code.\nStart by clicking inside your terminal window, then execute cd by itself. You should find that its “prompt” resembles the below.\n$\n\nNext execute\nmkdir world\n\nto make a folder called world in your codespace.\nThen execute\ncd world\n\nto change directories into that folder. You should now see your terminal prompt as world/ $. You can now execute\ncode hello.c\n\nto create a file called hello.c in which you can write your code."
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html#how-to-test",
    "href": "homework/hw_2/2.1_hello_world.html#how-to-test",
    "title": "Hello, World",
    "section": "How to Test",
    "text": "How to Test\nRecall that you can compile hello.c with:\nmake hello\n\nIf you don’t see an error message, it compiled successfully! You can confirm as much with\nls\n\nwhich should list not only hello.c (which is source code) but also hello (which is machine code).\nIf you do see an error message, try to fix your code and try to compile it again. If you don’t understand the error message, though, try executing\nhelp50 make hello\n\nfor advice.\nOnce your code compiles successfully, you can execute your program with:\n./hello\n\n\nCorrectness\nExecute the below to evaluate the correctness of your code using check50, a command-line program that will output happy faces whenever your code passes CS50’s automated tests and sad faces whenever it doesn’t!\ncheck50 cs50/problems/2025/x/world\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50, a command-line program that will output additions (in green) and deletions (in red) that you should make to your program in order to improve its style. If you have trouble seeing those colors, style50 supports other modes too!\nstyle50 hello.c"
  },
  {
    "objectID": "homework/hw_2/2.1_hello_world.html#how-to-submit",
    "href": "homework/hw_2/2.1_hello_world.html#how-to-submit",
    "title": "Hello, World",
    "section": "How to Submit",
    "text": "How to Submit\nNo need to submit this one!"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html",
    "href": "homework/hw_10/10.2_finance.html",
    "title": "Finance",
    "section": "",
    "text": "Week 9, Problem 2\nSource: https://cs50.harvard.edu/x/psets/9/finance/"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#background",
    "href": "homework/hw_10/10.2_finance.html#background",
    "title": "Finance",
    "section": "Background",
    "text": "Background\nIf you’re not quite sure what it means to buy and sell stocks (i.e., shares of a company), head here for a tutorial.\nYou’re about to implement C$50 Finance, a web app via which you can manage portfolios of stocks. Not only will this tool allow you to check real stocks’ prices and portfolios’ values, it will also let you buy (okay, “buy”) and sell (okay, “sell”) stocks by querying for stocks’ prices.\nIndeed, there are tools (one is known as IEX) that let you download stock quotes via their API (application programming interface) using URLs like https://api.iex.cloud/v1/data/core/quote/nflx?token=API_KEY. Notice how Netflix’s symbol (NFLX) is embedded in this URL; that’s how IEX knows whose data to return. That link won’t actually return any data because IEX requires you to use an API key, but if it did, you’d see a response in JSON (JavaScript Object Notation) format like this:\n{\n  \"avgTotalVolume\":6787785,\n  \"calculationPrice\":\"tops\",\n  \"change\":1.46,\n  \"changePercent\":0.00336,\n  \"close\":null,\n  \"closeSource\":\"official\",\n  \"closeTime\":null,\n  \"companyName\":\"Netflix Inc.\",\n  \"currency\":\"USD\",\n  \"delayedPrice\":null,\n  \"delayedPriceTime\":null,\n  \"extendedChange\":null,\n  \"extendedChangePercent\":null,\n  \"extendedPrice\":null,\n  \"extendedPriceTime\":null,\n  \"high\":null,\n  \"highSource\":\"IEX real time price\",\n  \"highTime\":1699626600947,\n  \"iexAskPrice\":460.87,\n  \"iexAskSize\":123,\n  \"iexBidPrice\":435,\n  \"iexBidSize\":100,\n  \"iexClose\":436.61,\n  \"iexCloseTime\":1699626704609,\n  \"iexLastUpdated\":1699626704609,\n  \"iexMarketPercent\":0.00864679844447232,\n  \"iexOpen\":437.37,\n  \"iexOpenTime\":1699626600859,\n  \"iexRealtimePrice\":436.61,\n  \"iexRealtimeSize\":5,\n  \"iexVolume\":965,\n  \"lastTradeTime\":1699626704609,\n  \"latestPrice\":436.61,\n  \"latestSource\":\"IEX real time price\",\n  \"latestTime\":\"9:31:44 AM\",\n  \"latestUpdate\":1699626704609,\n  \"latestVolume\":null,\n  \"low\":null,\n  \"lowSource\":\"IEX real time price\",\n  \"lowTime\":1699626634509,\n  \"marketCap\":192892118443,\n  \"oddLotDelayedPrice\":null,\n  \"oddLotDelayedPriceTime\":null,\n  \"open\":null,\n  \"openTime\":null,\n  \"openSource\":\"official\",\n  \"peRatio\":43.57,\n  \"previousClose\":435.15,\n  \"previousVolume\":2735507,\n  \"primaryExchange\":\"NASDAQ\",\n  \"symbol\":\"NFLX\",\n  \"volume\":null,\n  \"week52High\":485,\n  \"week52Low\":271.56,\n  \"ytdChange\":0.4790450244167119,\n  \"isUSMarketOpen\":true\n}\n\nNotice how, between the curly braces, there’s a comma-separated list of key-value pairs, with a colon separating each key from its value. We’re going to be doing something very similar with our own stock database API.\nLet’s turn our attention now to getting this problem’s distribution code!"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#getting-started",
    "href": "homework/hw_10/10.2_finance.html#getting-started",
    "title": "Finance",
    "section": "Getting Started",
    "text": "Getting Started\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/9/finance.zip\n\nin order to download a ZIP called finance.zip into your codespace.\nThen execute\nunzip finance.zip\n\nto create a folder called finance. You no longer need the ZIP file, so you can execute\nrm finance.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd finance\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nfinance/ $\n\nExecute ls by itself, and you should see a few files and folders:\napp.py  finance.db  helpers.py  requirements.txt  static/  templates/\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!\n\nRunning\nStart Flask’s built-in web server (within finance/):\n$ flask run\n\nVisit the URL outputted by flask to see the distribution code in action. You won’t be able to log in or register, though, just yet!\nWithin finance/, run sqlite3 finance.db to open finance.db with sqlite3. If you run .schema in the SQLite prompt, notice how finance.db comes with a table called users. Take a look at its structure (i.e., schema). Notice how, by default, new users will receive $10,000 in cash. But if you run SELECT * FROM users;, there aren’t (yet!) any users (i.e., rows) therein to browse.\nAnother way to view finance.db is with a program called phpLiteAdmin. Click on finance.db in your codespace’s file browser, then click the link shown underneath the text “Please visit the following link to authorize GitHub Preview”. You should see information about the database itself, as well as a table, users, just like you saw in the sqlite3 prompt with .schema.\n\n\nUnderstanding\n\napp.py\nOpen up app.py. Atop the file are a bunch of imports, among them CS50’s SQL module and a few helper functions. More on those soon.\nAfter configuring Flask, notice how this file disables caching of responses (provided you’re in debugging mode, which you are by default in your code50 codespace), lest you make a change to some file but your browser not notice. Notice next how it configures Jinja with a custom “filter,” usd, a function (defined in helpers.py) that will make it easier to format values as US dollars (USD). It then further configures Flask to store sessions on the local filesystem (i.e., disk) as opposed to storing them inside of (digitally signed) cookies, which is Flask’s default. The file then configures CS50’s SQL module to use finance.db.\nThereafter are a whole bunch of routes, only two of which are fully implemented: login and logout. Read through the implementation of login first. Notice how it uses db.execute (from CS50’s library) to query finance.db. And notice how it uses check_password_hash to compare hashes of users’ passwords. Also notice how login “remembers” that a user is logged in by storing his or her user_id, an INTEGER, in session. That way, any of this file’s routes can check which user, if any, is logged in. Finally, notice how once the user has successfully logged in, login will redirect to \"/\", taking the user to their home page. Meanwhile, notice how logout simply clears session, effectively logging a user out.\nNotice how most routes are “decorated” with @login_required (a function defined in helpers.py too). That decorator ensures that, if a user tries to visit any of those routes, he or she will first be redirected to login so as to log in.\nNotice too how most routes support GET and POST. Even so, most of them (for now!) simply return an “apology,” since they’re not yet implemented.\n\n\nhelpers.py\nNext take a look at helpers.py. Ah, there’s the implementation of apology. Notice how it ultimately renders a template, apology.html. It also happens to define within itself another function, escape, that it simply uses to replace special characters in apologies. By defining escape inside of apology, we’ve scoped the former to the latter alone; no other functions will be able (or need) to call it.\nNext in the file is login_required. No worries if this one’s a bit cryptic, but if you’ve ever wondered how a function can return another function, here’s an example!\nThereafter is lookup, a function that, given a symbol (e.g., NFLX), returns a stock quote for a company in the form of a dict with three keys: name, whose value is a str; price, whose value is a float; and symbol, whose value is a str, a canonicalized (uppercase) version of a stock’s symbol, irrespective of how that symbol was capitalized when passed into lookup. Note that these are not “real-time” prices but do change over time, just like in the real world!\nLast in the file is usd, a short function that simply formats a float as USD (e.g., 1234.56 is formatted as $1,234.56).\n\n\nrequirements.txt\nNext take a quick look at requirements.txt. That file simply prescribes the packages on which this app will depend.\n\n\nstatic/\nGlance too at static/, inside of which is styles.css. That’s where some initial CSS lives. You’re welcome to alter it as you see fit.\n\n\ntemplates/\nNow look in templates/. In login.html is, essentially, just an HTML form, stylized with Bootstrap. In apology.html, meanwhile, is a template for an apology. Recall that apology in helpers.py took two arguments: message, which was passed to render_template as the value of bottom, and, optionally, code, which was passed to render_template as the value of top. Notice in apology.html how those values are ultimately used! And here’s why 0:-)\nLast up is layout.html. It’s a bit bigger than usual, but that’s mostly because it comes with a fancy, mobile-friendly “navbar” (navigation bar), also based on Bootstrap. Notice how it defines a block, main, inside of which templates (including apology.html and login.html) shall go. It also includes support for Flask’s message flashing so that you can relay messages from one route to another for the user to see."
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#specification",
    "href": "homework/hw_10/10.2_finance.html#specification",
    "title": "Finance",
    "section": "Specification",
    "text": "Specification\n\nregister\nComplete the implementation of register in such a way that it allows a user to register for an account via a form.\n\nRequire that a user input a username, implemented as a text field whose name is username. Render an apology if the user’s input is blank or the username already exists.\n\nNote that cs50.SQL.execute will raise a ValueError exception if you try to INSERT a duplicate username because we have created a UNIQUE INDEX on users.username. Be sure, then, to use try and except to determine if the username already exists.\n\nRequire that a user input a password, implemented as a text field whose name is password, and then that same password again, implemented as a text field whose name is confirmation. Render an apology if either input is blank or the passwords do not match.\nSubmit the user’s input via POST to /register.\nINSERT the new user into users, storing a hash of the user’s password, not the password itself. Hash the user’s password with generate_password_hash Odds are you’ll want to create a new template (e.g., register.html) that’s quite similar to login.html.\n\nOnce you’ve implemented register correctly, you should be able to register for an account and log in (since login and logout already work)! And you should be able to see your rows via phpLiteAdmin or sqlite3.\n\n\nquote\nComplete the implementation of quote in such a way that it allows a user to look up a stock’s current price.\n\nRequire that a user input a stock’s symbol, implemented as a text field whose name is symbol.\nSubmit the user’s input via POST to /quote.\nOdds are you’ll want to create two new templates (e.g., quote.html and quoted.html). When a user visits /quote via GET, render one of those templates, inside of which should be an HTML form that submits to /quote via POST. In response to a POST, quote can render that second template, embedding within it one or more values from lookup.\n\n\n\nbuy\nComplete the implementation of buy in such a way that it enables a user to buy stocks.\n\nRequire that a user input a stock’s symbol, implemented as a text field whose name is symbol. Render an apology if the input is blank or the symbol does not exist (as per the return value of lookup).\nRequire that a user input a number of shares, implemented as a text field whose name is shares. Render an apology if the input is not a positive integer.\nSubmit the user’s input via POST to /buy.\nUpon completion, redirect the user to the home page.\nOdds are you’ll want to call lookup to look up a stock’s current price.\nOdds are you’ll want to SELECT how much cash the user currently has in users.\nAdd one or more new tables to finance.db via which to keep track of the purchase. Store enough information so that you know who bought what at what price and when.\n\nUse appropriate SQLite types.\nDefine UNIQUE indexes on any fields that should be unique.\nDefine (non-UNIQUE) indexes on any fields via which you will search (as via SELECT with WHERE).\n\nRender an apology, without completing a purchase, if the user cannot afford the number of shares at the current price.\nYou don’t need to worry about race conditions (or use transactions).\n\nOnce you’ve implemented buy correctly, you should be able to see users’ purchases in your new table(s) via phpLiteAdmin or sqlite3.\n\n\nindex\nComplete the implementation of index in such a way that it displays an HTML table summarizing, for the user currently logged in, which stocks the user owns, the numbers of shares owned, the current price of each stock, and the total value of each holding (i.e., shares times price). Also display the user’s current cash balance along with a grand total (i.e., stocks’ total value plus cash).\n\nOdds are you’ll want to execute multiple SELECTs. Depending on how you implement your table(s), you might find GROUP BY, HAVING, SUM, and/or WHERE of interest.\nOdds are you’ll want to call lookup for each stock.\n\n\n\nsell\nComplete the implementation of sell in such a way that it enables a user to sell shares of a stock (that he or she owns).\n\nRequire that a user input a stock’s symbol, implemented as a select menu whose name is symbol. Render an apology if the user fails to select a stock or if (somehow, once submitted) the user does not own any shares of that stock.\nRequire that a user input a number of shares, implemented as a text field whose name is shares. Render an apology if the input is not a positive integer or if the user does not own that many shares of the stock.\nSubmit the user’s input via POST to /sell.\nUpon completion, redirect the user to the home page.\nYou don’t need to worry about race conditions (or use transactions).\n\n\n\nhistory\nComplete the implementation of history in such a way that it displays an HTML table summarizing all of a user’s transactions ever, listing row by row each and every buy and every sell.\n\nFor each row, make clear whether a stock was bought or sold and include the stock’s symbol, the (purchase or sale) price, the number of shares bought or sold, and the date and time at which the transaction occurred.\nYou might need to alter the table you created for buy or supplement it with an additional table. Try to minimize redundancies.\n\n\n\npersonal touch\nImplement at least one personal touch of your choice:\n\nAllow users to change their passwords.\nAllow users to add additional cash to their account.\nAllow users to buy more shares or sell shares of stocks they already own via index itself, without having to type stocks’ symbols manually.\nImplement some other feature of comparable scope."
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#walkthrough",
    "href": "homework/hw_10/10.2_finance.html#walkthrough",
    "title": "Finance",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#testing",
    "href": "homework/hw_10/10.2_finance.html#testing",
    "title": "Finance",
    "section": "Testing",
    "text": "Testing\nBe sure to test your web app manually, as by\n\nregistering a new user and verifying that their portfolio page loads with the correct information,\nrequesting a quote using a valid stock symbol,\npurchasing one stock multiple times, verifying that the portfolio displays correct totals,\nselling all or some of a stock, again verifying the portfolio, and\nverifying that your history page shows all transactions for your logged in user.\n\nAlso test some unexpected usage, as by\n\ninputting alphabetical strings into forms when only numbers are expected,\ninputting zero or negative numbers into forms when only positive numbers are expected,\ninputting floating-point values into forms when only integers are expected,\ntrying to spend more cash than a user has,\ntrying to sell more shares than a user has,\ninputting an invalid stock symbol, and\nincluding potentially dangerous characters like ' and ; in SQL queries.\n\nYou can also check the validity of your HTML by clicking the I ♥ VALIDATOR button in the footer of each of your pages, which will POST your HTML to validator.w3.org.\nOnce satisfied, to test your code with check50, execute the below.\ncheck50 cs50/problems/2025/x/finance\n\nBe aware that check50 will test your entire program as a whole. If you run it before completing all required functions, it may report errors on functions that are actually correct but depend on other functions."
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#style",
    "href": "homework/hw_10/10.2_finance.html#style",
    "title": "Finance",
    "section": "Style",
    "text": "Style\nstyle50 app.py"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#staffs-solution",
    "href": "homework/hw_10/10.2_finance.html#staffs-solution",
    "title": "Finance",
    "section": "Staff’s Solution",
    "text": "Staff’s Solution\nYou’re welcome to stylize your own app differently, but here’s what the staff’s solution looks like!\nhttps://finance.cs50.net/\nFeel free to register for an account and play around. Do not use a password that you use on other sites.\nIt is reasonable to look at the staff’s HTML and CSS."
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#hints",
    "href": "homework/hw_10/10.2_finance.html#hints",
    "title": "Finance",
    "section": "Hints",
    "text": "Hints\n\nTo format a value as a US dollar value (with cents listed to two decimal places), you can use the usd filter in your Jinja templates (printing values as { value | usd } instead of { value }.\nWithin cs50.SQL is an execute method whose first argument should be a str of SQL. If that str contains question mark parameters to which values should be bound, those values can be provided as additional named parameters to execute. See the implementation of login for one such example. The return value of execute is as follows:\n\nIf str is a SELECT, then execute returns a list of zero or more dict objects, inside of which are keys and values representing a table’s fields and cells, respectively.\nIf str is an INSERT, and the table into which data was inserted contains an autoincrementing PRIMARY KEY, then execute returns the value of the newly inserted row’s primary key.\nIf str is a DELETE or an UPDATE, then execute returns the number of rows deleted or updated by str.\n\nRecall that cs50.SQL will log to your terminal window any queries that you execute via execute (so that you can confirm whether they’re as intended).\nBe sure to use question mark-bound parameters (i.e., a paramstyle of named) when calling CS50’s execute method, à la WHERE ?. Do not use f-strings, format or + (i.e., concatenation), lest you risk a SQL injection attack.\nIf (and only if) already comfortable with SQL, you’re welcome to use SQLAlchemy Core or Flask-SQLAlchemy (i.e., SQLAlchemy ORM) instead of cs50.SQL.\nRecall that while you can validate values entered in an HTML form, savvy users may bypass those. Be sure that you are validating values server-side as well. In that same vein, if you’ve chosen to use Javascript in your solution, be sure that your application still works if your user has disabled Javascript.\nYou’re welcome to add additional static files to static/.\nOdds are you’ll want to consult Jinja’s documentation when implementing your templates.\nIt is reasonable to ask others to try out (and try to trigger errors in) your site.\nYou’re welcome to alter the aesthetics of the sites, as via\n\nbootswatch.com,\ngetbootstrap.com/docs/5.1/content,\ngetbootstrap.com/docs/5.1/components, and/or\nmemegen.link.\n\nYou may find Flask’s documentation and Jinja’s documentation helpful!"
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#faqs",
    "href": "homework/hw_10/10.2_finance.html#faqs",
    "title": "Finance",
    "section": "FAQs",
    "text": "FAQs\n\nImportError: No module named ‘application’\nBy default, flask looks for a file called app.py in your current working directory (because we’ve configured the value of FLASK_APP, an environment variable, to be app.py). If seeing this error, odds are you’ve run flask in the wrong directory!\n\n\nOSError: [Errno 98] Address already in use\nIf, upon running flask, you see this error, odds are you (still) have flask running in another tab. Be sure to kill that other process, as with ctrl-c, before starting flask again. If you haven’t any such other tab, execute fuser -k 8080/tcp to kill any processes that are (still) listening on TCP port 8080."
  },
  {
    "objectID": "homework/hw_10/10.2_finance.html#how-to-submit",
    "href": "homework/hw_10/10.2_finance.html#how-to-submit",
    "title": "Finance",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/finance\n\n\nWhy does my submission pass check50, but shows “No results” in my Gradebook after running submit50?\nIn some cases, submit50 may not grade the assignment due to (1) inconsistent formatting in your app.py file, and/or (2) additional, unneeded files being submitted with the problem set. To fix these issues, run style50 app.py in the finance folder. Address any issues that are revealed. Next, examine the contents of your finance folder. Delete extraneous files, such as flask sessions or other files that are not part of your implementation of the problem set. Further, run check50 again to ensure your submission still functions. Finally, run the submit50 command above again. Your result will appear in your Gradebook within a few minutes.\nPlease note that if there is a numerical score next to your finance submission in the submissions area of your Gradebook, the procedure discussed above does not apply to you. Likely, you have not fully addressed the requirements of the problem set and should rely upon check50 for clues as to what work remains."
  },
  {
    "objectID": "homework/hw_1.html",
    "href": "homework/hw_1.html",
    "title": "Homework week 1",
    "section": "",
    "text": "Complete and submit Starting from Scratch.",
    "crumbs": [
      "Homework",
      "Homework 01 🐈"
    ]
  },
  {
    "objectID": "homework/hw_1.html#what-to-do",
    "href": "homework/hw_1.html#what-to-do",
    "title": "Homework week 1",
    "section": "",
    "text": "Complete and submit Starting from Scratch.",
    "crumbs": [
      "Homework",
      "Homework 01 🐈"
    ]
  },
  {
    "objectID": "homework/hw_1.html#advice",
    "href": "homework/hw_1.html#advice",
    "title": "Homework week 1",
    "section": "Advice",
    "text": "Advice\nIf you have trouble running Scratch in your browser, use Chrome; consider downloading and installing the latest version of Chrome, if you don’t have it already.\nHere are some examples from lecture if you’d like to review! To see the source code of each, click See inside.",
    "crumbs": [
      "Homework",
      "Homework 01 🐈"
    ]
  },
  {
    "objectID": "homework/hw_1.html#academic-integrity",
    "href": "homework/hw_1.html#academic-integrity",
    "title": "Homework week 1",
    "section": "Academic integrity",
    "text": "Academic integrity\nCollaboration on problem sets is not permitted except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. AI use to generate any code or text related to assignments is not permitted.\nThe staff conduct audits of submissions to Computing Technology. Students found to be in violation of this policy will be referred for Academic Misconduct.",
    "crumbs": [
      "Homework",
      "Homework 01 🐈"
    ]
  },
  {
    "objectID": "homework/hw_1/1.1_starting_from_scratch.html",
    "href": "homework/hw_1/1.1_starting_from_scratch.html",
    "title": "Starting from Scratch",
    "section": "",
    "text": "It’s time to choose your own adventure! Your assignment, quite simply, is to implement in Scratch, at scratch.mit.edu, any project of your choice, be it an interactive story, game, animation, or anything else, subject only to the following requirements:\n\nYour project must use at least two sprites, at least one of which must not be a cat.\nYour project must have at least three scripts total (i.e., not necessarily three per sprite).\nYour project must use at least one conditional, at least one loop, and at least one variable.\nYour project must use at least one custom block that you have made yourself (via Make a Block), which must take at least one input.\nYour project should be more complex than most of those demonstrated in lecture (many of which, though instructive, were quite short) but it can be less complex than Oscartime and Ivy’s Hardest Game.\n\nTo meet these requirements, your project should probably use a few dozen puzzle pieces overall. And your code should ideally be not only correct but also well-designed. If one of your scripts is getting a bit long, try to break it up into multiple scripts (each of which does something specific). And try to leverage “abstraction” where possible: if you can imagine giving a descriptive name to a sequence of blocks (e.g., meow), those could probably be moved to a custom block!\nIf you’d like some inspiration from past students, here are just a few:\n\nIt’s Raining Men, from lecture\nSoccer, a game\nCookie Love Story, an animation\nGingerbread tales, an interactive story\nIntersection, a game\nHogwarts, a game\n\nYou might find these tutorials or starter projects helpful. And you’re welcome to explore scratch.mit.edu for inspiration. But try to think of an idea on your own, and then set out to implement it. However, don’t try to implement the entirety of your project all at once: tackle one piece at a time, just as we did in lecture. In other words, take baby steps: write a bit of code (i.e., drag and drop a few puzzle pieces), test, write a bit more, test, and so forth. And select File &gt; Save now every few minutes so that you don’t lose any work!\nIf, along the way, you find it too difficult to implement some feature, try not to fret; alter your design or work around the problem. If you set out to implement an idea that you find fun, odds are you won’t find it too hard to satisfy the above requirements.\nAlright, off you go. Make us proud!\nOnce finished with your project, select File &gt; Save now one last time. Then select File &gt; Save to your computer and keep that file so that you can submit it. If prompted by your computer to Open or Save the file, be sure to Save it."
  },
  {
    "objectID": "homework/hw_1/1.1_starting_from_scratch.html#problem-1.1",
    "href": "homework/hw_1/1.1_starting_from_scratch.html#problem-1.1",
    "title": "Starting from Scratch",
    "section": "",
    "text": "It’s time to choose your own adventure! Your assignment, quite simply, is to implement in Scratch, at scratch.mit.edu, any project of your choice, be it an interactive story, game, animation, or anything else, subject only to the following requirements:\n\nYour project must use at least two sprites, at least one of which must not be a cat.\nYour project must have at least three scripts total (i.e., not necessarily three per sprite).\nYour project must use at least one conditional, at least one loop, and at least one variable.\nYour project must use at least one custom block that you have made yourself (via Make a Block), which must take at least one input.\nYour project should be more complex than most of those demonstrated in lecture (many of which, though instructive, were quite short) but it can be less complex than Oscartime and Ivy’s Hardest Game.\n\nTo meet these requirements, your project should probably use a few dozen puzzle pieces overall. And your code should ideally be not only correct but also well-designed. If one of your scripts is getting a bit long, try to break it up into multiple scripts (each of which does something specific). And try to leverage “abstraction” where possible: if you can imagine giving a descriptive name to a sequence of blocks (e.g., meow), those could probably be moved to a custom block!\nIf you’d like some inspiration from past students, here are just a few:\n\nIt’s Raining Men, from lecture\nSoccer, a game\nCookie Love Story, an animation\nGingerbread tales, an interactive story\nIntersection, a game\nHogwarts, a game\n\nYou might find these tutorials or starter projects helpful. And you’re welcome to explore scratch.mit.edu for inspiration. But try to think of an idea on your own, and then set out to implement it. However, don’t try to implement the entirety of your project all at once: tackle one piece at a time, just as we did in lecture. In other words, take baby steps: write a bit of code (i.e., drag and drop a few puzzle pieces), test, write a bit more, test, and so forth. And select File &gt; Save now every few minutes so that you don’t lose any work!\nIf, along the way, you find it too difficult to implement some feature, try not to fret; alter your design or work around the problem. If you set out to implement an idea that you find fun, odds are you won’t find it too hard to satisfy the above requirements.\nAlright, off you go. Make us proud!\nOnce finished with your project, select File &gt; Save now one last time. Then select File &gt; Save to your computer and keep that file so that you can submit it. If prompted by your computer to Open or Save the file, be sure to Save it."
  },
  {
    "objectID": "homework/hw_1/1.1_starting_from_scratch.html#hello-world",
    "href": "homework/hw_1/1.1_starting_from_scratch.html#hello-world",
    "title": "Starting from Scratch",
    "section": "Hello, World",
    "text": "Hello, World\nSuffice it to say it’s a bit harder to meet classmates when taking a course online. But, thanks to technology, everyone can at least say hello!\nIf you have a phone (or digital camera) and would like to say hello to classmates, record a 1- to 2-minute video of yourself saying hello, perhaps stating where in the world you are, why you’re taking Computing Technology, and something interesting about you! Try to begin your video by saying “hello, world” and end it with “my name is…, and this is Computing Technology.” But, ultimately, it’s totally up to you.\nIf you do record a video, upload it to YouTube (unless blocked in your country, in which case you’re welcome to upload it elsewhere) so that you can provide us with its URL when you submit!"
  },
  {
    "objectID": "homework/hw_1/1.1_starting_from_scratch.html#how-to-submit",
    "href": "homework/hw_1/1.1_starting_from_scratch.html#how-to-submit",
    "title": "Starting from Scratch",
    "section": "How to Submit",
    "text": "How to Submit\nBe sure to complete both steps below, in order!\n\nStep 1 of 2\nSubmit this form.\n\n\nStep 2 of 2\nThis step assumes that you’ve downloaded your Scratch project as a file whose name ends in .sb3. And this step also assumes that you’ve signed up for a GitHub account, per the above form.\n\nVisit this link, log in with your GitHub account, and click Authorize cs50.\nCheck the box indicating that you’d like to grant course staff access to your submissions, and click Join course.\nGo to submit.cs50.io/upload/cs50/problems/2025/x/scratch.\nClick “Choose File” and choose your .sb3 file. Click Submit.\n\nIf you encounter the error “No files in this directory are expected by cs50/problems/2025/x/scratch”, please make sure your scratch project file name indeed ends with .sb3!\nThat’s it! Once your submission uploads, you should be redirected to your submission page. Click the submission link and then the check50 link to see which requirements your project met. You are welcome to resubmit as many times as you’d like (before the deadline)! Note that if you upload a file whose size is larger than 10MB (which is quite large for a Scratch project) check50 may struggle to process it. Best to make sure your file is smaller than that limit.\nTo view your current progress in the course, visit the course gradebook at cs50.me/cs50x!"
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html",
    "href": "homework/hw_10/10.1_birthdays.html",
    "title": "Birthdays",
    "section": "",
    "text": "Week 9, Problem 1\nSource: https://cs50.harvard.edu/x/psets/9/birthdays/"
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#problem-to-solve",
    "href": "homework/hw_10/10.1_birthdays.html#problem-to-solve",
    "title": "Birthdays",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nCreate a web application to keep track of friends’ birthdays."
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#getting-started",
    "href": "homework/hw_10/10.1_birthdays.html#getting-started",
    "title": "Birthdays",
    "section": "Getting Started",
    "text": "Getting Started\nDownload the distribution code\nOpen cs50.dev.\nStart by clicking inside your terminal window, then execute cd by itself. You should find that its “prompt” resembles the below.\n$\n\nClick inside of that terminal window and then execute\nwget https://cdn.cs50.net/2024/fall/psets/9/birthdays.zip\n\nfollowed by Enter in order to download a ZIP called birthdays.zip in your codespace. Take care not to overlook the space between wget and the following URL, or any other character for that matter!\nNow execute\nunzip birthdays.zip\n\nto create a folder called birthdays. You no longer need the ZIP file, so you can execute\nrm birthdays.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd birthdays\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nbirthdays/ $\n\nIf all was successful, you should execute\nls\n\nand you should see the following files and folders:\napp.py  birthdays.db  static/  templates/\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#understanding",
    "href": "homework/hw_10/10.1_birthdays.html#understanding",
    "title": "Birthdays",
    "section": "Understanding",
    "text": "Understanding\nIn app.py, you’ll find the start of a Flask web application. The application has one route (/) that accepts both POST requests (after the if) and GET requests (after the else). Currently, when the / route is requested via GET, the index.html template is rendered. When the / route is requested via POST, the user is redirected back to / via GET.\nbirthdays.db is a SQLite database with one table, birthdays, that has four columns: id, name, month, and day. There are a few rows already in this table, though ultimately your web application will support the ability to insert rows into this table!\nIn the static directory is a styles.css file containing the CSS code for this web application. No need to edit this file, though you’re welcome to if you’d like!\nIn the templates directory is an index.html file that will be rendered when the user views your web application."
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#implementation-details",
    "href": "homework/hw_10/10.1_birthdays.html#implementation-details",
    "title": "Birthdays",
    "section": "Implementation Details",
    "text": "Implementation Details\nComplete the implementation of a web application to let users store and keep track of birthdays.\n\nWhen the / route is requested via GET, your web application should display, in a table, all of the people in your database along with their birthdays.\n\nFirst, in app.py, add logic in your GET request handling to query the birthdays.db database for all birthdays. Pass all of that data to your index.html template.\nThen, in index.html, add logic to render each birthday as a row in the table. Each row should have two columns: one column for the person’s name and another column for the person’s birthday.\n\nWhen the / route is requested via POST, your web application should add a new birthday to your database and then re-render the index page.\n\nFirst, in index.html, add an HTML form. The form should let users type in a name, a birthday month, and a birthday day. Be sure the form submits to / (its “action”) with a method of post.\nThen, in app.py, add logic in your POST request handling to INSERT a new row into the birthdays table based on the data supplied by the user.\n\n\nOptionally, you may also:\n\nAdd the ability to delete and/or edit birthday entries.\nAdd any additional features of your choosing!"
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#hints",
    "href": "homework/hw_10/10.1_birthdays.html#hints",
    "title": "Birthdays",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nCreate a form via which users can submit birthdays\nIn index.html, notice the following TODO:\n&lt;!-- TODO: Create a form for users to submit a name, a month, and a day --&gt;\n\nRecall that, to create a form, you can use the form HTML element. You can create a form HTML element with the following opening and closing tags:\n&lt;form&gt;\n&lt;/form&gt;\n\nOf course, a form still needs input fields (and a button via which the user can submit the form!). Recall that HTML input elements create, among other things, input boxes within a form. You can specify their type attribute to allow them to accept text or numbers. Also give the input elements a name attribute so you can differentiate them.\n&lt;form&gt;\n    &lt;input name=\"name\" type=\"text\"&gt;\n    &lt;input name=\"month\" type=\"number\"&gt;\n    &lt;input name=\"day\" type=\"number\"&gt;\n&lt;/form&gt;\n\nYour form might benefit from a button the user could click to submit their data. Add an input element of type submit, which will allow the user to do just that. If you’d like the button itself to have explanatory text, try setting the value attribute.\n&lt;form&gt;\n    &lt;input name=\"name\" type=\"text\"&gt;\n    &lt;input name=\"month\" type=\"number\"&gt;\n    &lt;input name=\"day\" type=\"number\"&gt;\n    &lt;input type=\"submit\" value=\"Add Birthday\"&gt;\n&lt;/form&gt;\n\nWhere will the user’s data be submitted? Currently, nowhere! Recall that you can specify a form’s action attribute to dictate which route should be requested after the form is submitted. The form data will be submitted along with the resulting request. The method attribute specifies which HTTP request method to use when submitting the form.\n&lt;form action=\"/\" method=\"post\"&gt;\n    &lt;input name=\"name\" type=\"text\"&gt;\n    &lt;input name=\"month\" type=\"number\"&gt;\n    &lt;input name=\"day\" type=\"number\"&gt;\n    &lt;input type=\"submit\" value=\"Add Birthday\"&gt;\n&lt;/form&gt;\n\nWith that, your form should be perfectly functional, though it could still be improved! Consider adding placeholder values to spruce things up a bit:\n&lt;form action=\"/\" method=\"post\"&gt;\n    &lt;input name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n    &lt;input name=\"month\" placeholder=\"Month\" type=\"number\"&gt;\n    &lt;input name=\"day\" placeholder=\"Day\" type=\"number\"&gt;\n    &lt;input type=\"submit\" value=\"Add Birthday\"&gt;\n&lt;/form&gt;\n\nAnd consider adding some client-side validation, to ensure the user cooperates with the intent of your form. For example, an input field of type number can also have a min and max attribute specified, which determine the minimum and maximum value a user can enter.\n&lt;form action=\"/\" method=\"post\"&gt;\n    &lt;input name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n    &lt;input name=\"month\" placeholder=\"Month\" type=\"number\" min=\"1\" max=\"12\"&gt;\n    &lt;input name=\"day\" placeholder=\"Day\" type=\"number\" min=\"1\" max=\"31\"&gt;\n    &lt;input type=\"submit\" value=\"Add Birthday\"&gt;\n&lt;/form&gt;\n\nAdd a user’s form submission to the database\nIn app.py, notice the following TODO:\n# TODO: Add the user's entry into the database\n\nRecall that Flask has some handy methods to access form data submitted via POST! In particular:\n# Access form data\nrequest.form.get(NAME)\n\nwhere NAME refers to the name attribute of the particular input element with submitted data. If your input elements were named name, month, and day, you could access (and store!) their values respectively with the following:\n# Access form data\nname = request.form.get(\"name\")\nmonth = request.form.get(\"month\")\nday = request.form.get(\"day\")\n\nNow the values submitted by the user in the name, month, and day input elements are available to you as Python variables.\nThe next step is to add these values to your database! Thanks to this particular line\ndb = SQL(\"sqlite:///birthdays.db\")\n\napp.py has already established a connection to birthdays.db under the name db. You can now execute SQL queries by calling db.execute with a valid SQL query. If you wanted to add Carter’s birthday on January 1st, you might run the following SQL statement:\nINSERT INTO birthdays (name, month, day) VALUES('Carter', 1, 1);\n\nConfigure app.py to run that same query, but with placeholders for the values to insert, as follows:\n# Access form data\nname = request.form.get(\"name\")\nmonth = request.form.get(\"month\")\nday = request.form.get(\"day\")\n\n# Insert data into database\ndb.execute(\"INSERT INTO birthdays (name, month, day) VALUES(?, ?, ?)\", name, month, day)\n\nAnd that should do it! Try submitting the form, opening birthdays.db, and using a SELECT query to view the contents of the birthdays table. You should see the submitted form data available to you.\nAs you create more advanced applications, you’ll also want to add server-side validation: that is, a way to check whether the user’s data is valid before doing anything else! One of the first validations you might make is whether the user submitted any data at all! Should you try to retrieve form data with request.form.get where the user didn’t submit any, request.form.get will return an empty string. You can check for this value in Python as follows:\n# Access form data\nname = request.form.get(\"name\")\nif not name:\n    return redirect(\"/\")\n\nmonth = request.form.get(\"month\")\nif not month:\n    return redirect(\"/\")\n\nday = request.form.get(\"day\")\nif not day:\n    return redirect(\"/\")\n\n# Insert data into database\ndb.execute(\"INSERT INTO birthdays (name, month, day) VALUES(?, ?, ?)\", name, month, day)\n\nNow, you won’t insert a row until you’re sure the user has provided all the data you need.\nA few more things could still go wrong! What if the user doesn’t, in fact, provide a numeric value for month or day? One way to check is to try to convert the value to an integer with int and, if the conversion fails, to redirect the user back to the homepage.\n# Access form data\nname = request.form.get(\"name\")\nif not name:\n    return redirect(\"/\")\n\nmonth = request.form.get(\"month\")\nif not month:\n    return redirect(\"/\")\ntry:\n    month = int(month)\nexcept ValueError:\n    return redirect(\"/\")\n\nday = request.form.get(\"day\")\nif not day:\n    return redirect(\"/\")\ntry:\n    day = int(day)\nexcept ValueError:\n    return redirect(\"/\")\n\n# Insert data into database\ndb.execute(\"INSERT INTO birthdays (name, month, day) VALUES(?, ?, ?)\", name, month, day)\n\nAnd even if the user has entered a number, best to check it’s in the right range!\n# Access form data\nname = request.form.get(\"name\")\nif not name:\n    return redirect(\"/\")\n\nmonth = request.form.get(\"month\")\nif not month:\n    return redirect(\"/\")\ntry:\n    month = int(month)\nexcept ValueError:\n    return redirect(\"/\")\nif month &lt; 1 or month &gt; 12:\n    return redirect(\"/\")\n\nday = request.form.get(\"day\")\nif not day:\n    return redirect(\"/\")\ntry:\n    day = int(day)\nexcept ValueError:\n    return redirect(\"/\")\nif day &lt; 1 or day &gt; 31:\n    return redirect(\"/\")\n\n# Insert data into database\ndb.execute(\"INSERT INTO birthdays (name, month, day) VALUES(?, ?, ?)\", name, month, day)\n\nRender birthdays in birthdays.db\nOnce a user can submit birthdays and store them in birthdays.db, your next task is to ensure those birthdays are rendered in index.html.\nFirst, you’ll need to retrieve all birthdays from birthdays.db. You could so with the SQL query:\nSELECT * FROM birthdays;\n\nSee the following TODO in app.py:\n# TODO: Display the entries in the database on index.html\n\nConsider configuring app.py to run this SQL query each time the page is loaded with a GET request:\n# Query for all birthdays\nbirthdays = db.execute(\"SELECT * FROM birthdays\")\n\nNow, all birthdays in the birthdays table of birthdays.db are available to you in a Python variable named birthdays. In particular, the results of the SQL query are stored as a list of dictionaries. Each dictionary represents one row returned by the query, and each key in the dictionary corresponds to a column name of the birthdays table (i.e., “name”, “month”, and “day”).\nTo render these birthdays in index.html, you can rely on Flask’s render_template function. You can specify that index.html should be rendered with the birthdays variable by specifying a keyword argument, also called birthdays, and setting it equal to the birthdays variable you just recently created.\n# Query for all birthdays\nbirthdays = db.execute(\"SELECT * FROM birthdays\")\n\n# Render birthdays page\nreturn render_template(\"index.html\", birthdays=birthdays)\n\nTo be clear, the name on the left-hand side of the =, birthdays, is the name under which you can access the birthdays data within index.html itself.\nNow that index.html is being rendered with access to the birthdays data, you can use Jinja to render the data properly. Jinja, like Python, can loop through elements of a list. And Jinja, like Python, can access elements a dictionary by their keys. In this case, the Jinja syntax to do so is the name of the dictionary, followed by a ., then the name of the key to access.\n{% for birthday in birthdays %}\n    &lt;tr&gt;\n        &lt;td&gt;&lt;/td&gt;\n        &lt;td&gt;/&lt;/td&gt;\n    &lt;/tr&gt;\n{% endfor %}\n\nAnd that’s it! Try reloading the page to see the birthdays rendered.\n\nWalkthrough\nThis video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!\nNot sure how to solve?\n\n\nTesting\nNo check50 for this problem set! But be sure to test your web application by adding some birthdays and ensuring that the data appears in your table as expected.\nRun flask run in your terminal while in your birthdays directory to start a web server that serves your Flask application."
  },
  {
    "objectID": "homework/hw_10/10.1_birthdays.html#how-to-submit",
    "href": "homework/hw_10/10.1_birthdays.html#how-to-submit",
    "title": "Birthdays",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/birthdays"
  },
  {
    "objectID": "homework/hw_10.html",
    "href": "homework/hw_10.html",
    "title": "Problem Set 9",
    "section": "",
    "text": "Week 9 Problem Set\nSource: https://cs50.harvard.edu/x/psets/9/",
    "crumbs": [
      "Homework",
      "Homework 10 🐍"
    ]
  },
  {
    "objectID": "homework/hw_10.html#what-to-do",
    "href": "homework/hw_10.html#what-to-do",
    "title": "Problem Set 9",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Birthdays\nSubmit Finance",
    "crumbs": [
      "Homework",
      "Homework 10 🐍"
    ]
  },
  {
    "objectID": "homework/hw_10.html#when-to-do-it",
    "href": "homework/hw_10.html#when-to-do-it",
    "title": "Problem Set 9",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 10 🐍"
    ]
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html",
    "href": "homework/hw_2/2.2_hello_its_me.html",
    "title": "Hello, It’s Me",
    "section": "",
    "text": "Week 1, Problem 2\nSource: https://cs50.harvard.edu/x/psets/1/me/"
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#problem-to-solve",
    "href": "homework/hw_2/2.2_hello_its_me.html#problem-to-solve",
    "title": "Hello, It’s Me",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a file called hello.c, in a folder called me, implement a program in C that prompts the user for their name and then says hello to that user. For instance, if the user’s name is Adele, your program should print hello, Adele\\n!\nHints\n\nRecall that you can get a string from a user with get_string, which is declared in cs50.h.\nRecall that you can print a string with printf, which is declared in stdio.h.\nRecall that you can format a string with printf with %s."
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#demo",
    "href": "homework/hw_2/2.2_hello_its_me.html#demo",
    "title": "Hello, It’s Me",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#how-to-begin",
    "href": "homework/hw_2/2.2_hello_its_me.html#how-to-begin",
    "title": "Hello, It’s Me",
    "section": "How to Begin",
    "text": "How to Begin\nExecute cd by itself in your terminal window. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nmkdir me\n\nto make a folder called me in your codespace.\nThen execute\ncd me\n\nto change directories into that folder. You should now see your terminal prompt as me/ $. You can now execute\ncode hello.c\n\nto create a file called hello.c in which you can write your code."
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#walkthrough",
    "href": "homework/hw_2/2.2_hello_its_me.html#walkthrough",
    "title": "Hello, It’s Me",
    "section": "Walkthrough",
    "text": "Walkthrough\nHere’s a “walkthrough” (i.e., tour) of this problem, if you’d like a verbal overview of what to do too!"
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#how-to-test",
    "href": "homework/hw_2/2.2_hello_its_me.html#how-to-test",
    "title": "Hello, It’s Me",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/me\n\n\n\nStyle\nstyle50 hello.c"
  },
  {
    "objectID": "homework/hw_2/2.2_hello_its_me.html#how-to-submit",
    "href": "homework/hw_2/2.2_hello_its_me.html#how-to-submit",
    "title": "Hello, It’s Me",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/me"
  },
  {
    "objectID": "homework/hw_2/2.4_this_version_of_mario.html",
    "href": "homework/hw_2/2.4_this_version_of_mario.html",
    "title": "this version of Mario (more)",
    "section": "",
    "text": "Week 1, Problem 4\nSource: https://cs50.harvard.edu/x/psets/1/mario/more/"
  },
  {
    "objectID": "homework/hw_2/2.4_this_version_of_mario.html#problem-to-solve",
    "href": "homework/hw_2/2.4_this_version_of_mario.html#problem-to-solve",
    "title": "this version of Mario (more)",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nToward the beginning of World 1-1 in Nintendo’s Super Mario Brothers, Mario must hop over adjacent pyramids of blocks, per the below.\n\n\n\nscreenshot of Mario jumping over adjacent pyramids\n\n\nIn a file called mario.c in a folder called mario-more, implement a program in C that recreates that pyramid, using hashes (#) for bricks, as in the below:\n   #  #\n  ##  ##\n ###  ###\n####  ####\n\nAnd let’s allow the user to decide just how tall the pyramids should be by first prompting them for a positive int between, say, 1 and 8, inclusive.\nExamples\nHere’s how the program might work if the user inputs 8 when prompted:\n$ ./mario\nHeight: 8\n       #  #\n      ##  ##\n     ###  ###\n    ####  ####\n   #####  #####\n  ######  ######\n #######  #######\n########  ########\n\n\nHere’s how the program might work if the user inputs 4 when prompted:\n$ ./mario\nHeight: 4\n   #  #\n  ##  ##\n ###  ###\n####  ####\n\nHere’s how the program might work if the user inputs 2 when prompted:\n$ ./mario\nHeight: 2\n #  #\n##  ##\n\nAnd here’s how the program might work if the user inputs 1 when prompted:\n$ ./mario\nHeight: 1\n#  #\n\nIf the user doesn’t, in fact, input a positive integer between 1 and 8, inclusive, when prompted, the program should re-prompt the user until they cooperate:\n$ ./mario\nHeight: -1\nHeight: 0\nHeight: 42\nHeight: 50\nHeight: 4\n   #  #\n  ##  ##\n ###  ###\n####  ####\n\nNotice that width of the “gap” between adjacent pyramids is equal to the width of two hashes, irrespective of the pyramids’ heights.\n\nWalkthrough\n\n\nHow to Test Your Code\nDoes your code work as prescribed when you input\n\n-1 (or other negative numbers)?\n0?\n1 through 8?\n9 or other positive numbers?\nletters or words?\nno input at all, when you only hit Enter?\n\nYou can also execute the below to evaluate the correctness of your code using check50. But be sure to compile and test it yourself as well!\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/mario/more\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 mario.c"
  },
  {
    "objectID": "homework/hw_2/2.4_this_version_of_mario.html#how-to-submit",
    "href": "homework/hw_2/2.4_this_version_of_mario.html#how-to-submit",
    "title": "this version of Mario (more)",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/mario/more"
  },
  {
    "objectID": "homework/hw_2/2.6_credit.html",
    "href": "homework/hw_2/2.6_credit.html",
    "title": "Credit",
    "section": "",
    "text": "Week 1, Problem 6\nSource: https://cs50.harvard.edu/x/psets/1/credit/"
  },
  {
    "objectID": "homework/hw_2/2.6_credit.html#problem-to-solve",
    "href": "homework/hw_2/2.6_credit.html#problem-to-solve",
    "title": "Credit",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nA credit (or debit) card, of course, is a plastic card with which you can pay for goods and services. Printed on that card is a number that’s also stored in a database somewhere, so that when your card is used to buy something, the creditor knows whom to bill. There are a lot of people with credit cards in this world, so those numbers are pretty long: American Express uses 15-digit numbers, MasterCard uses 16-digit numbers, and Visa uses 13- and 16-digit numbers. And those are decimal numbers (0 through 9), not binary, which means, for instance, that American Express could print as many as 10^15 = 1,000,000,000,000,000 unique cards! (That’s, um, a quadrillion.)\nActually, that’s a bit of an exaggeration, because credit card numbers actually have some structure to them. All American Express numbers start with 34 or 37; most MasterCard numbers start with 51, 52, 53, 54, or 55 (they also have some other potential starting numbers which we won’t concern ourselves with for this problem); and all Visa numbers start with 4. But credit card numbers also have a “checksum” built into them, a mathematical relationship between at least one number and others. That checksum enables computers (or humans who like math) to detect typos (e.g., transpositions), if not fraudulent numbers, without having to query a database, which can be slow. Of course, a dishonest mathematician could certainly craft a fake number that nonetheless respects the mathematical constraint, so a database lookup is still necessary for more rigorous checks.\nIn a file called credit.c in a folder called credit, implement a program in C that checks the validity of a given credit card number."
  },
  {
    "objectID": "homework/hw_2/2.6_credit.html#luhns-algorithm",
    "href": "homework/hw_2/2.6_credit.html#luhns-algorithm",
    "title": "Credit",
    "section": "Luhn’s Algorithm",
    "text": "Luhn’s Algorithm\nSo what’s the secret formula? Well, most cards use an algorithm invented by Hans Peter Luhn of IBM. According to Luhn’s algorithm, you can determine if a credit card number is (syntactically) valid as follows:\n\nMultiply every other digit by 2, starting with the number’s second-to-last digit, and then add those products’ digits together.\nAdd the sum to the sum of the digits that weren’t multiplied by 2.\nIf the total’s last digit is 0 (or, put more formally, if the total modulo 10 is congruent to 0), the number is valid!\n\nThat’s kind of confusing, so let’s try an example with David’s Visa: 4003600000000014.\n\nFor the sake of discussion, let’s first underline every other digit, starting with the number’s second-to-last digit:\n4003600000000014\nOkay, let’s multiply each of the underlined digits by 2:\n1•2 + 0•2 + 0•2 + 0•2 + 0•2 + 6•2 + 0•2 + 4•2\nThat gives us:\n2 + 0 + 0 + 0 + 0 + 12 + 0 + 8\nNow let’s add those products’ digits (i.e., not the products themselves) together:\n2 + 0 + 0 + 0 + 0 + 1 + 2 + 0 + 8 = 13\nNow let’s add that sum (13) to the sum of the digits that weren’t multiplied by 2 (starting from the end):\n13 + 4 + 0 + 0 + 0 + 0 + 0 + 3 + 0 = 20\nYup, the last digit in that sum (20) is a 0, so David’s card is legit!\n\nSo, validating credit card numbers isn’t hard, but it does get a bit tedious by hand. Let’s write a program."
  },
  {
    "objectID": "homework/hw_2/2.6_credit.html#implementation-details",
    "href": "homework/hw_2/2.6_credit.html#implementation-details",
    "title": "Credit",
    "section": "Implementation Details",
    "text": "Implementation Details\nIn the file called credit.c in the credit directory, write a program that prompts the user for a credit card number and then reports (via printf) whether it is a valid American Express, MasterCard, or Visa card number, per the definitions of each’s format herein. So that we can automate some tests of your code, we ask that your program’s last line of output be AMEX\\n or MASTERCARD\\n or VISA\\n or INVALID\\n, nothing more, nothing less. For simplicity, you may assume that the user’s input will be entirely numeric (i.e., devoid of hyphens, as might be printed on an actual card) and that it won’t have leading zeroes. But do not assume that the user’s input will fit in an int! Best to use get_long from CS50’s library to get users’ input. (Why?)\nConsider the below representative of how your own program should behave when passed a valid credit card number (sans hyphens).\n$ ./credit\nNumber: 4003600000000014\nVISA\n\nNow, get_long itself will reject hyphens (and more) anyway:\n$ ./credit\nNumber: 4003-6000-0000-0014\nNumber: foo\nNumber: 4003600000000014\nVISA\n\nBut it’s up to you to catch inputs that are not credit card numbers (e.g., a phone number), even if numeric:\n$ ./credit\nNumber: 6176292929\nINVALID\n\nTest out your program with a whole bunch of inputs, both valid and invalid. (We certainly will!) Here are a few card numbers that PayPal recommends for testing.\nIf your program behaves incorrectly on some inputs (or doesn’t compile at all), time to debug!\n\nWalkthrough\n\n\nHow to Test Your Code\nYou can also execute the below to evaluate the correctness of your code using check50. But be sure to compile and test it yourself as well!\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/credit\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 credit.c"
  },
  {
    "objectID": "homework/hw_2/2.6_credit.html#how-to-submit",
    "href": "homework/hw_2/2.6_credit.html#how-to-submit",
    "title": "Credit",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/credit"
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html",
    "href": "homework/hw_3/3.1_scrabble.html",
    "title": "Scrabble",
    "section": "",
    "text": "Week 2, Problem 1\nSource: https://cs50.harvard.edu/x/psets/2/scrabble/"
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html#problem-to-solve",
    "href": "homework/hw_3/3.1_scrabble.html#problem-to-solve",
    "title": "Scrabble",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn the game of Scrabble, players create words to score points, and the number of points is the sum of the point values of each letter in the word.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\nU\nV\nW\nX\nY\nZ\n\n\n\n\n1\n3\n3\n2\n1\n4\n2\n4\n1\n8\n5\n1\n3\n1\n1\n3\n10\n1\n1\n1\n1\n4\n4\n8\n4\n10\n\n\n\nFor example, if we wanted to score the word “CODE”, we would note that the ‘C’ is worth 3 points, the ‘O’ is worth 1 point, the ‘D’ is worth 2 points, and the ‘E’ is worth 1 point. Summing these, we get that “CODE” is worth 7 points.\nIn a file called scrabble.c in a folder called scrabble, implement a program in C that determines the winner of a short Scrabble-like game. Your program should prompt for input twice: once for “Player 1” to input their word and once for “Player 2” to input their word. Then, depending on which player scores the most points, your program should either print “Player 1 wins!”, “Player 2 wins!”, or “Tie!” (in the event the two players score equal points)."
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html#demo",
    "href": "homework/hw_3/3.1_scrabble.html#demo",
    "title": "Scrabble",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html#advice",
    "href": "homework/hw_3/3.1_scrabble.html#advice",
    "title": "Scrabble",
    "section": "Advice",
    "text": "Advice\nClick the below toggles to read some advice!\nWrite some code that you know will compile\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n\n}\n\nNotice that you’ve now included a few header files that will give you access to functions which might help you solve this problem.\nWrite some pseudocode before writing more code\nIf unsure how to solve the problem itself, break it down into smaller problems that you can probably solve first. For instance, this problem is really only a handful of problems:\n\nPrompt for the user for two words\nCompute the score of each word\nPrint the winner\n\nLet’s write some pseudcode as comments to remind you to do just that:\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt the user for two words\n\n    // Compute the score of each word\n\n    // Print the winner\n}\n\nSome problems in problem sets, like this one, might contain spoilers (like the next one) that ultimately walk you through the entire solution. While you are permitted to use this code, we really do strongly encourage you to try things out yourself first! The other problems in the problem set won’t have this sort of walkthrough, and typically the problem that contains the “full spoiler” is a warm-up version of the bigger problem you’ll later need to tackle.\nConvert the pseudocode to code\nFirst, consider how you might prompt the user for two words. Recall that get_string, a function in the CS50 library, can prompt the user for a string.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt the user for two words\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Compute the score of each word\n\n    // Print the winner\n}\n\nNext consider how to compute the score of each word. Since the same scoring algorithm applies to both words, you have a good opportunity for abstraction. Here we’ll define a function called compute_score that takes a string, called word, as input, and then returns word’s score as an int.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint compute_score(string word);\n\nint main(void)\n{\n    // Prompt the user for two words\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Compute the score of each word\n    int score1 = compute_score(word1);\n    int score2 = compute_score(word2);\n\n    // Print the winner   \n}\n\nint compute_score(string word)\n{\n    // Compute and return score for word\n}\n\nNow turn to implementing compute_score. To compute the score of a word, you need to know the point value of each letter in the word. You can associate letters and their point values with an array. Imagine an array of 26 ints, called POINTS, in which the first number is the point value for ‘A’, the second number is the point value for ‘B’, and so on. By declaring and initializing such an array outside of any single function, you can ensure this array is accessible to any function, including compute_score.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Points assigned to each letter of the alphabet\nint POINTS[] = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};\n\nint compute_score(string word);\n\nint main(void)\n{\n    // Prompt the user for two words\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Compute the score of each word\n    int score1 = compute_score(word1);\n    int score2 = compute_score(word2);\n\n    // Print the winner   \n}\n\nint compute_score(string word)\n{\n    // Compute and return score for word\n}\n\nTo implement compute_score, first try to find the point value of a single letter in word.\n\nRecall that to find the character at the nth index of a string, s, you can write s[n]. So word[0], for example, will give you the first character of word.\nNow, recall that computers represent characters using ASCII, a standard that represents each character as a number.\nRecall too that the 0th index of POINTS, POINTS[0], gives you the point value of ‘A’. Think about how you could transform the numeric representation of ‘A’ into the index of its point value. Now, what about ‘a’? You’ll need to apply different transformations to upper- and lower-case letters, so you may find the functions isupper and islower to be helpful to you.\nKeep in mind that characters that are not letters should be given zero points For example, ! is worth 0 points.\n\nIf you can properly calculate the value of one character in words, odds are you can use a loop to sum the points for the rest of the characters. Once you’ve tried the above on your own, consider this (quite revealing!) hint below.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Points assigned to each letter of the alphabet\nint POINTS[] = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};\n\nint compute_score(string word);\n\nint main(void)\n{\n    // Prompt the user for two words\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Compute the score of each word\n    int score1 = compute_score(word1);\n    int score2 = compute_score(word2);\n\n    // Print the winner   \n}\n\nint compute_score(string word)\n{\n    // Keep track of score\n    int score = 0;\n\n    // Compute score for each character\n    for (int i = 0, len = strlen(word); i &lt; len; i++)\n    {\n        if (isupper(word[i]))\n        {\n            score += POINTS[word[i] - 'A'];\n        }\n        else if (islower(word[i]))\n        {\n            score += POINTS[word[i] - 'a'];\n        }\n    }\n\n    return score;\n}\n\nFinally, finish your pseudocode’s last step: printing the winner. Recall that an if statement can be used to check if a condition is true, and that the additional usage of else if or else can check for other (exclusive) conditions.\nif (/* Player 1 wins */)\n{\n    // ...\n}\nelse if (/* Player 2 wins */)\n{\n    // ...\n}\nelse\n{\n    // ...\n}\n\nAnd once you’ve tried the above, feel free to take a peek at the hint (or, rather, complete solution!) below.\n#include &lt;ctype.h&gt;\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// Points assigned to each letter of the alphabet\nint POINTS[] = {1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10};\n\nint compute_score(string word);\n\nint main(void)\n{\n    // Prompt the user for two words\n    string word1 = get_string(\"Player 1: \");\n    string word2 = get_string(\"Player 2: \");\n\n    // Compute the score of each word\n    int score1 = compute_score(word1);\n    int score2 = compute_score(word2);\n\n    // Print the winner   \n    if (score1 &gt; score2)\n    {\n        printf(\"Player 1 wins!\\n\");\n    }\n    else if (score1 &lt; score2)\n    {\n        printf(\"Player 2 wins!\\n\");\n    }\n    else\n    {\n        printf(\"Tie!\\n\");\n    }\n}\n\nint compute_score(string word)\n{\n    // Keep track of score\n    int score = 0;\n\n    // Compute score for each character\n    for (int i = 0, len = strlen(word); i &lt; len; i++)\n    {\n        if (isupper(word[i]))\n        {\n            score += POINTS[word[i] - 'A'];\n        }\n        else if (islower(word[i]))\n        {\n            score += POINTS[word[i] - 'a'];\n        }\n    }\n\n    return score;\n}"
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html#how-to-test",
    "href": "homework/hw_3/3.1_scrabble.html#how-to-test",
    "title": "Scrabble",
    "section": "How to Test",
    "text": "How to Test\nYour program should behave per the examples below.\n$ ./scrabble\nPlayer 1: Question?\nPlayer 2: Question!\nTie!\n\n$ ./scrabble\nPlayer 1: red\nPlayer 2: wheelbarrow\nPlayer 2 wins!\n\n$ ./scrabble\nPlayer 1: COMPUTER\nPlayer 2: science\nPlayer 1 wins!\n\n$ ./scrabble\nPlayer 1: Scrabble\nPlayer 2: wiNNeR\nPlayer 1 wins!\n\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/scrabble\n\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 scrabble.c"
  },
  {
    "objectID": "homework/hw_3/3.1_scrabble.html#how-to-submit",
    "href": "homework/hw_3/3.1_scrabble.html#how-to-submit",
    "title": "Scrabble",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/scrabble"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html",
    "href": "homework/hw_3/3.3_caesar.html",
    "title": "Caesar",
    "section": "",
    "text": "Week 2, Problem 3\nSource: https://cs50.harvard.edu/x/psets/2/caesar/"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#problem-to-solve",
    "href": "homework/hw_3/3.3_caesar.html#problem-to-solve",
    "title": "Caesar",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nSupposedly, Caesar (yes, that Caesar) used to “encrypt” (i.e., conceal in a reversible way) confidential messages by shifting each letter therein by some number of places. For instance, he might write A as B, B as C, C as D, …, and, wrapping around alphabetically, Z as A. And so, to say HELLO to someone, Caesar might write IFMMP instead. Upon receiving such messages from Caesar, recipients would have to “decrypt” them by shifting letters in the opposite direction by the same number of places.\nThe secrecy of this “cryptosystem” relied on only Caesar and the recipients knowing a secret, the number of places by which Caesar had shifted his letters (e.g., 1). Not particularly secure by modern standards, but, hey, if you’re perhaps the first in the world to do it, pretty secure!\nUnencrypted text is generally called plaintext. Encrypted text is generally called ciphertext. And the secret used is called a key.\nTo be clear, then, here’s how encrypting HELLO with a key of (1) yields IFMMP:\n\n\n\nplaintext\nH\nE\nL\nL\nO\n\n\n\n\n+ key\n(1)\n(1)\n(1)\n(1)\n(1)\n\n\n= ciphertext\nI\nF\nM\nM\nP\n\n\n\nMore formally, Caesar’s algorithm (i.e., cipher) encrypts messages by “rotating” each letter by (k) positions. More formally, if (p) is some plaintext (i.e., an unencrypted message), (p_i) is the (i^{th}) character in (p), and (k) is a secret key (i.e., a non-negative integer), then each letter, (c_i), in the ciphertext, (c), is computed as\n[c_i = (p_i + k)%]\nwherein (%) here means “remainder when dividing by 26.” This formula perhaps makes the cipher seem more complicated than it is, but it’s really just a concise way of expressing the algorithm precisely. Indeed, for the sake of discussion, think of A (or a) as (0), B (or b) as (1), …, H (or h) as (7), I (or i) as (8), …, and Z (or z) as (25). Suppose that Caesar just wants to say Hi to someone confidentially using, this time, a key, (k), of 3. And so his plaintext, (p), is Hi, in which case his plaintext’s first character, (p_0), is H (aka 7), and his plaintext’s second character, (p_1), is i (aka 8). His ciphertext’s first character, (c_0), is thus K, and his ciphertext’s second character, (c_1), is thus L. Make sense?\nIn a file called caesar.c in a folder called caesar, write a program that enables you to encrypt messages using Caesar’s cipher. At the time the user executes the program, they should decide, by providing a command-line argument, what the key should be in the secret message they’ll provide at runtime. We shouldn’t necessarily assume that the user’s key is going to be a number; though you may assume that, if it is a number, it will be a positive integer."
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#demo",
    "href": "homework/hw_3/3.3_caesar.html#demo",
    "title": "Caesar",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#specification",
    "href": "homework/hw_3/3.3_caesar.html#specification",
    "title": "Caesar",
    "section": "Specification",
    "text": "Specification\nDesign and implement a program, caesar, that encrypts messages using Caesar’s cipher.\n\nImplement your program in a file called caesar.c in a directory called caesar.\nYour program must accept a single command-line argument, a non-negative integer. Let’s call it (k) for the sake of discussion.\nIf your program is executed without any command-line arguments or with more than one command-line argument, your program should print an error message of your choice (with printf) and return from main a value of 1 (which tends to signify an error) immediately.\nIf any of the characters of the command-line argument is not a decimal digit, your program should print the message Usage: ./caesar key and return from main a value of 1.\nDo not assume that (k) will be less than or equal to 26. Your program should work for all non-negative integral values of (k) less than (2^{31} - 26). In other words, you don’t need to worry if your program eventually breaks if the user chooses a value for (k) that’s too big or almost too big to fit in an int. (Recall that an int can overflow.) But, even if (k) is greater than (26), alphabetical characters in your program’s input should remain alphabetical characters in your program’s output. For instance, if (k) is (27), A should not become \\ even though \\ is (27) positions away from A in ASCII, per asciitable.com; A should become B, since B is (27) positions away from A, provided you wrap around from Z to A.\nYour program must output plaintext: (with two spaces but without a newline) and then prompt the user for a string of plaintext (using get_string).\nYour program must output ciphertext: (with one space but without a newline) followed by the plaintext’s corresponding ciphertext, with each alphabetical character in the plaintext “rotated” by k positions; non-alphabetical characters should be outputted unchanged.\nYour program must preserve case: capitalized letters, though rotated, must remain capitalized letters; lowercase letters, though rotated, must remain lowercase letters.\nAfter outputting ciphertext, you should print a newline. Your program should then exit by returning 0 from main."
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#advice",
    "href": "homework/hw_3/3.3_caesar.html#advice",
    "title": "Caesar",
    "section": "Advice",
    "text": "Advice\nHow to begin? Let’s approach this problem one step at a time.\n\nPseudocode\nFirst write, try to write a main function in caesar.c that implements the program using just pseudocode, even if not (yet!) sure how to write it in actual code.\nHint\nThere’s more than one way to do this, so here’s just one!\nint main(int argc, string argv[])\n{\n    // Make sure program was run with just one command-line argument\n\n    // Make sure every character in argv[1] is a digit\n\n    // Convert argv[1] from a `string` to an `int`\n\n    // Prompt user for plaintext\n\n    // For each character in the plaintext:\n\n        // Rotate the character if it's a letter\n}\n\nIt’s okay to edit your own pseudocode after seeing ours here, but don’t simply copy/paste ours into your own!\n\n\nCounting Command-Line Arguments\nWhatever your pseudocode, let’s first write only the C code that checks whether the program was run with a single command-line argument before adding additional functionality.\nSpecifically, modify main in caesar.c in such a way that, if the user provides no command-line arguments, or two or more, the function prints \"Usage: ./caesar key\\n\" and then returns 1, effectively exiting the program. If the user provides exactly one command-line argument, the program should print nothing and simply return 0. The program should thus behave per the below.\n$ ./caesar\nUsage: ./caesar key\n\n$ ./caesar 1 2 3\nUsage: ./caesar key\n\n$ ./caesar 1\n\nHints\n\nRecall that you can print with printf.\nRecall that a function can return a value with return.\nRecall that argc contains the number of command-line arguments passed to a program, plus the program’s own name.\n\n\n\nChecking the Key\nNow that your program is (hopefully!) accepting input as prescribed, it’s time for another step.\nAdd to caesar.c, below main, a function called, e.g., only_digits that takes a string as an argument and returns true if that string contains only digits, 0 through 9, else it returns false. Be sure to add the function’s prototype above main as well.\nHints\n\nOdds are you’ll want a prototype like:\nbool only_digits(string s);\n\nAnd be sure to include cs50.h atop your file, so that the compiler recognizes string (and bool).\nRecall that a string is just an array of chars.\nRecall that strlen, declared in string.h, calculates the length of a string.\nYou might find isdigit, declared in ctype.h, to be helpful, per manual.cs50.io. But note that it only checks one char at a time!\n\nThen modify main in such a way that it calls only_digits on argv[1]. If that function returns false, then main should print \"Usage: ./caesar key\\n\" and return 1. Else main should simply return 0. The program should thus behave per the below:\n$ ./caesar 42\n\n$ ./caesar banana\nUsage: ./caesar key\n\n\n\nUsing the Key\nNow modify main in such a way that it converts argv[1] to an int. You might find atoi, declared in stdlib.h, to be helpful, per manual.cs50.io. And then use get_string to prompt the user for some plaintext with \"plaintext: \".\nThen, implement a function called, e.g., rotate, that takes a char as input and also an int, and rotates that char by that many positions if it’s a letter (i.e., alphabetical), wrapping around from Z to A (and from z to a) as needed. If the char is not a letter, the function should instead return the same char unchanged.\nHints\n\nOdds are you’ll want a prototype like:\nchar rotate(char c, int n);\n\nA function call like\nrotate('A', 1)\n\nor even\nrotate('A', 27)\n\nshould thus return 'B'. And a function call like\nrotate('!', 13)\n\nshould return '!'.\nRecall that you can explicitly “cast” a char to an int with (int), and an int to a char with (char). Or you can do so implicitly by simply treating one as the other.\nOdds are you’ll want to subtract the ASCII value of 'A' from any uppercase letters, so as to treat 'A' as 0, 'B' as 1, and so forth, while performing arithmetic. And then add it back when done with the same.\nOdds are you’ll want to subtract the ASCII value of 'a' from any lowercase letters, so as to treat 'a' as 0, 'b' as 1, and so forth, while performing arithmetic. And then add it back when done with the same.\nYou might find some other functions declared in ctype.h to be helpful, per manual.cs50.io.\nOdds are you’ll find % helpful when “wrapping around” arithmetically from a value like 25 to 0.\n\nThen modify main in such a way that it prints \"ciphertext: \" and then iterates over every char in the user’s plaintext, calling rotate on each, and printing the return value thereof.\nHints\n\nRecall that printf can print a char using %c.\nIf you’re not seeing any output at all when you call printf, odds are it’s because you’re printing characters outside of the valid ASCII range from 0 to 127. Try printing characters temporarily as numbers (using %i instead of %c) to see what values you’re printing!"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#walkthrough",
    "href": "homework/hw_3/3.3_caesar.html#walkthrough",
    "title": "Caesar",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#how-to-test",
    "href": "homework/hw_3/3.3_caesar.html#how-to-test",
    "title": "Caesar",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\nIn your terminal, execute the below to check your work’s correctness.\ncheck50 cs50/problems/2025/x/caesar\n\nHow to Use debug50\nLooking to run debug50? You can do so as follows, after compiling your code successfully with make,\ndebug50 ./caesar KEY\n\nwherein KEY is the key you give as a command-line argument to your program. Note that running\ndebug50 ./caesar\n\nwill (ideally!) cause your program end by prompting the user for a key.\n\n\nStyle\nExecute the below to evaluate the style of your code using style50.\nstyle50 caesar.c"
  },
  {
    "objectID": "homework/hw_3/3.3_caesar.html#how-to-submit",
    "href": "homework/hw_3/3.3_caesar.html#how-to-submit",
    "title": "Caesar",
    "section": "How to Submit",
    "text": "How to Submit\nIn your terminal, execute the below to submit your work.\nsubmit50 cs50/problems/2025/x/caesar"
  },
  {
    "objectID": "homework/hw_3.html",
    "href": "homework/hw_3.html",
    "title": "Problem Set 2",
    "section": "",
    "text": "Week 2 Problem Set\nSource: https://cs50.harvard.edu/x/psets/2/",
    "crumbs": [
      "Homework",
      "Homework 03 🟢"
    ]
  },
  {
    "objectID": "homework/hw_3.html#what-to-do",
    "href": "homework/hw_3.html#what-to-do",
    "title": "Problem Set 2",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account using Chrome, Edge, or Safari, not Firefox\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Scrabble\nSubmit Readability\nSubmit one of:\n\nCaesar, if feeling less comfortable\nSubstitution, if feeling more comfortable\n\n\nIf you submit both Caesar and Substitution, we’ll record the higher of your two scores.",
    "crumbs": [
      "Homework",
      "Homework 03 🟢"
    ]
  },
  {
    "objectID": "homework/hw_3.html#when-to-do-it",
    "href": "homework/hw_3.html#when-to-do-it",
    "title": "Problem Set 2",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 03 🟢"
    ]
  },
  {
    "objectID": "homework/hw_3.html#advice",
    "href": "homework/hw_3.html#advice",
    "title": "Problem Set 2",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from class via Week 2’s examples.\nTo see the manual pages for C functions, visit manual.cs50.io.\nIf you see any errors when compiling your code with make, focus first on fixing the very first error you see, scrolling up as needed. If unsure what it means, try asking help50 for help. For instance, if trying to compile readability, and\nmake readability\n\nis yielding errors, try running\nhelp50 make readability\n\ninstead!",
    "crumbs": [
      "Homework",
      "Homework 03 🟢"
    ]
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html",
    "href": "homework/hw_4/4.2_plurality.html",
    "title": "Plurality",
    "section": "",
    "text": "Week 3, Problem 2\nSource: https://cs50.harvard.edu/x/psets/3/plurality/"
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#problem-to-solve",
    "href": "homework/hw_4/4.2_plurality.html#problem-to-solve",
    "title": "Plurality",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nElections come in all shapes and sizes. In the UK, the Prime Minister is officially appointed by the monarch, who generally chooses the leader of the political party that wins the most seats in the House of Commons. The United States uses a multi-step Electoral College process where citizens vote on how each state should allocate Electors who then elect the President.\nPerhaps the simplest way to hold an election, though, is via a method commonly known as the “plurality vote” (also known as “first-past-the-post” or “winner take all”). In the plurality vote, every voter gets to vote for one candidate. At the end of the election, whichever candidate has the greatest number of votes is declared the winner of the election.\nFor this problem, you’ll implement a program that runs a plurality election, per the below."
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#demo",
    "href": "homework/hw_4/4.2_plurality.html#demo",
    "title": "Plurality",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#distribution-code",
    "href": "homework/hw_4/4.2_plurality.html#distribution-code",
    "title": "Plurality",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of “distribution code” provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/3/plurality.zip\n\nin order to download a ZIP called plurality.zip into your codespace.\nThen execute\nunzip plurality.zip\n\nto create a folder called plurality. You no longer need the ZIP file, so you can execute\nrm plurality.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd plurality\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nplurality/ $\n\nIf all was successful, you should execute\nls\n\nand see a file named plurality.c. Executing code plurality.c should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!\nUnderstand the code in plurality.c\nWhenever you’ll extend the functionality of existing code, it’s best to be sure you first understand it in its present state.\nLook first at the top of the file. The line #define MAX 9 is some syntax used here to mean that MAX is a constant (equal to 9) that can be used throughout the program. Here, it represents the maximum number of candidates an election can have.\n// Max number of candidates\n#define MAX 9\n\nNotice that plurality.c then uses this constant to define a global array—that is, an array that any function can access.\n// Array of candidates\ncandidate candidates[MAX];\n\nBut what, in this case, is a candidate? In plurality.c, a candidate is a struct. Each candidate has two fields: a string called name representing the candidate’s name, and an int called votes representing the number of votes the candidate has.\n// Candidates have name and vote count\ntypedef struct\n{\n    string name;\n    int votes;\n}\ncandidate;\n\nNow, take a look at the main function itself. See if you can find where the program sets a global variable candidate_count representing the number of candidates in the election.\n// Number of candidates\nint candidate_count;\n\nWhat about where it copies command-line arguments into the array candidates?\n// Populate array of candidates\ncandidate_count = argc - 1;\nif (candidate_count &gt; MAX)\n{\n    printf(\"Maximum number of candidates is %i\\n\", MAX);\n    return 2;\n}\nfor (int i = 0; i &lt; candidate_count; i++)\n{\n    candidates[i].name = argv[i + 1];\n    candidates[i].votes = 0;\n}\n\nAnd where it asks the user to type in the number of voters?\nint voter_count = get_int(\"Number of voters: \");\n\nThen, the program lets every voter type in a vote, calling the vote function on each candidate voted for. Finally, main makes a call to the print_winner function to print out the winner (or winners) of the election. We’ll leave it to you to identify the code that implements this functionality.\nIf you look further down in the file, though, you’ll notice that the vote and print_winner functions have been left blank.\n// Update vote totals given a new vote\nbool vote(string name)\n{\n    // TODO\n    return false;\n}\n\n// Print the winner (or winners) of the election\nvoid print_winner(void)\n{\n    // TODO\n    return;\n}\n\nThis part is up to you to complete! You should not modify anything else in plurality.c other than the implementations of the vote and print_winner functions (and the inclusion of additional header files, if you’d like)."
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#hints",
    "href": "homework/hw_4/4.2_plurality.html#hints",
    "title": "Plurality",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nComplete the vote function\nNext, complete the vote function.\n\nConsider that vote’s signature, bool vote(string name), shows it takes a single argument, a string called name, representing the name of the candidate who was voted for.\nvote should return a bool, where true indicates a vote was successfully cast and false indicates it was not.\n\nOne way to approach this problem is to do the following:\n\nIterate over each candidate\n\nCheck if candidate’s name matches the input, name\n\nIf yes, increment that candidate’s votes and return true\nIf no, continue checking\n\n\nIf no matches after checking each candidate, return false\n\nLet’s write some pseudocode to remind you to do just that:\n// Update vote totals given a new vote\nbool vote(string name)\n{\n    // Iterate over each candidate\n        // Check if candidate's name matches given name\n            // If yes, increment candidate's votes and return true\n\n    // If no match, return false\n}\n\nWe’ll leave the implementation in code, though, up to you!\nComplete the print_winner function\nFinally, complete the print_winner function.\n\nThe function should print out the name of the candidate who received the most votes in the election, and then print a newline.\nThe election could end in a tie if multiple candidates each have the maximum number of votes. In that case, you should output the names of each of the winning candidates, each on a separate line.\n\nYou might think a sorting algorithm would best solve this problem: imagine sorting candidates by their vote totals and printing the top candidate (or candidates). Recall, though, that sorting can be expensive: even Merge Sort, one of the fastest sorting algorithms, runs in (O(N log(N))).\nConsider that you need only two pieces of information to solve this problem:\n\nThe maximum number of votes\nThe candidate (or candidates) with that number of votes\n\nAs such, a good solution might require only two searches. Write some pseudocode to remind yourself to do just that:\n// Print the winner (or winners) of the election\nvoid print_winner(void)\n{\n    // Find the maximum number of votes\n\n    // Print the candidate (or candidates) with maximum votes\n\n}\n\nWe’ll leave the code, though, up to you!"
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#walkthrough",
    "href": "homework/hw_4/4.2_plurality.html#walkthrough",
    "title": "Plurality",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#how-to-test",
    "href": "homework/hw_4/4.2_plurality.html#how-to-test",
    "title": "Plurality",
    "section": "How to Test",
    "text": "How to Test\nBe sure to test your code to make sure it handles…\n\nAn election with any number of candidate (up to the MAX of 9)\nVoting for a candidate by name\nInvalid votes for candidates who are not on the ballot\nPrinting the winner of the election if there is only one\nPrinting the winner of the election if there are multiple winners\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/plurality\n\n\n\nStyle\nstyle50 plurality.c"
  },
  {
    "objectID": "homework/hw_4/4.2_plurality.html#how-to-submit",
    "href": "homework/hw_4/4.2_plurality.html#how-to-submit",
    "title": "Plurality",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/plurality"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html",
    "href": "homework/hw_4/4.4_tideman.html",
    "title": "Tideman",
    "section": "",
    "text": "Week 3, Problem 4\nSource: https://cs50.harvard.edu/x/psets/3/tideman/"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#problem-to-solve",
    "href": "homework/hw_4/4.4_tideman.html#problem-to-solve",
    "title": "Tideman",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nYou already know about plurality elections, which follow a very simple algorithm for determining the winner of an election: every voter gets one vote, and the candidate with the most votes wins.\nBut the plurality vote does have some disadvantages. What happens, for instance, in an election with three candidates, and the ballots below are cast?\n\n\n\nFive ballots, tie betweeen Alice and Bob\n\n\nA plurality vote would here declare a tie between Alice and Bob, since each has two votes. But is that the right outcome?\nThere’s another kind of voting system known as a ranked-choice voting system. In a ranked-choice system, voters can vote for more than one candidate. Instead of just voting for their top choice, they can rank the candidates in order of preference. The resulting ballots might therefore look like the below.\n\n\n\nFive ballots, with ranked preferences\n\n\nHere, each voter, in addition to specifying their first preference candidate, has also indicated their second and third choices. And now, what was previously a tied election could now have a winner. The race was originally tied between Alice and Bob. But the voter who chose Charlie preferred Alice over Bob, so Alice could here be declared the winner.\nRanked choice voting can also solve yet another potential drawback of plurality voting. Take a look at the following ballots.\n\n\n\nNine ballots, with ranked preferences\n\n\nWho should win this election? In a plurality vote where each voter chooses their first preference only, Charlie wins this election with four votes compared to only three for Bob and two for Alice. (Note that, if you’re familiar with the instant runoff voting system, Charlie wins here under that system as well). Alice, however, might reasonably make the argument that she should be the winner of the election instead of Charlie: after all, of the nine voters, a majority (five of them) preferred Alice over Charlie, so most people would be happier with Alice as the winner instead of Charlie.\nAlice is, in this election, the so-called “Condorcet winner” of the election: the person who would have won any head-to-head matchup against another candidate. If the election had been just Alice and Bob, or just Alice and Charlie, Alice would have won.\nThe Tideman voting method (also known as “ranked pairs”) is a ranked-choice voting method that’s guaranteed to produce the Condorcet winner of the election if one exists. In a file called tideman.c in a folder called tideman, create a program to simulate an election by the Tideman voting method."
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#demo",
    "href": "homework/hw_4/4.4_tideman.html#demo",
    "title": "Tideman",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#distribution-code",
    "href": "homework/hw_4/4.4_tideman.html#distribution-code",
    "title": "Tideman",
    "section": "Distribution Code",
    "text": "Distribution Code\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/3/tideman.zip\n\nin order to download a ZIP called tideman.zip into your codespace.\nThen execute\nunzip tideman.zip\n\nto create a folder called tideman. You no longer need the ZIP file, so you can execute\nrm tideman.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd tideman\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\ntideman/ $\n\nIf all was successful, you should execute\nls\n\nand see a file named tideman.c. Executing code tideman.c should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#background",
    "href": "homework/hw_4/4.4_tideman.html#background",
    "title": "Tideman",
    "section": "Background",
    "text": "Background\nGenerally speaking, the Tideman method works by constructing a “graph” of candidates, where an arrow (i.e. edge) from candidate A to candidate B indicates that candidate A wins against candidate B in a head-to-head matchup. The graph for the above election, then, would look like the below.\n\n\n\nNine ballots, with ranked preferences\n\n\nThe arrow from Alice to Bob means that more voters prefer Alice to Bob (5 prefer Alice, 4 prefer Bob). Likewise, the other arrows mean that more voters prefer Alice to Charlie, and more voters prefer Charlie to Bob.\nLooking at this graph, the Tideman method says the winner of the election should be the “source” of the graph (i.e. the candidate that has no arrow pointing at them). In this case, the source is Alice — Alice is the only one who has no arrow pointing at her, which means nobody is preferred head-to-head over Alice. Alice is thus declared the winner of the election.\nIt’s possible, however, that when the arrows are drawn, there is no Condorcet winner. Consider the below ballots.\n\n\n\nNine ballots, with ranked preferences\n\n\nBetween Alice and Bob, Alice is preferred over Bob by a 7-2 margin. Between Bob and Charlie, Bob is preferred over Charlie by a 5-4 margin. But between Charlie and Alice, Charlie is preferred over Alice by a 6-3 margin. If we draw out the graph, there is no source! We have a cycle of candidates, where Alice beats Bob who beats Charlie who beats Alice (much like a game of rock-paper-scissors). In this case, it looks like there’s no way to pick a winner.\nTo handle this, the Tideman algorithm must be careful to avoid creating cycles in the candidate graph. How does it do this? The algorithm locks in the strongest edges first, since those are arguably the most significant. In particular, the Tideman algorithm specifies that matchup edges should be “locked in” to the graph one at a time, based on the “strength” of the victory (the more people who prefer a candidate over their opponent, the stronger the victory). So long as the edge can be locked into the graph without creating a cycle, the edge is added; otherwise, the edge is ignored.\nHow would this work in the case of the votes above? Well, the biggest margin of victory for a pair is Alice beating Bob, since 7 voters prefer Alice over Bob (no other head-to-head matchup has a winner preferred by more than 7 voters). So the Alice-Bob arrow is locked into the graph first. The next biggest margin of victory is Charlie’s 6-3 victory over Alice, so that arrow is locked in next.\nNext up is Bob’s 5-4 victory over Charlie. But notice: if we were to add an arrow from Bob to Charlie now, we would create a cycle! Since the graph can’t allow cycles, we should skip this edge, and not add it to the graph at all. If there were more arrows to consider, we would look to those next, but that was the last arrow, so the graph is complete.\nThis step-by-step process is shown below, with the final graph at right.\n\n\n\nNine ballots, with ranked preferences\n\n\nBased on the resulting graph, Charlie is the source (there’s no arrow pointing towards Charlie), so Charlie is declared the winner of this election.\nPut more formally, the Tideman voting method consists of three parts:\n\nTally: Once all of the voters have indicated all of their preferences, determine, for each pair of candidates, who the preferred candidate is and by what margin they are preferred.\nSort: Sort the pairs of candidates in decreasing order of strength of victory, where strength of victory is defined to be the number of voters who prefer the preferred candidate.\nLock: Starting with the strongest pair, go through the pairs of candidates in order and “lock in” each pair to the candidate graph, so long as locking in that pair does not create a cycle in the graph.\n\nOnce the graph is complete, the source of the graph (the one with no edges pointing towards it) is the winner!"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#understanding",
    "href": "homework/hw_4/4.4_tideman.html#understanding",
    "title": "Tideman",
    "section": "Understanding",
    "text": "Understanding\nLet’s take a look at tideman.c.\nFirst, notice the two-dimensional array preferences. The integer preferences[i][j] will represent the number of voters who prefer candidate i over candidate j.\nThe file also defines another two-dimensional array, called locked, which will represent the candidate graph. locked is a boolean array, so locked[i][j] being true represents the existence of an edge pointing from candidate i to candidate j; false means there is no edge. (If curious, this representation of a graph is known as an “adjacency matrix”).\nNext up is a struct called pair, used to represent a pair of candidates: each pair includes the winner’s candidate index and the loser’s candidate index.\nThe candidates themselves are stored in the array candidates, which is an array of strings representing the names of each of the candidates. There’s also an array of pairs, which will represent all of the pairs of candidates (for which one is preferred over the other) in the election.\nThe program also has two global variables: pair_count and candidate_count, representing the number of pairs and number of candidates in the arrays pairs and candidates, respectively.\nNow onto main. Notice that after determining the number of candidates, the program loops through the locked graph and initially sets all of the values to false, which means our initial graph will have no edges in it.\nNext, the program loops over all of the voters and collects their preferences in an array called ranks (via a call to vote), where ranks[i] is the index of the candidate who is the ith preference for the voter. These ranks are passed into the record_preference function, whose job it is to take those ranks and update the global preferences variable.\nOnce all of the votes are in, the pairs of candidates are added to the pairs array via a called to add_pairs, sorted via a call to sort_pairs, and locked into the graph via a call to lock_pairs. Finally, print_winner is called to print out the name of the election’s winner!\nFurther down in the file, you’ll see that the functions vote, record_preference, add_pairs,sort_pairs, lock_pairs, and print_winner are left blank. That’s up to you!"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#specification",
    "href": "homework/hw_4/4.4_tideman.html#specification",
    "title": "Tideman",
    "section": "Specification",
    "text": "Specification\nComplete the implementation of tideman.c in such a way that it simulates a Tideman election.\n\nComplete the vote function.\n\nThe function takes arguments rank, name, and ranks. If name is a match for the name of a valid candidate, then you should update the ranks array to indicate that the voter has the candidate as their rank preference (where 0 is the first preference, 1 is the second preference, etc.)\nRecall that ranks[i] here represents the user’s ith preference.\nThe function should return true if the rank was successfully recorded, and false otherwise (if, for instance, name is not the name of one of the candidates).\nYou may assume that no two candidates will have the same name.\n\nComplete the record_preferences function.\n\nThe function is called once for each voter, and takes as argument the ranks array, (recall that ranks[i] is the voter’s ith preference, where ranks[0] is the first preference).\nThe function should update the global preferences array to add the current voter’s preferences. Recall that preferences[i][j] should represent the number of voters who prefer candidate i over candidate j.\nYou may assume that every voter will rank each of the candidates.\n\nComplete the add_pairs function.\n\nThe function should add all pairs of candidates where one candidate is preferred to the pairs array. A pair of candidates who are tied (one is not preferred over the other) should not be added to the array.\nThe function should update the global variable pair_count to be the number of pairs of candidates. (The pairs should thus all be stored between pairs[0] and pairs[pair_count - 1], inclusive).\n\nComplete the sort_pairs function.\n\nThe function should sort the pairs array in decreasing order of strength of victory, where strength of victory is defined to be the number of voters who prefer the preferred candidate. If multiple pairs have the same strength of victory, you may assume that the order does not matter.\n\nComplete the lock_pairs function.\n\nThe function should create the locked graph, adding all edges in decreasing order of victory strength so long as the edge would not create a cycle.\n\nComplete the print_winner function.\n\nThe function should print out the name of the candidate who is the source of the graph. You may assume there will not be more than one source.\n\n\nYou should not modify anything else in tideman.c other than the implementations of the vote, record_preferences, add_pairs, sort_pairs, lock_pairs, and print_winner functions (and the inclusion of additional header files, if you’d like). You are permitted to add additional functions to tideman.c, so long as you do not change the declarations of any of the existing functions."
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#walkthrough",
    "href": "homework/hw_4/4.4_tideman.html#walkthrough",
    "title": "Tideman",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#how-to-test",
    "href": "homework/hw_4/4.4_tideman.html#how-to-test",
    "title": "Tideman",
    "section": "How to Test",
    "text": "How to Test\nBe sure to test your code to make sure it handles…\n\nAn election with any number of candidate (up to the MAX of 9)\nVoting for a candidate by name\nInvalid votes for candidates who are not on the ballot\nPrinting the winner of the election\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/tideman\n\n\n\nStyle\nstyle50 tideman.c"
  },
  {
    "objectID": "homework/hw_4/4.4_tideman.html#how-to-submit",
    "href": "homework/hw_4/4.4_tideman.html#how-to-submit",
    "title": "Tideman",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/tideman"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html",
    "href": "homework/hw_5/5.1_volume.html",
    "title": "Volume",
    "section": "",
    "text": "Week 4, Problem 1\nSource: https://cs50.harvard.edu/x/psets/4/volume/"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#problem-to-solve",
    "href": "homework/hw_5/5.1_volume.html#problem-to-solve",
    "title": "Volume",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nWAV files are a common file format for representing audio. WAV files store audio as a sequence of “samples”: numbers that represent the value of some audio signal at a particular point in time. WAV files begin with a 44-byte “header” that contains information about the file itself, including the size of the file, the number of samples per second, and the size of each sample. After the header, the WAV file contains a sequence of samples, each a single 2-byte (16-bit) integer representing the audio signal at a particular point in time.\nScaling each sample value by a given factor has the effect of changing the volume of the audio. Multiplying each sample value by 2.0, for example, will have the effect of doubling the volume of the origin audio. Multiplying each sample by 0.5, meanwhile, will have the effect of cutting the volume in half.\nIn a file called volume.c in a folder called volume, write a program to modify the volume of an audio file."
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#demo",
    "href": "homework/hw_5/5.1_volume.html#demo",
    "title": "Volume",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#distribution-code",
    "href": "homework/hw_5/5.1_volume.html#distribution-code",
    "title": "Volume",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/4/volume.zip\n\nin order to download a ZIP called volume.zip into your codespace.\nThen execute\nunzip volume.zip\n\nto create a folder called volume. You no longer need the ZIP file, so you can execute\nrm volume.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd volume\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nvolume/ $\n\nIf all was successful, you should execute\nls\n\nand see a file named volume.c. Executing code volume.c should open the file where you will type your code for this problem set. If not, retrace your steps and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#implementation-details",
    "href": "homework/hw_5/5.1_volume.html#implementation-details",
    "title": "Volume",
    "section": "Implementation Details",
    "text": "Implementation Details\nComplete the implementation of volume.c, such that it changes the volume of a sound file by a given factor.\n\nThe program should accept three command-line arguments. The first is input, which represents the name of the original audio file. The second is output, which represents the name of the new audio file that should be generated. The third is factor, which is the amount by which the volume of the original audio file should be scaled.\n\nFor example, if factor is 2.0, then your program should double the volume of the audio file in input and save the newly generated audio file in output.\n\nYour program should first read the header from the input file and write the header to the output file.\nYour program should then read the rest of the data from the WAV file, one 16-bit (2-byte) sample at a time. Your program should multiply each sample by the factor and write the new sample to the output file.\n\nYou may assume that the WAV file will use 16-bit signed values as samples. In practice, WAV files can have varying numbers of bits per sample, but we’ll assume 16-bit samples for this problem.\n\nYour program, if it uses malloc, must not leak any memory."
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#hints",
    "href": "homework/hw_5/5.1_volume.html#hints",
    "title": "Volume",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nUnderstand the code in volume.c\nNotice first that volume.c is already set up to take three command-line arguments, input, output, and factor.\n\nmain takes both an int, argc, and an array of char *s (strings!), argv.\nIf argc, the number of arguments at the command-line including the program itself, is not equal to 4, the program will print its proper usage and exit with status code 1.\n\nint main(int argc, char *argv[])\n{\n    // Check command-line arguments\n    if (argc != 4)\n    {\n        printf(\"Usage: ./volume input.wav output.wav factor\\n\");\n        return 1;\n    }\n\n    // ...\n}\n\nNext, volume.c uses fopen to open the two files provided as command-line arguments.\n\nIt’s best practice to check if the result of calling fopen is NULL. If it is, the file wasn’t found or wasn’t able to be opened.\n\n// Open files and determine scaling factor\nFILE *input = fopen(argv[1], \"r\");\nif (input == NULL)\n{\n    printf(\"Could not open file.\\n\");\n    return 1;\n}\n\nFILE *output = fopen(argv[2], \"w\");\nif (output == NULL)\n{\n    printf(\"Could not open file.\\n\");\n    return 1;\n}\n\nLater, these files are closed with fclose. Whenever you call fopen, you should later call fclose!\n// Close files\nfclose(input);\nfclose(output);\n\nBefore closing the files, though, notice that we have a few TODOs.\n// TODO: Copy header from input file to output file\n\n// TODO: Read samples from input file and write updated data to output file\n\nOdds are you’ll need to know the factor by which to scale the volume, hence why volume.c already converts the third command-line argument to a float for you!\nfloat factor = atof(argv[3]);\n\nCopy WAV header from input file to output file\nYour first TODO is to copy the WAV file header from input and write it to output. First, though, you’ll need to learn about a few special data types.\nSo far, we’ve seen a number of different types in C, including int, bool, char, double, float, and long. However, inside a header file called stdint.h are the declarations of a number of other types that allow us to very precisely define the size (in bits) and sign (signed or unsigned) of an integer. Two types in particular will be useful to us when working with WAV files:\n\nuint8_t is a type that stores an 8-bit (hence 8!) unsigned (i.e., not negative) integer (hence uint!). We can treat each byte of a WAV file’s header as a uint8_t value.\nint16_t is a type that stores a 16-bit signed (i.e., positive or negative) integer. We can treat each sample of audio in a WAV file as an int16_t value.\n\nYou’ll likely want to create an array of bytes to store the data from the WAV file header that you’ll read from the input file. Using the uint8_t type to represent a byte, you can create an array of n bytes for your header with syntax like\nuint8_t header[n];\n\nreplacing n with the number of bytes. You can then use header as an argument to fread or fwrite to read into or write from the header.\nRecall that a WAV file’s header is always exactly 44 bytes long. Note that volume.c already defines a variable for you called HEADER_SIZE, equal to the number of bytes in the header.\nThe below is a pretty big hint, but here’s how you could accomplish this TODO!\n// Copy header from input file to output file\nuint8_t header[HEADER_SIZE];\nfread(header, HEADER_SIZE, 1, input);\nfwrite(header, HEADER_SIZE, 1, output);\n\nWrite updated data to output file\nYour next TODO is to read samples from input, update those samples, and write the updated samples to output. When reading files, it’s common to create a “buffer” in which to temporarily store data. There, you can modify the data and—once it’s ready—write the buffer’s data to a new file.\nRecall that we can use the int16_t type to represent a sample of a WAV file. To store an audio sample, then, you can create a buffer variable with syntax like:\n// Create a buffer for a single sample\nint16_t buffer;\n\nWith a buffer for samples in place, you can now read data into it, one sample at a time. Try using fread for this task! You can use &buffer, the address of buffer, as an argument to fread or fwrite to read into or write from the buffer. (Recall that the & operator is used to get the address of the variable.)\n// Create a buffer for a single sample\nint16_t buffer;\n\n// Read single sample into buffer\nfread(&buffer, sizeof(int16_t), 1, input);\n\nNow, to increase (or decrease) the volume of a sample, you need only multiply it by some factor.\n// Create a buffer for a single sample\nint16_t buffer;\n\n// Read single sample into buffer\nfread(&buffer, sizeof(int16_t), 1, input);\n\n// Update volume of sample\nbuffer *= factor;\n\nAnd finally, you can write that updated sample to output:\n// Create a buffer for a single sample\nint16_t buffer;\n\n// Read single sample from input into buffer\nfread(&buffer, sizeof(int16_t), 1, input);\n\n// Update volume of sample\nbuffer *= factor;\n\n// Write updated sample to new file\nfwrite(&buffer, sizeof(int16_t), 1, output);\n\nThere’s just one problem: you’ll need to continue reading a sample into your buffer, updating its volume, and writing the updated sample to the output file while there are still samples left to read.\n\nThankfully, per its documentation, fread will return the number of items of data successfully read. You may find this useful to check for when you’ve reached the end of the file!\nKeep in mind there’s no reason you can’t call fread inside of a while loop’s conditional. You could, for example, make a call to fread like the following:\nwhile (fread(...))\n{\n\n}\n\n\nIt’s quite the hint, but see the below for an efficient way to solve this problem:\n// Create a buffer for a single sample\nint16_t buffer;\n\n// Read single sample from input into buffer while there are samples left to read\nwhile (fread(&buffer, sizeof(int16_t), 1, input) != 0)\n{\n    // Update volume of sample\n    buffer *= factor;\n\n    // Write updated sample to new file\n    fwrite(&buffer, sizeof(int16_t), 1, output);\n}\n\nBecause the version of C you’re using treats non-zero values as true and zero values as false, you could simplify the above syntax to the following:\n// Create a buffer for a single sample\nint16_t buffer;\n\n// Read single sample from input into buffer while there are samples left to read\nwhile (fread(&buffer, sizeof(int16_t), 1, input))\n{\n    // Update volume of sample\n    buffer *= factor;\n\n    // Write updated sample to new file\n    fwrite(&buffer, sizeof(int16_t), 1, output);\n}"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#walkthrough",
    "href": "homework/hw_5/5.1_volume.html#walkthrough",
    "title": "Volume",
    "section": "Walkthrough",
    "text": "Walkthrough\nNot sure how to solve?"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#how-to-test",
    "href": "homework/hw_5/5.1_volume.html#how-to-test",
    "title": "Volume",
    "section": "How to Test",
    "text": "How to Test\nYour program should behave per the examples below.\n$ ./volume input.wav output.wav 2.0\n\nWhen you listen to output.wav (as by control-clicking on output.wav in the file browser, choosing Download, and then opening the file in an audio player on your computer), it should be twice as loud as input.wav!\n$ ./volume input.wav output.wav 0.5\n\nWhen you listen to output.wav, it should be half as loud as input.wav!\n\nCorrectness\ncheck50 cs50/problems/2025/x/volume\n\n\n\nStyle\nstyle50 volume.c"
  },
  {
    "objectID": "homework/hw_5/5.1_volume.html#how-to-submit",
    "href": "homework/hw_5/5.1_volume.html#how-to-submit",
    "title": "Volume",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/volume"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html",
    "href": "homework/hw_5/5.3_this_version_of_filter.html",
    "title": "this version of Filter",
    "section": "",
    "text": "Week 4, Problem 3\nSource: https://cs50.harvard.edu/x/psets/4/filter/more/"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#problem-to-solve",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#problem-to-solve",
    "title": "this version of Filter",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nPerhaps the simplest way to represent an image is with a grid of pixels (i.e., dots), each of which can be of a different color. For black-and-white images, we thus need 1 bit per pixel, as 0 could represent black and 1 could represent white, as in the below.\n\n\n\na simple bitmap\n\n\nIn this sense, then, is an image just a bitmap (i.e., a map of bits). For more colorful images, you simply need more bits per pixel. A file format (like BMP, JPEG, or PNG) that supports “24-bit color” uses 24 bits per pixel. (BMP actually supports 1-, 4-, 8-, 16-, 24-, and 32-bit color.)\nA 24-bit BMP uses 8 bits to signify the amount of red in a pixel’s color, 8 bits to signify the amount of green in a pixel’s color, and 8 bits to signify the amount of blue in a pixel’s color. If you’ve ever heard of RGB color, well, there you have it: red, green, blue.\nIf the R, G, and B values of some pixel in a BMP are, say, 0xff, 0x00, and 0x00 in hexadecimal, that pixel is purely red, as 0xff (otherwise known as 255 in decimal) implies “a lot of red,” while 0x00 and 0x00 imply “no green” and “no blue,” respectively. In this problem, you’ll manipulate these R, G, and B values of individual pixels, ultimately creating your very own image filters.\nIn a file called helpers.c in a folder called filter-more, write a program to apply filters to BMPs."
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#demo",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#demo",
    "title": "this version of Filter",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#distribution-code",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#distribution-code",
    "title": "this version of Filter",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/4/filter-more.zip\n\nin order to download a ZIP called filter-more.zip into your codespace.\nThen execute\nunzip filter-more.zip\n\nto create a folder called filter-more. You no longer need the ZIP file, so you can execute\nrm filter-more.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd filter-more\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nfilter-more/ $\n\nExecute ls by itself, and you should see a few files: bmp.h, filter.c, helpers.h, helpers.c, and Makefile. You should also see a folder called images with four BMP files. If you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#background",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#background",
    "title": "this version of Filter",
    "section": "Background",
    "text": "Background\n\nA Bit(map) More Technical\nRecall that a file is just a sequence of bits, arranged in some fashion. A 24-bit BMP file, then, is essentially just a sequence of bits, (almost) every 24 of which happen to represent some pixel’s color. But a BMP file also contains some “metadata,” information like an image’s height and width. That metadata is stored at the beginning of the file in the form of two data structures generally referred to as “headers,” not to be confused with C’s header files. (Incidentally, these headers have evolved over time. This problem uses the latest version of Microsoft’s BMP format, 4.0, which debuted with Windows 95.)\nThe first of these headers, called BITMAPFILEHEADER, is 14 bytes long. (Recall that 1 byte equals 8 bits.) The second of these headers, called BITMAPINFOHEADER, is 40 bytes long. Immediately following these headers is the actual bitmap: an array of bytes, triples of which represent a pixel’s color. However, BMP stores these triples backwards (i.e., as BGR), with 8 bits for blue, followed by 8 bits for green, followed by 8 bits for red. (Some BMPs also store the entire bitmap backwards, with an image’s top row at the end of the BMP file. But we’ve stored this problem set’s BMPs as described herein, with each bitmap’s top row first and bottom row last.) In other words, were we to convert the 1-bit smiley above to a 24-bit smiley, substituting red for black, a 24-bit BMP would store this bitmap as follows, where 0000ff signifies red and ffffff signifies white; we’ve highlighted in red all instances of 0000ff.\n\n\n\nred smile\n\n\nBecause we’ve presented these bits from left to right, top to bottom, in 8 columns, you can actually see the red smiley if you take a step back.\nTo be clear, recall that a hexadecimal digit represents 4 bits. Accordingly, ffffff in hexadecimal actually signifies 111111111111111111111111 in binary.\nNotice that you could represent a bitmap as a 2-dimensional array of pixels: where the image is an array of rows, each row is an array of pixels. Indeed, that’s how we’ve chosen to represent bitmap images in this problem.\n\n\nImage Filtering\nWhat does it even mean to filter an image? You can think of filtering an image as taking the pixels of some original image, and modifying each pixel in such a way that a particular effect is apparent in the resulting image.\n\nGrayscale\nOne common filter is the “grayscale” filter, where we take an image and want to convert it to black-and-white. How does that work?\nRecall that if the red, green, and blue values are all set to 0x00 (hexadecimal for 0), then the pixel is black. And if all values are set to 0xff (hexadecimal for 255), then the pixel is white. So long as the red, green, and blue values are all equal, the result will be varying shades of gray along the black-white spectrum, with higher values meaning lighter shades (closer to white) and lower values meaning darker shades (closer to black).\nSo to convert a pixel to grayscale, we just need to make sure the red, green, and blue values are all the same value. But how do we know what value to make them? Well, it’s probably reasonable to expect that if the original red, green, and blue values were all pretty high, then the new value should also be pretty high. And if the original values were all low, then the new value should also be low.\nIn fact, to ensure each pixel of the new image still has the same general brightness or darkness as the old image, we can take the average of the red, green, and blue values to determine what shade of grey to make the new pixel.\nIf you apply that to each pixel in the image, the result will be an image converted to grayscale.\n\n\nReflection\nSome filters might also move pixels around. Reflecting an image, for example, is a filter where the resulting image is what you would get by placing the original image in front of a mirror. So any pixels on the left side of the image should end up on the right, and vice versa.\nNote that all of the original pixels of the original image will still be present in the reflected image, it’s just that those pixels may have rearranged to be in a different place in the image.\n\n\nBlur\nThere are a number of ways to create the effect of blurring or softening an image. For this problem, we’ll use the “box blur,” which works by taking each pixel and, for each color value, giving it a new value by averaging the color values of neighboring pixels.\nConsider the following grid of pixels, where we’ve numbered each pixel.\n\n\n\na grid of pixels\n\n\nThe new value of each pixel would be the average of the values of all of the pixels that are within 1 row and column of the original pixel (forming a 3x3 box). For example, each of the color values for pixel 6 would be obtained by averaging the original color values of pixels 1, 2, 3, 5, 6, 7, 9, 10, and 11 (note that pixel 6 itself is included in the average). Likewise, the color values for pixel 11 would be be obtained by averaging the color values of pixels 6, 7, 8, 10, 11, 12, 14, 15 and 16.\nFor a pixel along the edge or corner, like pixel 15, we would still look for all pixels within 1 row and column: in this case, pixels 10, 11, 12, 14, 15, and 16.\n\n\nEdges\nIn artificial intelligence algorithms for image processing, it is often useful to detect edges in an image: lines in the image that create a boundary between one object and another. One way to achieve this effect is by applying the Sobel operator to the image.\nLike image blurring, edge detection also works by taking each pixel, and modifying it based on the 3x3 grid of pixels that surrounds that pixel. But instead of just taking the average of the nine pixels, the Sobel operator computes the new value of each pixel by taking a weighted sum of the values for the surrounding pixels. And since edges between objects could take place in both a vertical and a horizontal direction, you’ll actually compute two weighted sums: one for detecting edges in the x direction, and one for detecting edges in the y direction. In particular, you’ll use the following two “kernels”:\n\n\n\nSobel kernels\n\n\nHow to interpret these kernels? In short, for each of the three color values for each pixel, we’ll compute two values Gx and Gy. To compute Gx for the red channel value of a pixel, for instance, we’ll take the original red values for the nine pixels that form a 3x3 box around the pixel, multiply them each by the corresponding value in the Gx kernel, and take the sum of the resulting values.\nWhy these particular values for the kernel? In the Gx direction, for instance, we’re multiplying the pixels to the right of the target pixel by a positive number, and multiplying the pixels to the left of the target pixel by a negative number. When we take the sum, if the pixels on the right are a similar color to the pixels on the left, the result will be close to 0 (the numbers cancel out). But if the pixels on the right are very different from the pixels on the left, then the resulting value will be very positive or very negative, indicating a change in color that likely is the result of a boundary between objects. And a similar argument holds true for calculating edges in the y direction.\nUsing these kernels, we can generate a Gx and Gy value for each of the red, green, and blue channels for a pixel. But each channel can only take on one value, not two: so we need some way to combine Gx and Gy into a single value. The Sobel filter algorithm combines Gx and Gy into a final value by calculating the square root of Gx^2 + Gy^2. And since channel values can only take on integer values from 0 to 255, be sure the resulting value is rounded to the nearest integer and capped at 255!\nAnd what about handling pixels at the edge, or in the corner of the image? There are many ways to handle pixels at the edge, but for the purposes of this problem, we’ll ask you to treat the image as if there was a 1 pixel solid black border around the edge of the image: therefore, trying to access a pixel past the edge of the image should be treated as a solid black pixel (values of 0 for each of red, green, and blue). This will effectively ignore those pixels from our calculations of Gx and Gy."
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#specification",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#specification",
    "title": "this version of Filter",
    "section": "Specification",
    "text": "Specification\nImplement the functions in helpers.c such that a user can apply grayscale, reflection, blur, or edge detection filters to their images.\n\nThe function grayscale should take an image and turn it into a black-and-white version of the same image.\nThe reflect function should take an image and reflect it horizontally.\nThe blur function should take an image and turn it into a box-blurred version of the same image.\nThe edges function should take an image and highlight the edges between objects, according to the Sobel operator.\n\nYou should not modify any of the function signatures, nor should you modify any other files other than helpers.c."
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#understanding",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#understanding",
    "title": "this version of Filter",
    "section": "Understanding",
    "text": "Understanding\nLet’s now take a look at some of the files provided to you as distribution code to get an understanding for what’s inside of them.\n\nbmp.h\nOpen up bmp.h (as by double-clicking on it in the file browser) and have a look.\nYou’ll see definitions of the headers we’ve mentioned (BITMAPINFOHEADER and BITMAPFILEHEADER). In addition, that file defines BYTE, DWORD, LONG, and WORD, data types normally found in the world of Windows programming. Notice how they’re just aliases for primitives with which you are (hopefully) already familiar. It appears that BITMAPFILEHEADER and BITMAPINFOHEADER make use of these types.\nPerhaps most importantly for you, this file also defines a struct called RGBTRIPLE that, quite simply, “encapsulates” three bytes: one blue, one green, and one red (the order, recall, in which we expect to find RGB triples actually on disk).\nWhy are these structs useful? Well, recall that a file is just a sequence of bytes (or, ultimately, bits) on disk. But those bytes are generally ordered in such a way that the first few represent something, the next few represent something else, and so on. “File formats” exist because the world has standardized what bytes mean what. Now, we could just read a file from disk into RAM as one big array of bytes. And we could just remember that the byte at array[i] represents one thing, while the byte at array[j] represents another. But why not give some of those bytes names so that we can retrieve them from memory more easily? That’s precisely what the structs in bmp.h allow us to do. Rather than think of some file as one long sequence of bytes, we can instead think of it as a sequence of structs.\n\n\nfilter.c\nNow, let’s open up filter.c. This file has been written already for you, but there are a couple important points worth noting here.\nFirst, notice the definition of filters on line 10. That string tells the program what the allowable command-line arguments to the program are: b, e, g, and r. Each of them specifies a different filter that we might apply to our images: blur, edge detection, grayscale, and reflection.\nThe next several lines open up an image file, make sure it’s indeed a BMP file, and read all of the pixel information into a 2D array called image.\nScroll down to the switch statement that begins on line 101. Notice that, depending on what filter we’ve chosen, a different function is called: if the user chooses filter b, the program calls the blur function; if e, then edges is called; if g, then grayscale is called; and if r, then reflect is called. Notice, too, that each of these functions take as arguments the height of the image, the width of the image, and the 2D array of pixels.\nThese are the functions you’ll (soon!) implement. As you might imagine, the goal is for each of these functions to edit the 2D array of pixels in such a way that the desired filter is applied to the image.\nThe remaining lines of the program take the resulting image and write them out to a new image file.\n\n\nhelpers.h\nNext, take a look at helpers.h. This file is quite short, and just provides the function prototypes for the functions you saw earlier.\nHere, take note of the fact that each function takes a 2D array called image as an argument, where image is an array of height many rows, and each row is itself another array of width many RGBTRIPLEs. So if image represents the whole picture, then image[0] represents the first row, and image[0][0] represents the pixel in the upper-left corner of the image.\n\n\nhelpers.c\nNow, open up helpers.c. Here’s where the implementation of the functions declared in helpers.h belong. But note that, right now, the implementations are missing! This part is up to you.\n\n\nMakefile\nFinally, let’s look at Makefile. This file specifies what should happen when we run a terminal command like make filter. Whereas programs you may have written before were confined to just one file, filter seems to use multiple files: filter.c and helpers.c. So we’ll need to tell make how to compile this file.\nTry compiling filter for yourself by going to your terminal and running\n$ make filter\n\nThen, you can run the program by running:\n$ ./filter -g images/yard.bmp out.bmp\n\nwhich takes the image at images/yard.bmp, and generates a new image called out.bmp after running the pixels through the grayscale function. grayscale doesn’t do anything just yet, though, so the output image should look the same as the original yard."
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#hints",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#hints",
    "title": "this version of Filter",
    "section": "Hints",
    "text": "Hints\n\nThe values of a pixel’s rgbtRed, rgbtGreen, and rgbtBlue components are all integers, so be sure to round any floating-point numbers to the nearest integer when assigning them to a pixel value!"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#walkthrough",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#walkthrough",
    "title": "this version of Filter",
    "section": "Walkthrough",
    "text": "Walkthrough\nPlease note that there are 5 videos in this playlist."
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#how-to-test",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#how-to-test",
    "title": "this version of Filter",
    "section": "How to Test",
    "text": "How to Test\nBe sure to test all of your filters on the sample bitmap files provided!\n\nCorrectness\ncheck50 cs50/problems/2025/x/filter/more\n\n\n\nStyle\nstyle50 helpers.c"
  },
  {
    "objectID": "homework/hw_5/5.3_this_version_of_filter.html#how-to-submit",
    "href": "homework/hw_5/5.3_this_version_of_filter.html#how-to-submit",
    "title": "this version of Filter",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/filter/more"
  },
  {
    "objectID": "homework/hw_5.html",
    "href": "homework/hw_5.html",
    "title": "Problem Set 4",
    "section": "",
    "text": "Week 4 Problem Set\nSource: https://cs50.harvard.edu/x/psets/4/",
    "crumbs": [
      "Homework",
      "Homework 05 🟢"
    ]
  },
  {
    "objectID": "homework/hw_5.html#what-to-do",
    "href": "homework/hw_5.html#what-to-do",
    "title": "Problem Set 4",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Volume\nSubmit one of:\n\nthis version of Filter if feeling less comfortable\nthis version of Filter if feeling more comfortable\n\nSubmit Recover",
    "crumbs": [
      "Homework",
      "Homework 05 🟢"
    ]
  },
  {
    "objectID": "homework/hw_5.html#when-to-do-it",
    "href": "homework/hw_5.html#when-to-do-it",
    "title": "Problem Set 4",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 05 🟢"
    ]
  },
  {
    "objectID": "homework/hw_5.html#advice",
    "href": "homework/hw_5.html#advice",
    "title": "Problem Set 4",
    "section": "Advice",
    "text": "Advice\n\nTry out any of David’s programs from Week 4.\nIf you see any errors when compiling your code with make, focus first on fixing the very first error you see, scrolling up as needed. If unsure what it means, try asking help50 for help. For instance, if trying to compile filter, and\nmake filter\n\nis yielding errors, try running\nhelp50 make filter\n\ninstead!",
    "crumbs": [
      "Homework",
      "Homework 05 🟢"
    ]
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html",
    "href": "homework/hw_6/6.2_speller.html",
    "title": "Speller",
    "section": "",
    "text": "Week 5, Problem 2\nSource: https://cs50.harvard.edu/x/psets/5/speller/"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#problem-to-solve",
    "href": "homework/hw_6/6.2_speller.html#problem-to-solve",
    "title": "Speller",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nFor this problem, you’ll implement a program that spell-checks a file, a la the below, using a hash table."
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#demo",
    "href": "homework/hw_6/6.2_speller.html#demo",
    "title": "Speller",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#distribution-code",
    "href": "homework/hw_6/6.2_speller.html#distribution-code",
    "title": "Speller",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/5/speller.zip\n\nin order to download a ZIP called speller.zip into your codespace.\nThen execute\nunzip speller.zip\n\nto create a folder called speller. You no longer need the ZIP file, so you can execute\nrm speller.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd speller\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nspeller/ $\n\nExecute ls by itself, and you should see a few files and folders:\ndictionaries/  dictionary.c  dictionary.h  keys/  Makefile  speller.c  speller50  texts/\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#background",
    "href": "homework/hw_6/6.2_speller.html#background",
    "title": "Speller",
    "section": "Background",
    "text": "Background\nGiven the many files in this program, it’s important to read this section in its entirety before starting. You’ll then know what to do and how to do it!\nTheoretically, on input of size n, an algorithm with a running time of n is “asymptotically equivalent,” in terms of O, to an algorithm with a running time of 2n. Indeed, when describing the running time of an algorithm, we typically focus on the dominant (i.e., most impactful) term (i.e., n in this case, since n could be much larger than 2). In the real world, though, the fact of the matter is that 2n feels twice as slow as n.\nThe challenge ahead of you is to implement the fastest spell checker you can! By “fastest,” though, we’re talking actual “wall-clock,” not asymptotic, time.\nIn speller.c, we’ve put together a program that’s designed to spell-check a file after loading a dictionary of words from disk into memory. That dictionary, meanwhile, is implemented in a file called dictionary.c. (It could just be implemented in speller.c, but as programs get more complex, it’s often convenient to break them into multiple files.) The prototypes for the functions therein, meanwhile, are defined not in dictionary.c itself but in dictionary.h instead. That way, both speller.c and dictionary.c can #include the file. Unfortunately, we didn’t quite get around to implementing the loading part. Or the checking part. Both (and a bit more) we leave to you! But first, a tour.\n\nUnderstanding\n\ndictionary.h\nOpen up dictionary.h, and you’ll see some new syntax, including a few lines that mention DICTIONARY_H. No need to worry about those, but, if curious, those lines just ensure that, even though dictionary.c and speller.c (which you’ll see in a moment) #include this file, clang will only compile it once.\nNext notice how we #include a file called stdbool.h. That’s the file in which bool itself is defined. You’ve not needed it before, since the CS50 Library used to #include that for you.\nAlso notice our use of #define, a “preprocessor directive” that defines a “constant” called LENGTH that has a value of 45. It’s a constant in the sense that you can’t (accidentally) change it in your own code. In fact, clang will replace any mentions of LENGTH in your own code with, literally, 45. In other words, it’s not a variable, just a find-and-replace trick.\nFinally, notice the prototypes for five functions: check, hash, load, size, and unload. Notice how three of those take a pointer as an argument, per the *:\nbool check(const char *word);\nunsigned int hash(const char *word);\nbool load(const char *dictionary);\n\nRecall that char * is what we used to call string. So those three prototypes are essentially just:\nbool check(const string word);\nunsigned int hash(const string word);\nbool load(const string dictionary);\n\nAnd const, meanwhile, just says that those strings, when passed in as arguments, must remain constant; you won’t be able to change them, accidentally or otherwise!\n\n\ndictionary.c\nNow open up dictionary.c. Notice how, atop the file, we’ve defined a struct called node that represents a node in a hash table. And we’ve declared a global pointer array, table, which will (soon) represent the hash table you will use to keep track of words in the dictionary. The array contains N node pointers, and we’ve set N equal to 26 for now, to match with the default hash function as described below. You will likely want to increase this depending on your own implementation of hash.\nNext, notice that we’ve implemented load, check, size, and unload, but only barely, just enough for the code to compile. Notice too that we’ve implemented hash with a sample algorithm based on the first letter of the word. Your job, ultimately, is to re-implement those functions as cleverly as possible so that this spell checker works as advertised. And fast!\n\n\nspeller.c\nOkay, next open up speller.c and spend some time looking over the code and comments therein. You won’t need to change anything in this file, and you don’t need to understand its entirety, but do try to get a sense of its functionality nonetheless. Notice how, by way of a function called getrusage, we’ll be “benchmarking” (i.e., timing the execution of) your implementations of check, load, size, and unload. Also notice how we go about passing check, word by word, the contents of some file to be spell-checked. Ultimately, we report each misspelling in that file along with a bunch of statistics.\nNotice, incidentally, that we have defined the usage of speller to be\nUsage: ./speller [dictionary] text\n\nwhere dictionary is assumed to be a file containing a list of lowercase words, one per line, and text is a file to be spell-checked. As the brackets suggest, provision of dictionary is optional; if this argument is omitted, speller will use dictionaries/large by default. In other words, running\n./speller text\n\nwill be equivalent to running\n./speller dictionaries/large text\n\nwhere text is the file you wish to spell-check. Suffice it to say, the former is easier to type! (Of course, speller will not be able to load any dictionaries until you implement load in dictionary.c! Until then, you’ll see Could not load.)\nWithin the default dictionary, mind you, are 143,091 words, all of which must be loaded into memory! In fact, take a peek at that file to get a sense of its structure and size. Notice that every word in that file appears in lowercase (even, for simplicity, proper nouns and acronyms). From top to bottom, the file is sorted lexicographically, with only one word per line (each of which ends with \\n). No word is longer than 45 characters, and no word appears more than once. During development, you may find it helpful to provide speller with a dictionary of your own that contains far fewer words, lest you struggle to debug an otherwise enormous structure in memory. In dictionaries/small is one such dictionary. To use it, execute\n./speller dictionaries/small text\n\nwhere text is the file you wish to spell-check. Don’t move on until you’re sure you understand how speller itself works!\nOdds are, you didn’t spend enough time looking over speller.c. Go back one square and walk yourself through it again!\n\n\ntexts/\nSo that you can test your implementation of speller, we’ve also provided you with a whole bunch of texts, among them the script from La La Land, the text of the Affordable Care Act, three million bytes from Tolstoy, some excerpts from The Federalist Papers and Shakespeare, and more. So that you know what to expect, open and skim each of those files, all of which are in a directory called texts within your pset5 directory.\nNow, as you should know from having read over speller.c carefully, the output of speller, if executed with, say,\n./speller texts/lalaland.txt\n\nwill eventually resemble the below.\nBelow’s some of the output you’ll see. For information’s sake, we’ve excerpted some examples of “misspellings.” And lest we spoil the fun, we’ve omitted our own statistics for now.\nMISSPELLED WORDS\n\n[...]\nAHHHHHHHHHHHHHHHHHHHHHHHHHHHT\n[...]\nShangri\n[...]\nfianc\n[...]\nSebastian's\n[...]\n\nWORDS MISSPELLED:\nWORDS IN DICTIONARY:\nWORDS IN TEXT:\nTIME IN load:\nTIME IN check:\nTIME IN size:\nTIME IN unload:\nTIME IN TOTAL:\n\nTIME IN load represents the number of seconds that speller spends executing your implementation of load. TIME IN check represents the number of seconds that speller spends, in total, executing your implementation of check. TIME IN size represents the number of seconds that speller spends executing your implementation of size. TIME IN unload represents the number of seconds that speller spends executing your implementation of unload. TIME IN TOTAL is the sum of those four measurements.\nNote that these times may vary somewhat across executions of speller, depending on what else your codespace is doing, even if you don’t change your code.\nIncidentally, to be clear, by “misspelled” we simply mean that some word is not in the dictionary provided.\n\n\nMakefile\nAnd, lastly, recall that make automates compilation of your code so that you don’t have to execute clang manually along with a whole bunch of switches. However, as your programs grow in size, make won’t be able to infer from context anymore how to compile your code; you’ll need to start telling make how to compile your program, particularly when they involve multiple source (i.e., .c) files, as in the case of this problem. And so we’ll utilize a Makefile, a configuration file that tells make exactly what to do. Open up Makefile, and you should see four lines:\n\nThe first line tells make to execute the subsequent lines whenever you yourself execute make speller (or just make).\nThe second line tells make how to compile speller.c into machine code (i.e., speller.o).\nThe third line tells make how to compile dictionary.c into machine code (i.e., dictionary.o).\nThe fourth line tells make to link speller.o and dictionary.o in a file called speller.\n\nBe sure to compile speller by executing make speller (or just make). Executing make dictionary won’t work!"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#specification",
    "href": "homework/hw_6/6.2_speller.html#specification",
    "title": "Speller",
    "section": "Specification",
    "text": "Specification\nAlright, the challenge now before you is to implement, in order, load, hash, size, check, and unload as efficiently as possible using a hash table in such a way that TIME IN load, TIME IN check, TIME IN size, and TIME IN unload are all minimized. To be sure, it’s not obvious what it even means to be minimized, inasmuch as these benchmarks will certainly vary as you feed speller different values for dictionary and for text. But therein lies the challenge, if not the fun, of this problem. This problem is your chance to design. Although we invite you to minimize space, your ultimate enemy is time. But before you dive in, some specifications from us.\n\nYou may not alter speller.c or Makefile.\nYou may alter dictionary.c (and, in fact, must in order to complete the implementations of load, hash, size, check, and unload), but you may not alter the declarations (i.e., prototypes) of load, hash, size, check, or unload. You may, though, add new functions and (local or global) variables to dictionary.c.\nYou may change the value of N in dictionary.c, so that your hash table can have more buckets.\nYou may alter dictionary.h, but you may not alter the declarations of load, hash, size, check, or unload.\nYour implementation of check must be case-insensitive. In other words, if foo is in dictionary, then check should return true given any capitalization thereof; none of foo, foO, fOo, fOO, fOO, Foo, FoO, FOo, and FOO should be considered misspelled.\nCapitalization aside, your implementation of check should only return true for words actually in dictionary. Beware hard-coding common words (e.g., the), lest we pass your implementation a dictionary without those same words. Moreover, the only possessives allowed are those actually in dictionary. In other words, even if foo is in dictionary, check should return false given foo's if foo's is not also in dictionary.\nYou may assume that any dictionary passed to your program will be structured exactly like ours, alphabetically sorted from top to bottom with one word per line, each of which ends with \\n. You may also assume that dictionary will contain at least one word, that no word will be longer than LENGTH (a constant defined in dictionary.h) characters, that no word will appear more than once, that each word will contain only lowercase alphabetical characters and possibly apostrophes, and that no word will start with an apostrophe.\nYou may assume that check will only be passed words that contain (uppercase or lowercase) alphabetical characters and possibly apostrophes.\nYour spell checker may only take text and, optionally, dictionary as input. Although you might be inclined (particularly if among those more comfortable) to “pre-process” our default dictionary in order to derive an “ideal hash function” for it, you may not save the output of any such pre-processing to disk in order to load it back into memory on subsequent runs of your spell checker in order to gain an advantage.\nYour spell checker must not leak any memory. Be sure to check for leaks with valgrind.\nThe hash function you write should ultimately be your own, not one you search for online.\n\nAlright, ready to go?\n\nImplement load.\nImplement hash.\nImplement size.\nImplement check.\nImplement unload."
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#hints",
    "href": "homework/hw_6/6.2_speller.html#hints",
    "title": "Speller",
    "section": "Hints",
    "text": "Hints\nClick the below toggles to read some advice!\nImplement load\nComplete the load function. load should load the dictionary into memory (in particular, into a hash table!). load should return true if successful and false otherwise.\nConsider that this problem is just composed of smaller problems:\n\nOpen the dictionary file\nRead each word in the file\n\nAdd each word to the hash table\n\nClose the dictionary file\n\nWrite some pseudocode to remind yourself to do just that:\nbool load(const char *dictionary)\n{\n    // Open the dictionary file\n\n    // Read each word in the file\n\n        // Add each word to the hash table\n\n    // Close the dictionary file\n}\n\nConsider first how to open the dictionary file. fopen is a natural choice. You can use mode r, given that you need only read words from the dictionary file (not write or append them).\nbool load(const char *dictionary)\n{\n    // Open the dictionary file\n    FILE *source = fopen(dictionary, \"r\");\n\n    // Read each word in the file\n\n        // Add each word to the hash table\n\n    // Close the dictionary file\n}\n\nBefore moving on, you should write code to check whether the file opened correctly. That’s up to you! It’s also best to ensure you close every file you open, so now’s a good time to write the code to close the dictionary file:\nbool load(const char *dictionary)\n{\n    // Open the dictionary file\n    FILE *source = fopen(dictionary, \"r\");\n\n    // Read each word in the file\n\n        // Add each word to the hash table\n\n    // Close the dictionary file\n    fclose(source);\n}\n\nWhat remains is to read each word in the file and to add each word to the hash table. Return true when the entire operation is successful and false if it ever fails. Consider following this problem’s walkthrough and continue to break sub-problems into even smaller problems. For example, adding each word to the hash table might only be a matter of implementing a few, even smaller, steps:\n\nCreate space for a new hash table node\nCopy the word into the new node\nHash the word to obtain its hash value\nInsert the new node into the hash table (using the index specified by its hash value)\n\nOf course, there’s more one way to approach this problem, each with their own design trade-offs. For that reason, the rest of the code is up to you!\nImplement hash\nComplete the hash function. hash should take a string, word, as input and return a positive (“unsigned”) int.\nThe hash function given to you returns an int between 0 and 25, inclusive, based on the first character of word. However, there are many ways to implement a hash function beyond using the first character (or characters) of a word. Consider a hash function that uses a sum of ASCII values or the length of a word. A good hash function reduces “collisions” and has a (mostly!) even distribution across hash table “buckets”.\nImplement size\nComplete the size function. size should return the number of words loaded in the dictionary. Consider two approaches to this problem:\n\nCount each word as you load it into the dictionary. Return that count when size is called.\nEach time size is called, iterate through the words in the hash table to count them up. Return that count.\n\nWhich seems most efficient to you? Whichever you choose, we’ll leave the code up to you.\nImplement check\nComplete the check function. check should return true if a word is located in the dictionary, otherwise false.\nConsider that this problem is also composed of smaller problems. If you’ve implemented a hash table, finding a word takes only a few steps:\n\nHash the word to obtain its hash value\nSearch the hash table at the location specified by the word’s hash value\n\nReturn true if the word is found\n\nReturn false if no word is found\n\nTo compare two strings case-insensitively, you may find strcasecmp (declared in strings.h) useful! You’ll likely also want to ensure that your hash function is case-insensitive, such that foo and FOO have the same hash value.\nImplement unload\nComplete the unload function. Be sure to free in unload any memory that you allocated in load!\nRecall that valgrind is your newest best friend. Know that valgrind watches for leaks while your program is actually running, so be sure to provide command-line arguments if you want valgrind to analyze speller while you use a particular dictionary and/or text, as in the below. Best to use a small text, though, else valgrind could take quite a while to run.\nvalgrind ./speller texts/cat.txt\n\nIf you run valgrind without specifying a text for speller, your implementations of load and unload won’t actually get called (and thus analyzed).\nIf unsure how to interpret the output of valgrind, do just ask help50 for help:\nhelp50 valgrind ./speller texts/cat.txt"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#walkthroughs",
    "href": "homework/hw_6/6.2_speller.html#walkthroughs",
    "title": "Speller",
    "section": "Walkthroughs",
    "text": "Walkthroughs\nNote that there are 6 videos in this playlist."
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#how-to-test",
    "href": "homework/hw_6/6.2_speller.html#how-to-test",
    "title": "Speller",
    "section": "How to Test",
    "text": "How to Test\nHow to check whether your program is outting the right misspelled words? Well, you’re welcome to consult the “answer keys” that are inside of the keys directory that’s inside of your speller directory. For instance, inside of keys/lalaland.txt are all of the words that your program should think are misspelled.\nYou could therefore run your program on some text in one window, as with the below.\n./speller texts/lalaland.txt\n\nAnd you could then run the staff’s solution on the same text in another window, as with the below.\n./speller50 texts/lalaland.txt\n\nAnd you could then compare the windows visually side by side. That could get tedious quickly, though. So you might instead want to “redirect” your program’s output to a file, as with the below.\n./speller texts/lalaland.txt &gt; student.txt\n./speller50 texts/lalaland.txt &gt; staff.txt\n\nYou can then compare both files side by side in the same window with a program like diff, as with the below.\ndiff -y student.txt staff.txt\n\nAlternatively, to save time, you could just compare your program’s output (assuming you redirected it to, e.g., student.txt) against one of the answer keys without running the staff’s solution, as with the below.\ndiff -y student.txt keys/lalaland.txt\n\nIf your program’s output matches the staff’s, diff will output two columns that should be identical except for, perhaps, the running times at the bottom. If the columns differ, though, you’ll see a &gt; or | where they differ. For instance, if you see\nMISSPELLED WORDS                                                MISSPELLED WORDS\n\nTECHNO                                                          TECHNO\nL                                                               L\n                                                              &gt; Thelonious\nPrius                                                           Prius\n                                                              &gt; MIA\nL                                                               L\n\nthat means your program (whose output is on the left) does not think that Thelonious or MIA is misspelled, even though the staff’s output (on the right) does, as is implied by the absence of, say, Thelonious in the lefthand column and the presence of Thelonious in the righthand column.\nFinally, be sure to test with both the default large and small dictionaries. Be careful not to assume that if your solution runs successfully with the large dictionary it will also run successfully with the small one. Here’s how to try the small dictionary:\n./speller dictionaries/small texts/cat.txt \n\n\nCorrectness\ncheck50 cs50/problems/2025/x/speller\n\n\n\nStyle\nstyle50 dictionary.c"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#staffs-solution",
    "href": "homework/hw_6/6.2_speller.html#staffs-solution",
    "title": "Speller",
    "section": "Staff’s Solution",
    "text": "Staff’s Solution\nHow to assess just how fast (and correct) your code is? Well, as always, feel free to play with the staff’s solution, as with the below, and compare its numbers against yours.\n./speller50 texts/lalaland.txt"
  },
  {
    "objectID": "homework/hw_6/6.2_speller.html#how-to-submit",
    "href": "homework/hw_6/6.2_speller.html#how-to-submit",
    "title": "Speller",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/speller"
  },
  {
    "objectID": "homework/hw_7/7.1_hello.html",
    "href": "homework/hw_7/7.1_hello.html",
    "title": "Hello",
    "section": "",
    "text": "Week 6, Problem 1\nSource: https://cs50.harvard.edu/x/psets/6/hello/"
  },
  {
    "objectID": "homework/hw_7/7.1_hello.html#problem-to-solve",
    "href": "homework/hw_7/7.1_hello.html#problem-to-solve",
    "title": "Hello",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a file called hello.py in a folder called sentimental-hello, implement a program that prompts a user for their name, and then prints hello, so-and-so, where so-and-so is their provided name, exactly as you did in Problem Set 1. Except that your program this time should be written in Python!\nHints\n\nRecall that you can get a str from a user with get_string, which is declared in the cs50 library.\nRecall that you can print a str with print.\nRecall that you can create formatted strings in Python by prepending f to a string itself. For example, f\"{name}\" will substitute (“interpolate”) the value of the variable name where you’ve written {name}."
  },
  {
    "objectID": "homework/hw_7/7.1_hello.html#demo",
    "href": "homework/hw_7/7.1_hello.html#demo",
    "title": "Hello",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.1_hello.html#how-to-test",
    "href": "homework/hw_7/7.1_hello.html#how-to-test",
    "title": "Hello",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python hello.py, and wait for a prompt for input. Type in David and press enter. Your program should output hello, David.\nRun your program as python hello.py, and wait for a prompt for input. Type in Inno and press enter. Your program should output hello, Inno.\nRun your program as python hello.py, and wait for a prompt for input. Type in Kamryn and press enter. Your program should output hello, Kamryn.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/hello\n\n\n\nStyle\nstyle50 hello.py"
  },
  {
    "objectID": "homework/hw_7/7.1_hello.html#how-to-submit",
    "href": "homework/hw_7/7.1_hello.html#how-to-submit",
    "title": "Hello",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/hello"
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html",
    "href": "homework/hw_7/7.3_this_version_of_mario.html",
    "title": "this version of Mario",
    "section": "",
    "text": "Week 6, Problem 3\nSource: https://cs50.harvard.edu/x/psets/6/mario/more/"
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html#problem-to-solve",
    "href": "homework/hw_7/7.3_this_version_of_mario.html#problem-to-solve",
    "title": "this version of Mario",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a file called mario.py in a folder called sentimental-mario-more, write a program that recreates a half-pyramid using hashes (#) for blocks, exactly as you did in Problem Set 1. Your program this time should be written in Python!"
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html#demo",
    "href": "homework/hw_7/7.3_this_version_of_mario.html#demo",
    "title": "this version of Mario",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html#specification",
    "href": "homework/hw_7/7.3_this_version_of_mario.html#specification",
    "title": "this version of Mario",
    "section": "Specification",
    "text": "Specification\n\nTo make things more interesting, first prompt the user with get_int for the half-pyramid’s height, a positive integer between 1 and 8, inclusive. (The height of the half-pyramids pictured above happens to be 4, the width of each half-pyramid 4, with a gap of size 2 separating them).\nIf the user fails to provide a positive integer no greater than 8, you should re-prompt for the same again.\nThen, generate (with the help of print and one or more loops) the desired half-pyramids.\nTake care to align the bottom-left corner of your pyramid with the left-hand edge of your terminal window, and ensure that there are two spaces between the two pyramids, and that there are no additional spaces after the last set of hashes on each row."
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html#how-to-test",
    "href": "homework/hw_7/7.3_this_version_of_mario.html#how-to-test",
    "title": "this version of Mario",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python mario.py and wait for a prompt for input. Type in -1 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Type in 0 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Type in 1 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n#  #\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 2 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n #  #\n##  ##\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 8 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n       #  #\n      ##  ##\n     ###  ###\n    ####  ####\n   #####  #####\n  ######  ######\n #######  #######\n########  ########\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in 9 and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number. Then, type in 2 and press enter. Your program should generate the below output. Be sure that the pyramid is aligned to the bottom-left corner of your terminal, and that there are no extra spaces at the end of each line.\n\n #  #\n##  ##\n\n\nRun your program as python mario.py and wait for a prompt for input. Type in foo and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\nRun your program as python mario.py and wait for a prompt for input. Do not type anything, and press enter. Your program should reject this input as invalid, as by re-prompting the user to type in another number.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/mario/more\n\n\n\nStyle\nstyle50 mario.py"
  },
  {
    "objectID": "homework/hw_7/7.3_this_version_of_mario.html#how-to-submit",
    "href": "homework/hw_7/7.3_this_version_of_mario.html#how-to-submit",
    "title": "this version of Mario",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/mario/more"
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html",
    "href": "homework/hw_7/7.5_credit.html",
    "title": "Credit",
    "section": "",
    "text": "Week 6, Problem 5\nSource: https://cs50.harvard.edu/x/psets/6/credit/"
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#problem-to-solve",
    "href": "homework/hw_7/7.5_credit.html#problem-to-solve",
    "title": "Credit",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nIn a filed called credit.py in a folder called sentimental-credit, write a program that prompts the user for a credit card number and then reports (via print) whether it is a valid American Express, MasterCard, or Visa card number, exactly as you did in Problem Set 1. Your program this time should be written in Python!"
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#demo",
    "href": "homework/hw_7/7.5_credit.html#demo",
    "title": "Credit",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#specification",
    "href": "homework/hw_7/7.5_credit.html#specification",
    "title": "Credit",
    "section": "Specification",
    "text": "Specification\n\nSo that we can automate some tests of your code, we ask that your program’s last line of output be AMEX\\n or MASTERCARD\\n or VISA\\n or INVALID\\n, nothing more, nothing less.\nFor simplicity, you may assume that the user’s input will be entirely numeric (i.e., devoid of hyphens, as might be printed on an actual card).\nBest to use get_int or get_string from CS50’s library to get users’ input, depending on how you to decide to implement this one."
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#hints",
    "href": "homework/hw_7/7.5_credit.html#hints",
    "title": "Credit",
    "section": "Hints",
    "text": "Hints\n\nIt’s possible to use regular expressions to validate user input. You might use Python’s re module, for example, to check whether the user’s input is indeed a sequence of digits of the correct length."
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#how-to-test",
    "href": "homework/hw_7/7.5_credit.html#how-to-test",
    "title": "Credit",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python credit.py, and wait for a prompt for input. Type in 378282246310005 and press enter. Your program should output AMEX.\nRun your program as python credit.py, and wait for a prompt for input. Type in 371449635398431 and press enter. Your program should output AMEX.\nRun your program as python credit.py, and wait for a prompt for input. Type in 5555555555554444 and press enter. Your program should output MASTERCARD.\nRun your program as python credit.py, and wait for a prompt for input. Type in 5105105105105100 and press enter. Your program should output MASTERCARD.\nRun your program as python credit.py, and wait for a prompt for input. Type in 4111111111111111 and press enter. Your program should output VISA.\nRun your program as python credit.py, and wait for a prompt for input. Type in 4012888888881881 and press enter. Your program should output VISA.\nRun your program as python credit.py, and wait for a prompt for input. Type in 1234567890 and press enter. Your program should output INVALID.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/sentimental/credit\n\n\n\nStyle\nstyle50 credit.py"
  },
  {
    "objectID": "homework/hw_7/7.5_credit.html#how-to-submit",
    "href": "homework/hw_7/7.5_credit.html#how-to-submit",
    "title": "Credit",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/sentimental/credit"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html",
    "href": "homework/hw_7/7.7_dna.html",
    "title": "DNA",
    "section": "",
    "text": "Week 6, Problem 7\nSource: https://cs50.harvard.edu/x/psets/6/dna/"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#problem-to-solve",
    "href": "homework/hw_7/7.7_dna.html#problem-to-solve",
    "title": "DNA",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nDNA, the carrier of genetic information in living things, has been used in criminal justice for decades. But how, exactly, does DNA profiling work? Given a sequence of DNA, how can forensic investigators identify to whom it belongs?\nIn a file called dna.py in a folder called dna, implement a program that identifies to whom a sequence of DNA belongs."
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#demo",
    "href": "homework/hw_7/7.7_dna.html#demo",
    "title": "DNA",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#distribution-code",
    "href": "homework/hw_7/7.7_dna.html#distribution-code",
    "title": "DNA",
    "section": "Distribution Code",
    "text": "Distribution Code\nFor this problem, you’ll extend the functionality of code provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/6/dna.zip\n\nin order to download a ZIP called dna.zip into your codespace.\nThen execute\nunzip dna.zip\n\nto create a folder called dna. You no longer need the ZIP file, so you can execute\nrm dna.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd dna\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\ndna/ $\n\nExecute ls by itself, and you should see a few files and folders:\ndatabases/ dna.py sequences/\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#background",
    "href": "homework/hw_7/7.7_dna.html#background",
    "title": "DNA",
    "section": "Background",
    "text": "Background\nDNA is really just a sequence of molecules called nucleotides, arranged into a particular shape (a double helix). Every human cell has billions of nucleotides arranged in sequence. Each nucleotide of DNA contains one of four different bases: adenine (A), cytosine (C), guanine (G), or thymine (T). Some portions of this sequence (i.e., genome) are the same, or at least very similar, across almost all humans, but other portions of the sequence have a higher genetic diversity and thus vary more across the population.\nOne place where DNA tends to have high genetic diversity is in Short Tandem Repeats (STRs). An STR is a short sequence of DNA bases that tends to repeat consecutively numerous times at specific locations inside of a person’s DNA. The number of times any particular STR repeats varies a lot among individuals. In the DNA samples below, for example, Alice has the STR AGAT repeated four times in her DNA, while Bob has the same STR repeated five times.\n\n\n\nSample STRs\n\n\nUsing multiple STRs, rather than just one, can improve the accuracy of DNA profiling. If the probability that two people have the same number of repeats for a single STR is 5%, and the analyst looks at 10 different STRs, then the probability that two DNA samples match purely by chance is about 1 in 1 quadrillion (assuming all STRs are independent of each other). So if two DNA samples match in the number of repeats for each of the STRs, the analyst can be pretty confident they came from the same person. CODIS, the FBI’s DNA database, uses 20 different STRs as part of its DNA profiling process.\nWhat might such a DNA database look like? Well, in its simplest form, you could imagine formatting a DNA database as a CSV file, wherein each row corresponds to an individual, and each column corresponds to a particular STR.\nname,AGAT,AATG,TATC\nAlice,28,42,14\nBob,17,22,19\nCharlie,36,18,25\n\nThe data in the above file would suggest that Alice has the sequence AGAT repeated 28 times consecutively somewhere in her DNA, the sequence AATG repeated 42 times, and TATC repeated 14 times. Bob, meanwhile, has those same three STRs repeated 17 times, 22 times, and 19 times, respectively. And Charlie has those same three STRs repeated 36, 18, and 25 times, respectively.\nSo given a sequence of DNA, how might you identify to whom it belongs? Well, imagine that you looked through the DNA sequence for the longest consecutive sequence of repeated AGATs and found that the longest sequence was 17 repeats long. If you then found that the longest sequence of AATG is 22 repeats long, and the longest sequence of TATC is 19 repeats long, that would provide pretty good evidence that the DNA was Bob’s. Of course, it’s also possible that once you take the counts for each of the STRs, it doesn’t match anyone in your DNA database, in which case you have no match.\nIn practice, since analysts know on which chromosome and at which location in the DNA an STR will be found, they can localize their search to just a narrow section of DNA. But we’ll ignore that detail for this problem.\nYour task is to write a program that will take a sequence of DNA and a CSV file containing STR counts for a list of individuals and then output to whom the DNA (most likely) belongs."
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#specification",
    "href": "homework/hw_7/7.7_dna.html#specification",
    "title": "DNA",
    "section": "Specification",
    "text": "Specification\n\nThe program should require as its first command-line argument the name of a CSV file containing the STR counts for a list of individuals and should require as its second command-line argument the name of a text file containing the DNA sequence to identify.\n\nIf your program is executed with the incorrect number of command-line arguments, your program should print an error message of your choice (with print). If the correct number of arguments are provided, you may assume that the first argument is indeed the filename of a valid CSV file and that the second argument is the filename of a valid text file.\n\nYour program should open the CSV file and read its contents into memory.\n\nYou may assume that the first row of the CSV file will be the column names. The first column will be the word name and the remaining columns will be the STR sequences themselves.\n\nYour program should open the DNA sequence and read its contents into memory.\nFor each of the STRs (from the first line of the CSV file), your program should compute the longest run of consecutive repeats of the STR in the DNA sequence to identify. Notice that we’ve defined a helper function for you, longest_match, which will do just that!\nIf the STR counts match exactly with any of the individuals in the CSV file, your program should print out the name of the matching individual.\n\nYou may assume that the STR counts will not match more than one individual.\nIf the STR counts do not match exactly with any of the individuals in the CSV file, your program should print No match."
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#hints",
    "href": "homework/hw_7/7.7_dna.html#hints",
    "title": "DNA",
    "section": "Hints",
    "text": "Hints\n\nYou may find Python’s csv module helpful for reading CSV files into memory. Of particular help might be csv.DictReader.\n\nFor instance, if a file like foo.csv has a header row, wherein each string is the name of some field, here’s how you might print those fieldnames as a list:\nimport csv\n\nwith open(\"foo.csv\") as file:\n    reader = csv.DictReader(file)\n    print(reader.fieldnames)\n\nAnd here’s how you read all of the (other) rows from a CSV into a list, wherein each element is a dict that represents that row:\nimport csv\n\nrows = []\nwith open(\"foo.csv\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        rows.append(row)\n\n\nThe open and read functions might also prove useful for reading text files into memory.\nConsider what data structures might be helpful for keeping tracking of information in your program. A list or a dict may prove useful.\nRemember we’ve defined a function (longest_match) that, given both a DNA sequence and an STR as inputs, returns the maximum number of times that the STR repeats. You can then use that function in other parts of your program!"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#walkthrough",
    "href": "homework/hw_7/7.7_dna.html#walkthrough",
    "title": "DNA",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#how-to-test",
    "href": "homework/hw_7/7.7_dna.html#how-to-test",
    "title": "DNA",
    "section": "How to Test",
    "text": "How to Test\nWhile check50 is available for this problem, you’re encouraged to first test your code on your own for each of the following.\n\nRun your program as python dna.py databases/small.csv sequences/1.txt. Your program should output Bob.\nRun your program as python dna.py databases/small.csv sequences/2.txt. Your program should output No match.\nRun your program as python dna.py databases/small.csv sequences/3.txt. Your program should output No match.\nRun your program as python dna.py databases/small.csv sequences/4.txt. Your program should output Alice.\nRun your program as python dna.py databases/large.csv sequences/5.txt. Your program should output Lavender.\nRun your program as python dna.py databases/large.csv sequences/6.txt. Your program should output Luna.\nRun your program as python dna.py databases/large.csv sequences/7.txt. Your program should output Ron.\nRun your program as python dna.py databases/large.csv sequences/8.txt. Your program should output Ginny.\nRun your program as python dna.py databases/large.csv sequences/9.txt. Your program should output Draco.\nRun your program as python dna.py databases/large.csv sequences/10.txt. Your program should output Albus.\nRun your program as python dna.py databases/large.csv sequences/11.txt. Your program should output Hermione.\nRun your program as python dna.py databases/large.csv sequences/12.txt. Your program should output Lily.\nRun your program as python dna.py databases/large.csv sequences/13.txt. Your program should output No match.\nRun your program as python dna.py databases/large.csv sequences/14.txt. Your program should output Severus.\nRun your program as python dna.py databases/large.csv sequences/15.txt. Your program should output Sirius.\nRun your program as python dna.py databases/large.csv sequences/16.txt. Your program should output No match.\nRun your program as python dna.py databases/large.csv sequences/17.txt. Your program should output Harry.\nRun your program as python dna.py databases/large.csv sequences/18.txt. Your program should output No match.\nRun your program as python dna.py databases/large.csv sequences/19.txt. Your program should output Fred.\nRun your program as python dna.py databases/large.csv sequences/20.txt. Your program should output No match.\n\n\nCorrectness\ncheck50 cs50/problems/2025/x/dna\n\n\n\nStyle\nstyle50 dna.py"
  },
  {
    "objectID": "homework/hw_7/7.7_dna.html#how-to-submit",
    "href": "homework/hw_7/7.7_dna.html#how-to-submit",
    "title": "DNA",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/dna"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html",
    "href": "homework/hw_8/8.1_songs.html",
    "title": "Songs",
    "section": "",
    "text": "Week 7, Problem 1\nSource: https://cs50.harvard.edu/x/psets/7/songs/"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#problem-to-solve",
    "href": "homework/hw_8/8.1_songs.html#problem-to-solve",
    "title": "Songs",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nWrite SQL queries to answer questions about a database of the 100 most-streamed songs on Spotify in 2018."
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#demo",
    "href": "homework/hw_8/8.1_songs.html#demo",
    "title": "Songs",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#getting-started",
    "href": "homework/hw_8/8.1_songs.html#getting-started",
    "title": "Songs",
    "section": "Getting Started",
    "text": "Getting Started\nFor this problem, you’ll use a database provided to you by CS50’s staff.\nDownload the distribution code\nOpen VS Code.\nStart by clicking inside your terminal window, then execute cd by itself. You should find that its “prompt” resembles the below.\n$\n\nClick inside of that terminal window and then execute\nwget https://cdn.cs50.net/2024/fall/psets/7/songs.zip\n\nfollowed by Enter in order to download a ZIP called songs.zip in your codespace. Take care not to overlook the space between wget and the following URL, or any other character for that matter!\nNow execute\nunzip songs.zip\n\nto create a folder called songs. You no longer need the ZIP file, so you can execute\nrm songs.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd songs\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nsongs/ $\n\nIf all was successful, you should execute\nls\n\nand you should see 8 .sql files, songs.db, and answers.txt.\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#understanding",
    "href": "homework/hw_8/8.1_songs.html#understanding",
    "title": "Songs",
    "section": "Understanding",
    "text": "Understanding\nProvided to you is a file called songs.db, a SQLite database that stores data from Spotify about songs and their artists. This dataset contains the top 100 streamed songs on Spotify in 2018. In a terminal window, run sqlite3 songs.db so that you can begin executing queries on the database.\nFirst, when sqlite3 prompts you to provide a query, type .schema and press enter. This will output the CREATE TABLE statements that were used to generate each of the tables in the database. By examining those statements, you can identify the columns present in each table.\nNotice that every artist has an id and a name. Notice, too, that every song has a name, an artist_id (corresponding to the id of the artist of the song), as well as values for the danceability, energy, key, loudness, speechiness (presence of spoken words in a track), valence, tempo, and duration of the song (measured in milliseconds).\nThe challenge ahead of you is to write SQL queries to answer a variety of different questions by selecting data from one or more of these tables. After you do so, you’ll reflect on the ways Spotify might use this same data in their annual Spotify Wrapped campaign to characterize listeners’ habits."
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#implementation-details",
    "href": "homework/hw_8/8.1_songs.html#implementation-details",
    "title": "Songs",
    "section": "Implementation Details",
    "text": "Implementation Details\nFor each of the following problems, you should write a single SQL query that outputs the results specified by each problem. Your response must take the form of a single SQL query, though you may nest other queries inside of your query. You should not assume anything about the ids of any particular songs or artists: your queries should be accurate even if the id of any particular song or person were different. Finally, each query should return only the data necessary to answer the question: if the problem only asks you to output the names of songs, for example, then your query should not also output each song’s tempo.\n\nIn 1.sql, write a SQL query to list the names of all songs in the database.\n\nYour query should output a table with a single column for the name of each song.\n\nIn 2.sql, write a SQL query to list the names of all songs in increasing order of tempo.\n\nYour query should output a table with a single column for the name of each song.\n\nIn 3.sql, write a SQL query to list the names of the top 5 longest songs, in descending order of length.\n\nYour query should output a table with a single column for the name of each song.\n\nIn 4.sql, write a SQL query that lists the names of any songs that have danceability, energy, and valence greater than 0.75.\n\nYour query should output a table with a single column for the name of each song.\n\nIn 5.sql, write a SQL query that returns the average energy of all the songs.\n\nYour query should output a table with a single column and a single row containing the average energy.\n\nIn 6.sql, write a SQL query that lists the names of songs that are by Post Malone.\n\nYour query should output a table with a single column for the name of each song.\nYou should not make any assumptions about what Post Malone’s artist_id is.\n\nIn 7.sql, write a SQL query that returns the average energy of songs that are by Drake.\n\nYour query should output a table with a single column and a single row containing the average energy.\nYou should not make any assumptions about what Drake’s artist_id is.\n\nIn 8.sql, write a SQL query that lists the names of the songs that feature other artists.\n\nSongs that feature other artists will include “feat.” in the name of the song.\nYour query should output a table with a single column for the name of each song."
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#hints",
    "href": "homework/hw_8/8.1_songs.html#hints",
    "title": "Songs",
    "section": "Hints",
    "text": "Hints\nSee this SQL keywords reference for some SQL syntax that may be helpful!\nClick the below toggles to read some advice!\nList the names of all songs in the database\nRecall that, to select all values in a table’s column, you can use SQL’s SELECT keyword. SELECT is followed by the column (or columns) you’d like to select, which is in turn followed by FROM table where table is the name of the table you’d like to select from.\nIn 1.sql, then, try writing the following:\n-- All songs in the database.\nSELECT name\nFROM songs;\n\nList the names of all songs in increasing order of tempo\nRecall that SQL has an ORDER BY keyword, by which you can order the results of your query by the value in a certain column. For example, ORDER BY tempo will order results by the column tempo.\nIn 2.sql, then, try writing the following:\n-- All songs in increasing order of tempo.\nSELECT name\nFROM songs\nORDER BY tempo;\n\nList the names of the top 5 longest songs, in descending order of length\nRecall that ORDER BY need not always sort in ascending order. You can specify that your results be sorted in descending order by appending DESC. For example, ORDER BY duration_ms DESC will list results in descending order, by duration.\nAnd recall, too, that LIMIT n can specify that you only want the first (n) rows that match a specific query. For example, LIMIT 5 will return only the first five results of the query.\nIn 3.sql, then, try writing the following:\n-- The names of the top 5 longest songs, in descending order of length.\nSELECT name\nFROM songs\nORDER BY duration_ms DESC\nLIMIT 5;\n\nList the names of any songs that have danceability, energy, and valence greater than 0.75\nRecall that you can filter results in SQL with WHERE clauses, which are followed by some condition which typically tests the values in a row’s columns.\nRecall, too, that SQL’s operators function much the same way as C’s. For example, &gt; evaluates to “true” when the value on the left is greater than the value on the right. You may chain these expressions together, using AND or OR, to form one larger condition.\nIn 4.sql, then, try writing the following:\n-- The names of any songs that have danceability, energy, and valence greater than 0.75.\nSELECT name\nFROM songs\nWHERE danceability &gt; 0.75 AND energy &gt; 0.75 AND valence &gt; 0.75;\n\nFind average energy of all the songs\nRecall that SQL supports keywords not just to select particular rows, but also to aggregate the data in those rows. In particular, you might find the AVG keyword (to compute averages) useful. To aggregate the results of a column, just apply the aggregation function to that column. For example, SELECT AVG(energy) will find the average of the values in the energy column for the given query.\nIn 5.sql, then, try writing the following:\n-- The average energy of all the songs.\nSELECT AVG(energy)\nFROM songs;\n\nList the names of songs that are by Post Malone\nNotice that, if you execute .schema songs in your sqlite prompt, the songs table has song names but not artist names! Instead, songs has an artist_id column. To list the names of songs by Post Malone, then, you’ll first need to identify Post Malone’s artist id.\n-- Identify Post Malone's artist id\nSELECT id\nFROM artists\nWHERE name = 'Post Malone';\n\nThis query returns 54. Now, you could query the songs table for any song with Post Malone’s id.\nSELECT name\nFROM songs\nWHERE artist_id = 54;\n\nBut, per the specification, you should be mindful not to assume knowledge of any ids. You could improve the design of this query by nesting your two queries.\nIn 6.sql, then, try writing the following:\n-- The names of songs that are by Post Malone.\nSELECT name\nFROM songs\nWHERE artist_id =\n(\n    SELECT id\n    FROM artists\n    WHERE name = 'Post Malone'\n);\n\nFind the average energy of songs that are by Drake\nNotice that, similar to the previous query, you’ll need to combine multiple tables to successfully run this query. You could again use nested subqueries, but consider another approach too!\nRecall that you can use SQL’s JOIN keyword to combine multiple tables into one, so long as you specify which columns across those tables should ultimately match. For example, the following query joins the songs and artists tables, indicating that the artist_id column in the songs table and the id column in the artists table should match:\nSELECT *\nFROM songs\nJOIN artists ON songs.artist_id = artists.id\n\nWith these two tables combined, it’s only a matter of filtering your selection to find the average energy of songs by Drake.\nIn 7.sql, then, try writing the following:\n-- The average energy of songs that are by Drake\nSELECT AVG(energy)\nFROM songs\nJOIN artists ON songs.artist_id = artists.id\nWHERE artists.name = 'Drake';\n\nList the names of the songs that feature other artists\nFor this query, note that songs which feature other artists typically have some mention of “feat.” in their title. Recall that SQL’s LIKE keyword can be used to match strings with certain phrases (like “feat.”!). To do so, you can use %: a wildcard character that matches any sequence of characters.\nIn 8.sql, then, try writing the following:\n-- The names of songs that feature other artists.\nSELECT name\nFROM songs\nWHERE name LIKE '%feat.%';"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#walkthrough",
    "href": "homework/hw_8/8.1_songs.html#walkthrough",
    "title": "Songs",
    "section": "Walkthrough",
    "text": "Walkthrough\nNot sure how to solve?"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#spotify-wrapped",
    "href": "homework/hw_8/8.1_songs.html#spotify-wrapped",
    "title": "Songs",
    "section": "Spotify Wrapped",
    "text": "Spotify Wrapped\nSpotify Wrapped is a feature presenting Spotify users’ 100 most played songs from the past year. In 2021, Spotify Wrapped calculated an “Audio Aura” for each user, a “reading of [their] two most prominent moods as dictated by [their] top songs and artists of the year.” Suppose Spotify determines an audio aura by looking at the average energy, valence, and danceability of a person’s top 100 songs from the past year. In answers.txt, reflect on the following questions:\n\nIf songs.db contains the top 100 songs of one listener from 2018, how would you characterize their audio aura?\nHypothesize about why the way you’ve calculated this aura might not be very representative of the listener. What better ways of calculating this aura would you propose?\n\nBe sure to submit answers.txt along with each of your .sql files!"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#how-to-test",
    "href": "homework/hw_8/8.1_songs.html#how-to-test",
    "title": "Songs",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\ncheck50 cs50/problems/2025/x/songs"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#how-to-submit",
    "href": "homework/hw_8/8.1_songs.html#how-to-submit",
    "title": "Songs",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/songs"
  },
  {
    "objectID": "homework/hw_8/8.1_songs.html#acknowledgements",
    "href": "homework/hw_8/8.1_songs.html#acknowledgements",
    "title": "Songs",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nDataset from Kaggle."
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html",
    "href": "homework/hw_8/8.3_fiftyville.html",
    "title": "Fiftyville",
    "section": "",
    "text": "Week 7, Problem 3\nSource: https://cs50.harvard.edu/x/psets/7/fiftyville/"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#problem-to-solve",
    "href": "homework/hw_8/8.3_fiftyville.html#problem-to-solve",
    "title": "Fiftyville",
    "section": "Problem to Solve",
    "text": "Problem to Solve\nThe CS50 Duck has been stolen! The town of Fiftyville has called upon you to solve the mystery of the stolen duck. Authorities believe that the thief stole the duck and then, shortly afterwards, took a flight out of town with the help of an accomplice. Your goal is to identify:\n\nWho the thief is,\nWhat city the thief escaped to, and\nWho the thief’s accomplice is who helped them escape\n\nAll you know is that the theft took place on July 28, 2024 and that it took place on Humphrey Street.\nHow will you go about solving this mystery? The Fiftyville authorities have taken some of the town’s records from around the time of the theft and prepared a SQLite database for you, fiftyville.db, which contains tables of data from around the town. You can query that table using SQL SELECT queries to access the data of interest to you. Using just the information in the database, your task is to solve the mystery."
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#demo",
    "href": "homework/hw_8/8.3_fiftyville.html#demo",
    "title": "Fiftyville",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#getting-started",
    "href": "homework/hw_8/8.3_fiftyville.html#getting-started",
    "title": "Fiftyville",
    "section": "Getting Started",
    "text": "Getting Started\nFor this problem, you’ll use a database provided to you by CS50’s staff.\nDownload the distribution code\nLog into cs50.dev, click on your terminal window, and execute cd by itself. You should find that your terminal window’s prompt resembles the below:\n$\n\nNext execute\nwget https://cdn.cs50.net/2024/fall/psets/7/fiftyville.zip\n\nin order to download a ZIP called fiftyville.zip into your codespace.\nThen execute\nunzip fiftyville.zip\n\nto create a folder called fiftyville. You no longer need the ZIP file, so you can execute\nrm fiftyville.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd fiftyville\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\nfiftyville/ $\n\nExecute ls by itself, and you should see a few files:\nanswers.txt  fiftyville.db  log.sql\n\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#specification",
    "href": "homework/hw_8/8.3_fiftyville.html#specification",
    "title": "Fiftyville",
    "section": "Specification",
    "text": "Specification\nFor this problem, equally as important as solving the mystery itself is the process that you use to solve the mystery. In log.sql, keep a log of all SQL queries that you run on the database. Above each query, label each with a comment (in SQL, comments are any lines that begin with --) describing why you’re running the query and/or what information you’re hoping to get out of that particular query. You can use comments in the log file to add additional notes about your thought process as you solve the mystery: ultimately, this file should serve as evidence of the process you used to identify the thief!\nAs you write your queries, you may notice that some of them can become quite complex. To help keep your queries readable, see principles of good style at sqlstyle.guide. The indentation section may be particularly helpful!\nOnce you solve the mystery, complete each of the lines in answers.txt by filling in the name of the thief, the city that the thief escaped to, and the name of the thief’s accomplice who helped them escape town. (Be sure not to change any of the existing text in the file or to add any other lines to the file!)\nUltimately, you should submit both your log.sql and answers.txt files."
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#walkthrough",
    "href": "homework/hw_8/8.3_fiftyville.html#walkthrough",
    "title": "Fiftyville",
    "section": "Walkthrough",
    "text": "Walkthrough"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#hints",
    "href": "homework/hw_8/8.3_fiftyville.html#hints",
    "title": "Fiftyville",
    "section": "Hints",
    "text": "Hints\n\nExecute sqlite3 fiftyville.db to begin running queries on the database.\n\nWhile running sqlite3, executing .tables will list all of the tables in the database.\nWhile running sqlite3, executing .schema TABLE_NAME, where TABLE_NAME is the name of a table in the database, will show you the CREATE TABLE command used to create the table. This can be helpful for knowing which columns to query!\n\nYou may find it helpful to start with the crime_scene_reports table. Start by looking for a crime scene report that matches the date and the location of the crime.\nSee this SQL keywords reference for some SQL syntax that may be helpful!"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#how-to-test",
    "href": "homework/hw_8/8.3_fiftyville.html#how-to-test",
    "title": "Fiftyville",
    "section": "How to Test",
    "text": "How to Test\n\nCorrectness\ncheck50 cs50/problems/2025/x/fiftyville"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#how-to-submit",
    "href": "homework/hw_8/8.3_fiftyville.html#how-to-submit",
    "title": "Fiftyville",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/fiftyville"
  },
  {
    "objectID": "homework/hw_8/8.3_fiftyville.html#acknowledgements",
    "href": "homework/hw_8/8.3_fiftyville.html#acknowledgements",
    "title": "Fiftyville",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nInspired by another case over at SQL City."
  },
  {
    "objectID": "homework/hw_9/9.1_trivia.html",
    "href": "homework/hw_9/9.1_trivia.html",
    "title": "Trivia",
    "section": "",
    "text": "Week 8, Problem 1\nSource: https://cs50.harvard.edu/x/psets/8/trivia/"
  },
  {
    "objectID": "homework/hw_9/9.1_trivia.html#getting-started",
    "href": "homework/hw_9/9.1_trivia.html#getting-started",
    "title": "Trivia",
    "section": "Getting Started",
    "text": "Getting Started\nOpen cs50.dev.\nStart by clicking inside your terminal window, then execute cd by itself. You should find that its “prompt” resembles the below.\n$\n\nClick inside of that terminal window and then execute\nwget https://cdn.cs50.net/2024/fall/psets/8/trivia.zip\n\nfollowed by Enter in order to download a ZIP called trivia.zip in your codespace. Take care not to overlook the space between wget and the following URL, or any other character for that matter!\nNow execute\nunzip trivia.zip\n\nto create a folder called trivia. You no longer need the ZIP file, so you can execute\nrm trivia.zip\n\nand respond with “y” followed by Enter at the prompt to remove the ZIP file you downloaded.\nNow type\ncd trivia\n\nfollowed by Enter to move yourself into (i.e., open) that directory. Your prompt should now resemble the below.\ntrivia/ $\n\nIf all was successful, you should execute\nls\n\nand you should see an index.html file and a styles.css file.\nIf you run into any trouble, follow these same steps again and see if you can determine where you went wrong!"
  },
  {
    "objectID": "homework/hw_9/9.1_trivia.html#implementation-details",
    "href": "homework/hw_9/9.1_trivia.html#implementation-details",
    "title": "Trivia",
    "section": "Implementation Details",
    "text": "Implementation Details\nDesign a webpage using HTML, CSS, and JavaScript to let users answer trivia questions.\n\nIn index.html, add beneath “Part 1” a multiple-choice trivia question of your choosing with HTML.\n\nYou should use an h3 heading for the text of your question.\nYou should have one button for each of the possible answer choices. There should be at least three answer choices, of which exactly one should be correct.\n\nUsing JavaScript, add logic so that the buttons change colors when a user clicks on them.\n\nIf a user clicks on a button with an incorrect answer, the button should turn red and text should appear beneath the question that says “Incorrect”.\nIf a user clicks on a button with the correct answer, the button should turn green and text should appear beneath the question that says “Correct!”.\n\nIn index.html, add beneath “Part 2” a text-based free response question of your choosing with HTML.\n\nYou should use an h3 heading for the text of your question.\nYou should use an input field to let the user type a response.\nYou should use a button to let the user confirm their answer.\n\nUsing JavaScript, add logic so that the text field changes color when a user confirms their answer.\n\nIf the user types an incorrect answer and presses the confirmation button, the text field should turn red and text should appear beneath the question that says “Incorrect”.\nIf the user types the correct answer and presses the confirmation button, the input field should turn green and text should appear beneath the question that says “Correct!”.\n\n\nOptionally, you may also:\n\nEdit styles.css to change the CSS of your webpage!\nAdd additional trivia questions to your trivia quiz if you would like!\n\n\nWalkthrough\nThis video was recorded when the course was still using CS50 IDE for writing code. Though the interface may look different from your codespace, the behavior of the two environments should be largely similar!\n\n\nHints\n\nUse document.querySelector to query for a single HTML element.\nUse document.querySelectorAll to query for multiple HTML elements that match a query. The function returns an array of all matching elements.\n\nNot sure how to solve?\n\n\nTesting\nNo check50 for this one, as implementations will vary based on your questions! But be sure to test both incorrect and correct responses for each of your questions to ensure that your webpage responds appropriately.\nRun http-server in your terminal while in your trivia directory to start a web server that serves your webpage."
  },
  {
    "objectID": "homework/hw_9/9.1_trivia.html#how-to-submit",
    "href": "homework/hw_9/9.1_trivia.html#how-to-submit",
    "title": "Trivia",
    "section": "How to Submit",
    "text": "How to Submit\nsubmit50 cs50/problems/2025/x/trivia\n\nWant to see the staff’s solution? You can find two ways of solving the problem here!\nCreating event listeners with JavaScript\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap\" rel=\"stylesheet\"&gt;\n        &lt;link href=\"styles.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;Trivia!&lt;/title&gt;\n        &lt;script&gt;\n\n            // Wait for DOM content to load\n            document.addEventListener('DOMContentLoaded', function() {\n\n                // Get all elements with class \"correct\"\n                let corrects = document.querySelectorAll('.correct');\n\n                // Add event listeners to each correct button\n                for (let i = 0; i &lt; corrects.length; i++) {\n                    corrects[i].addEventListener('click', function() {\n\n                        // Set background color to green\n                        corrects[i].style.backgroundColor = 'Green';\n\n                        // Go to parent element of correct button and find the first element with class \"feedback\" which has that parent\n                        corrects[i].parentElement.querySelector('.feedback').innerHTML = 'Correct!';\n                    });\n                }\n\n                // When any incorrect answer is clicked, change color to red.\n                let incorrects = document.querySelectorAll(\".incorrect\");\n                for (let i = 0; i &lt; incorrects.length; i++) {\n                    incorrects[i].addEventListener('click', function() {\n\n                        // Set background color to red\n                        incorrects[i].style.backgroundColor = 'Red';\n\n                        // Go to parent element of correct button and find the first element with class \"feedback\" which has that parent\n                        incorrects[i].parentElement.querySelector('.feedback').innerHTML = 'Incorrect';\n                    });\n                }\n\n                // Check free response submission\n                document.querySelector('#check').addEventListener('click', function() {\n                    let input = document.querySelector('input');\n                    if (input.value === 'Switzerland') {\n                        input.style.backgroundColor = 'green';\n                        input.parentElement.querySelector('.feedback').innerHTML = 'Correct!';\n                    }\n                    else {\n                        input.style.backgroundColor = 'red';\n                        input.parentElement.querySelector('.feedback').innerHTML = 'Incorrect';\n                    }\n                });\n            });\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;Trivia!&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"section\"&gt;\n                &lt;h2&gt;Part 1: Multiple Choice &lt;/h2&gt;\n                &lt;hr&gt;\n                &lt;h3&gt;What is the approximate ratio of people to sheep in New Zealand?&lt;/h3&gt;\n                &lt;button class=\"incorrect\"&gt;6 people per 1 sheep&lt;/button&gt;\n                &lt;button class=\"incorrect\"&gt;3 people per 1 sheep&lt;/button&gt;\n                &lt;button class=\"incorrect\"&gt;1 person per 1 sheep&lt;/button&gt;\n                &lt;button class=\"incorrect\"&gt;1 person per 3 sheep&lt;/button&gt;\n                &lt;button class=\"correct\"&gt;1 person per 6 sheep&lt;/button&gt;\n                &lt;p class=\"feedback\"&gt;&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"section\"&gt;\n                &lt;h2&gt;Part 2: Free Response&lt;/h2&gt;\n                &lt;hr&gt;\n                &lt;h3&gt;In which country is it illegal to own only one guinea pig, as a lone guinea pig might get lonely?&lt;/h3&gt;\n                &lt;input type=\"text\"&gt;&lt;/input&gt;\n                &lt;button id=\"check\"&gt;Check Answer&lt;/button&gt;\n                &lt;p class=\"feedback\"&gt;&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nCreating event listeners with HTML\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap\" rel=\"stylesheet\"&gt;\n        &lt;link href=\"styles.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;Trivia!&lt;/title&gt;\n        &lt;script&gt;\n            function checkMultiChoice(event) {\n\n                // Get the element which triggered the event\n                let button = event.target;\n\n                // Check if the element's inner HTML matches expected answer\n                if (button.innerHTML == '1 person per 6 sheep') {\n                    button.style.backgroundColor = 'Green';\n                    button.parentElement.querySelector('.feedback').innerHTML = 'Correct!';\n                }\n                else {\n                    button.style.backgroundColor = 'Red';\n                    button.parentElement.querySelector('.feedback').innerHTML = 'Incorrect';\n                }\n            }\n\n            function checkFreeResponse(event) {\n\n                // Get the element which triggered the event\n                let button = event.target;\n\n                // Get the input element corresponding to the button\n                let input = button.parentElement.querySelector('input');\n\n                // Check for correct answer\n                if (input.value === 'Switzerland') {\n                    input.style.backgroundColor = 'Green';\n                    input.parentElement.querySelector('.feedback').innerHTML = 'Correct!';\n                }\n                else {\n                    input.style.backgroundColor = 'Red';\n                    input.parentElement.querySelector('.feedback').innerHTML = 'Incorrect';\n                }\n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;Trivia!&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"container\"&gt;\n            &lt;div class=\"section\"&gt;\n                &lt;h2&gt;Part 1: Multiple Choice &lt;/h2&gt;\n                &lt;hr&gt;\n                &lt;h3&gt;What is the approximate ratio of people to sheep in New Zealand?&lt;/h3&gt;\n                &lt;button onclick=\"checkMultiChoice(event)\"&gt;6 people per 1 sheep&lt;/button&gt;\n                &lt;button onclick=\"checkMultiChoice(event)\"&gt;3 people per 1 sheep&lt;/button&gt;\n                &lt;button onclick=\"checkMultiChoice(event)\"&gt;1 person per 1 sheep&lt;/button&gt;\n                &lt;button onclick=\"checkMultiChoice(event)\"&gt;1 person per 3 sheep&lt;/button&gt;\n                &lt;button onclick=\"checkMultiChoice(event)\"&gt;1 person per 6 sheep&lt;/button&gt;\n                &lt;p class=\"feedback\"&gt;&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"section\"&gt;\n                &lt;h2&gt;Part 2: Free Response&lt;/h2&gt;\n                &lt;hr&gt;\n                &lt;h3&gt;In which country is it illegal to own only one guinea pig, as a lone guinea pig might get lonely?&lt;/h3&gt;\n                &lt;input type=\"text\"&gt;&lt;/input&gt;\n                &lt;button onclick=\"checkFreeResponse(event)\"&gt;Check Answer&lt;/button&gt;\n                &lt;p class=\"feedback\"&gt;&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "homework/hw_9.html",
    "href": "homework/hw_9.html",
    "title": "Problem Set 8",
    "section": "",
    "text": "Week 8 Problem Set\nSource: https://cs50.harvard.edu/x/psets/8/",
    "crumbs": [
      "Homework",
      "Homework 09 🌐"
    ]
  },
  {
    "objectID": "homework/hw_9.html#what-to-do",
    "href": "homework/hw_9.html#what-to-do",
    "title": "Problem Set 8",
    "section": "What to Do",
    "text": "What to Do\n\nLog into cs50.dev using your GitHub account\nRun update50 in your codespace’s terminal window to ensure your codespace is up-to-date and, when prompted, click Rebuild now\nSubmit Trivia\nSubmit Homepage",
    "crumbs": [
      "Homework",
      "Homework 09 🌐"
    ]
  },
  {
    "objectID": "homework/hw_9.html#when-to-do-it",
    "href": "homework/hw_9.html#when-to-do-it",
    "title": "Problem Set 8",
    "section": "When to Do It",
    "text": "When to Do It\nBy 2025-12-31T23:59:00+00:00.",
    "crumbs": [
      "Homework",
      "Homework 09 🌐"
    ]
  },
  {
    "objectID": "hw/hw-2.html",
    "href": "hw/hw-2.html",
    "title": "HW 2 - Multiple linear regression",
    "section": "",
    "text": "In this assignment, you’ll get to put into practice the multiple linear regression skills you’ve developed.\n\n\nIn this assignment, you will…\n\nFit and interpret multiple linear regression models with main and interaction effects.\nCompare multiple linear regression models.\nReason around multiple linear regression concepts.\nContinue developing a workflow for reproducible data analysis.\n\n\n\n\nYour repo for this assignment is at github.com/sta210-s22 and starts with the prefix hw-2. For more detailed instructions on getting started, see HW 1.\n\n\n\nThe following packages will be used in this assignment. You can add other packages as needed.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "hw/hw-2.html#introduction",
    "href": "hw/hw-2.html#introduction",
    "title": "HW 2 - Multiple linear regression",
    "section": "",
    "text": "In this assignment, you’ll get to put into practice the multiple linear regression skills you’ve developed.\n\n\nIn this assignment, you will…\n\nFit and interpret multiple linear regression models with main and interaction effects.\nCompare multiple linear regression models.\nReason around multiple linear regression concepts.\nContinue developing a workflow for reproducible data analysis.\n\n\n\n\nYour repo for this assignment is at github.com/sta210-s22 and starts with the prefix hw-2. For more detailed instructions on getting started, see HW 1.\n\n\n\nThe following packages will be used in this assignment. You can add other packages as needed.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "hw/hw-2.html#part-1---conceptual",
    "href": "hw/hw-2.html#part-1---conceptual",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 1 - Conceptual",
    "text": "Part 1 - Conceptual\n\nDealing with categorical predictors. Two friends, Elliott and Adrian, want to build a model predicting typing speed (average number of words typed per minute) from whether the person wears glasses or not. Before building the model they want to conduct some exploratory analysis to evaluate the strength of the association between these two variables, but they’re in disagreement about how to evaluate how strongly a categorical predictor is associated with a numerical outcome. Elliott claims that it is not possible to calculate a correlation coefficient to summarize the relationship between a categorical predictor and a numerical outcome, however they’re not sure what a better alternative is. Adrian claims that you can recode a binary predictor as a 0/1 variable (assign one level to be 0 and the other to be 1), thus converting it to a numerical variable. According to Adrian, you can then calculate the correlation coefficient between the predictor and the outcome. Who is right: Elliott or Adrian? If you pick Elliott, can you suggest a better alternative for evaluating the association between the categorical predictor and the numerical outcome?\nHigh correlation, good or bad? Two friends, Frances and Annika, are in disagreement about whether high correlation values are always good in the context of regression. Frances claims that it’s desirable for all variables in the dataset to be highly correlated to each other when building linear models. Annika claims that while it’s desirable for each of the predictors to be highly correlated with the outcome, it is not desirable for the predictors to be highly correlated with each other. Who is right: Frances, Annika, both, or neither? Explain your reasoning using appropriate terminology.\nTraining for the 5K. Nico signs up for a 5K (a 5,000 metre running race) 30 days prior to the race. They decide to run a 5K every day to train for it, and each day they record the following information: days_since_start (number of days since starting training), days_till_race (number of days left until the race), mood (poor, good, awesome), tiredness (1-not tired to 10-very tired), and time (time it takes to run 5K, recorded as mm:ss). Top few rows of the data they collect is shown below.\n\n\n\ndays_since_start\ndays_till_race\nmood\ntiredness\ntime\n\n\n\n\n1\n29\ngood\n3\n25:45\n\n\n2\n28\npoor\n5\n27:13\n\n\n3\n27\nawesome\n4\n24:13\n\n\n…\n…\n…\n…\n…\n\n\n\nUsing these data Nico wants to build a model predicting time from the other variables. Should they include all variables shown above in their model? Why or why not?\nMultiple regression fact checking. Determine which of the following statements are true and false. For each statement that is false, explain why it is false.\n\nIf predictors are colinear, then removing one variable will have no influence on the point estimate of another variable’s coefficient.\nSuppose a numerical predictor \\(x\\) has a coefficient of \\(\\hat{\\beta}_1 = 2.5\\) in a multiple regression model. Suppose also that the first observation has \\(x_{1,1} = 7.2\\), the second observation has a value of \\(x_{2,1} = 8.2\\), and these two observations have the same values for all other predictors. Then the predicted value of the second observation will be 2.5 higher than the prediction of the first observation based on the multiple regression model.\nIf a regression model’s first predictor has a coefficient of \\(\\hat{\\beta}_1 = 5.7\\) and if we are able to influence the data so that an observation will have its \\(x_1\\) be 1 larger than it would otherwise, the value \\(\\hat{y}_1\\) for this observation would increase by 5.7."
  },
  {
    "objectID": "hw/hw-2.html#part-2---palmer-penguins",
    "href": "hw/hw-2.html#part-2---palmer-penguins",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 2 - Palmer penguins",
    "text": "Part 2 - Palmer penguins\nData were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. (Gorman, Williams, and Fraser 2014)\n\n\n\nArtwork by @allison_horst\n\n\nThese data can be found in the palmerpenguins package. We’re going to be working with the penguins dataset from this package. The dataset contains data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.\n\nBody mass. Our first goal is to fit a model predicting body mass (which is more difficult to measure) from bill length, bill depth, flipper length, species, and sex.\n\nFit a model predicting body mass (which is more difficult to measure) from the other variables listed above.\nWrite the equation of the regression model.\nInterpret each one of the slopes in this context.\nCalculate the residual for a male Adelie penguin that weighs 3750 grams with the following body measurements: bill_length_mm = 39.1, bill_depth_mm = 18.7, flipper_length_mm = 181. Does the model overpredict or underpredict this penguin’s weight?\nFind the \\(R^2\\) of this model and interpret this value in context of the data and the model.\n\n\n\n\nBill depth. Next we’ll be focusing on bill depth and bill length and also considering species.\n\nFit a model predicting bill depth from bill length. Find the adjusted R-squared, AIC, and BIC for this model.\nThen, add a new predictor: species. Fit another model predicting bill depth from bill length and species. Find the adjusted R-squared, AIC, and BIC for this model.\nFinally, add one more predictor: the interaction between bill length and species. Find the adjusted R-squared, AIC, and BIC for this model.\nUsing the three criteria you recorded for these three models, and with the goal of parsimony, which model is the “best” for predicting bill depth from bill length and/or species. Explain your reasoning.\nCreate a visualization representing your model from part a. Hint: Make a scatterplot of bill depth vs. bill length and add the linear model.\nCreate a visualization representing your model from part b. Hint: Same as part (e), but think about how many lines to plot and whether their slopes should be the same or different.\nCreate a visualization representing your model from part c. Hint: Same as part (f), but think about how many lines to plot and whether their slopes should be the same or different.\nBased on your visualizations from parts e - g, and with the goal of parsimony, is your answer for which model is the “best” for predicting bill depth from bill length and/or species the same as your answer in part d? Explain your reasoning."
  },
  {
    "objectID": "hw/hw-2.html#part-3---perceived-threat-of-covid-19",
    "href": "hw/hw-2.html#part-3---perceived-threat-of-covid-19",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 3 - Perceived threat of Covid-19",
    "text": "Part 3 - Perceived threat of Covid-19\nGarbe, Rau, and Toppe (2020), published in June 2020, aims to examine the relationship between personality traits, perceived threat of Covid-19 and stockpiling toilet paper. For this study titled Influence of perceived threat of Covid-19 and HEXACO personality traits on toilet paper stockpiling, researchers conducted an online survey March 23 - 29, 2020 and used the results to fit multiple linear regression models to draw conclusions about their research questions. From their survey, they collected data on adults across 35 countries. Given the small number of responses from people outside of the United States, Canada, and Europe, only responses from people in these three locations were included in the regression analysis.\nLet’s consider their results for the model looking at the effect on perceived threat of Covid-19. The model can be found on page 6 of the paper. The perceived threat of Covid was quantified using the responses to the following survey question:\n\nHow threatened do you feel by Coronavirus? [Users select on a 10-point visual analogue scale (Not at all threatened to Extremely Threatened)]\n\n\nInterpret the coefficient of Age (0.072) in the context of the analysis.\nInterpret the coefficient of Place of residence in the context of the analysis.\nThe model includes an interaction between Place of residence and Emotionality (capturing differential tendencies in to worry and be anxious).\n\nWhat does the coefficient for the interaction (0.101) mean in the context of the data?\nInterpret the estimated effect of Emotionality for a person who lives in the US/Canada.\nInterpret the estimated effect of Emotionality for a person who lives in Europe."
  },
  {
    "objectID": "hw/hw-2.html#submission",
    "href": "hw/hw-2.html#submission",
    "title": "HW 2 - Multiple linear regression",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "hw/hw-2.html#grading",
    "href": "hw/hw-2.html#grading",
    "title": "HW 2 - Multiple linear regression",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 9\n45\n\n\nWorkflow & formatting\n51"
  },
  {
    "objectID": "hw/hw-2.html#footnotes",
    "href": "hw/hw-2.html#footnotes",
    "title": "HW 2 - Multiple linear regression",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.↩︎"
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part; and\nB. produce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "module-faq.html",
    "href": "module-faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Go to your Files tab, check the box next to the file you want to download, then click on the blue gear icon on the Files tab to reveal the drop down menu, and select Export… If you have selected multiple files to export, RStudio will zip them up into a single zip file for you. If you’ve selected just a single file, it will only download that. The downloaded file will go to wherever files you download off the internet goes on your computer (usually your Downloads folder).",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#how-do-i-export-my-assignment-pdf-from-rstudio-to-upload-to-gradescope",
    "href": "module-faq.html#how-do-i-export-my-assignment-pdf-from-rstudio-to-upload-to-gradescope",
    "title": "FAQ",
    "section": "",
    "text": "Go to your Files tab, check the box next to the file you want to download, then click on the blue gear icon on the Files tab to reveal the drop down menu, and select Export… If you have selected multiple files to export, RStudio will zip them up into a single zip file for you. If you’ve selected just a single file, it will only download that. The downloaded file will go to wherever files you download off the internet goes on your computer (usually your Downloads folder).",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#how-can-i-submit-my-assignment-to-gradescope",
    "href": "module-faq.html#how-can-i-submit-my-assignment-to-gradescope",
    "title": "FAQ",
    "section": "How can I submit my assignment to Gradescope?",
    "text": "How can I submit my assignment to Gradescope?\nThe instructions for submitting your assignment to Gradescope can be found here. In a nutshell, you’ll upload your PDF and them mark the page(s) where each question can be found. It’s OK if a question spans multiple pages, just mark them all. It’s also OK if a page includes multiple questions.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#can-i-use-a-local-install-of-r-and-rstudio-instead-of-using-the-rstudio-containers",
    "href": "module-faq.html#can-i-use-a-local-install-of-r-and-rstudio-instead-of-using-the-rstudio-containers",
    "title": "FAQ",
    "section": "Can I use a local install of R and RStudio instead of using the RStudio containers?",
    "text": "Can I use a local install of R and RStudio instead of using the RStudio containers?\nThe short answer is, I’d rather you didn’t, to save yourself some headache. But, the long answer is, sure! But you will need to install a specific versions of R and RStudio for everything to work as expected. You will also need to install the R packages we’re using as well as have Git installed on your computer. These are not extremely challenging things to get right, but they are not trivial either, particularly on certain operating systems. Myself and the TAs are always happy to provide help with any computational questions when you’re working in the containers we have provided for you. If you’re working on your local setup, we can’t guarantee being able to resolve your issues, though we’re happy to try.\nIf you want to take this path, here is what you need to do:\n\nDownload and install R 4.1.2: https://cran.r-project.org/\nDownload and install a daily build of RStudio: https://dailies.rstudio.com/\nInstall Quarto CLI: https://quarto.org/docs/getting-started/installation.html\nInstall Git: https://happygitwithr.com/install-git.html\nInstall any necessary packages with install.packages(\"___\")\n\nAnd I’d like to reiterate again that successful installation of these software is not a learning goal of this course. So if any of this seems tedious or intimidating in any way, just use the computing environment we have set up for you. More on that here.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-schedule.html",
    "href": "module-schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "This schedule is an outline of the topics, content, and assignments. Note that this may be updated as the module progresses.\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\nTopics\nLectures\nNotes\nCode\nTutorials\nHomework\n\n\n\n\n01\n🐈 Scratch\n▶ 💻\n📕\n🤖\n\n🏠\n\n\n02\n🟢 C\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n03\n🟢 Arrays\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n04\n🟢 Algorithms\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n05\n🟢 Memory\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n06\n🟢 Data structures\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n07\n🐍 Python\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n08\n📊 SQL\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n09\n🌐 Web programming\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n10\n🐍 Flask\n▶ 💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n11\n👋 Wrap up\n▶ 💻\n📕",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "notes/notes_1.html",
    "href": "notes/notes_1.html",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Welcome!\nCommunity!\nComputer Science and Problem Solving\nASCII\nUnicode\nRGB\nAlgorithms\nPseudocode\nArtificial Intelligence\nWhat’s Ahead\nScratch\nHello World\nHello, You\nMeow and Abstraction\nConditionals\nOscartime\nIvy’s Hardest Game\nSumming Up\n\n\n\n\nThis class is about more than computer programming! The practical skills you will learn in this class may have an impact on your life and learning well beyond computer science.\nIndeed, this class is about problem-solving in a way that is exceedingly empowering! You will likely take the problem solving that you learn here, which will likely be instantly applicable to your work beyond this course and even your career as a whole!\nHowever, it will not be easy! You will be “drinking from the firehose” of knowledge during this course. You’ll be amazed at what you will be able to accomplish in the coming weeks.\nThis course is far more about you advancing “you” from “where you are today” than hitting some imagined standard.\nThe most important opening consideration in this course: Give the time you need to learn through this course. Everyone learns differently. If something does not work out well at the start, know that with time you will grow and grow in your skill.\nDon’t be scared if this is your first computer science class! For most of your peers, this is their first computer science class, too! Further, teaching fellows, course assistants, and your peer community are here to help you!\n\n\n\n\n\nYou are part of a community of those taking this course.\nWe hope you will join us (whether in person or virtually) in Discord: The Statistics Lab.\nYou can attend our community activities including Lunches, hackathons, and our Code Club and HARUG! meetings.\n\n\n\n\n\nEssentially, computer programming is about taking some input and creating some output - thus solving a problem. What happens in between the input and output, what we could call a black box, is the focus of this course.\n\n\n\nBlack box with input and output\n\n\nFor example, we may need to take attendance for a class. We could use a system called unary (also called base-1) to count one finger at a time.\nComputers today count using a system called binary. It’s from the term binary digit that we get a familiar term called bit. A bit is a zero or one: on or off.\nComputers only speak in terms of zeros and ones. Zeros represent off. Ones represent on. Computers are millions, and perhaps billions, of transistors that are being turned on and off.\nIf you imagine using a light bulb, a single bulb can only count from zero to one.\nHowever, if you were to have three light bulbs, there are more options open to you!\nInside your iPhone, there are millions of light bulbs called transistors that enable the activities this device one may take for granted each day.\nAs a heuristic, we could imagine that the following values represent each possible place in our binary digit:\n4 2 1\nUsing three light bulbs, the following could represent zero:\n4 2 1\n0 0 0\nSimilarly, the following would represent one:\n4 2 1\n0 0 1\nBy this logic, we could propose that the following equals two:\n4 2 1\n0 1 0\nExtending this logic further, the following represents three:\n4 2 1\n0 1 1\nFour would appear as:\n4 2 1\n1 0 0\nWe could, in fact, using only three light bulbs count as high as seven!\n4 2 1\n1 1 1\nComputers use base-2 to count. This can be pictured as follows:\n2^2  2^1  2^0\n4    2    1\nTherefore, you could say that it would require three bits (the four’s place, the two’s place, and the one’s place) to represent a number as high as seven.\nSimilarly, to count a number as high as eight, values would be represented as follows:\n8 4 2 1\n1 0 0 0\nComputers generally use eight bits (also known as a byte) to represent a number. For example, 00000101 is the number 5 in binary. 11111111 represents the number 255. You can imagine zero as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nJust as numbers are binary patterns of ones and zeros, letters are represented using ones and zeros, too!\nSince there is an overlap between the ones and zeros that represent numbers and letters, the ASCII standard was created to map specific letters to specific numbers.\nFor example, the letter A was decided to map to the number 65. 01000001 represents the number 65 in binary. You can visualize this as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n1\n0\n0\n0\n0\n0\n1\n\n\n\nIf you received a text message, the binary under that message might represent the numbers 72, 73, and 33. Mapping these out to ASCII, your message would look as follows:\nH   I   !\n72  73  33\nThank goodness for standards like ASCII that allow us to agree upon these values!\nHere is an expanded map of ASCII values:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nIf you wish, you can learn more about ASCII.\nSince binary can only count up to 255 we are limited to the number of characters represented by ASCII.\n\n\n\n\n\nAs time has rolled on, there are more and more ways to communicate via text.\nSince there were not enough digits in binary to represent all the various characters that could be represented by humans, the Unicode standard expanded the number of bits that can be transmitted and understood by computers. Unicode includes not only special characters, but emoji as well.\nThere are emoji that you probably use every day. The following may look familiar to you:\n😀 😃 😄 😁 😆 😅 😂 🙂 🙃 😉 😊 😇 😍 😘 😗 😙 😚 😋 😛 😜 😝 🤑 🤓 😎 🤗 😏 😶 😐 😑 😒 🙄 😬 😕 ☹️ 😟 😮 😯 😲 😳 😦 😧 😨\nWhile the pattern of zeros and ones is standardized within Unicode, each device manufacturer may display each emoji slightly differently than another manufacturer.\nMore and more features are being added to the Unicode standard to represent further characters and emoji.\nIf you wish, you can learn more about Unicode.\nIf you wish, you can learn more about emoji.\n\n\n\n\n\nZeros and ones can be used to represent color.\nRed, green, and blue (called RGB) are a combination of three numbers.\n\n\n\nred green blue boxes\n\n\nTaking our previously used 72, 73, and 33, which said HI! via text, would be interpreted by image readers as a light shade of yellow. The red value would be 72, the green value would be 73, and the blue would be 33.\n\n\n\nyellow box\n\n\nThe three bytes required to represent various colors of red, blue, and green (or RGB) make up each pixel (or dot) of color in any digital image. Images are simply collections of RGB values.\nZeros and ones can be used to represent images, videos, and music!\nVideos are sequences of many images that are stored together, just like a flipbook.\nMusic can be represented similarly using various combinations of bytes.\n\n\n\n\n\nProblem-solving is central to computer science and computer programming. An algorithm is a step-by-step set of instructions to solve a problem.\nImagine the basic problem of trying to locate a single name in a phone book.\nHow might one go about this?\nOne approach could be to simply read from page one to the next to the next until reaching the last page.\nAnother approach could be to search two pages at a time.\nA final and perhaps better approach could be to go to the middle of the phone book and ask, “Is the name I am looking for to the left or to the right?” Then, repeat this process, cutting the problem in half and half and half.\nEach of these approaches could be called algorithms. The speed of each of these algorithms can be pictured as follows in what is called big-O notation:\n\n\n\nbig o notation\n\n\nNotice that the first algorithm, highlighted in red, has a big-O of n because if there are 100 names in the phone book, it could take up to 100 tries to find the correct name. The second algorithm, where two pages were searched at a time, has a big-O of n/2 because we searched twice as fast through the pages. The final algorithm has a big-O of log2n, as doubling the problem would only result in one more step to solve the problem.\nProgrammers translate text-based, human instructions into code.\n\n\n\n\n\nThis process of converting instructions into code is called pseudocode.\nThe ability to create pseudocode is central to one’s success in both this class and in computer programming.\nPseudocode is a human-readable version of your code. For example, considering the third algorithm above, we could compose pseudocode as follows:\n\n(Old fashioned example, but bear with me!)\n```         \n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n```\n\nPseudocoding is such an important skill for at least two reasons. First, when you pseudocode before you create formal code, it allows you to think through the logic of your problem in advance. Second, when you pseudocode, you can later provide this information to others that are seeking to understand your coding decisions and how your code works.\nNotice that the language within our pseudocode has some unique features. First, some of these lines begin with verbs like pick up, open, look at. Later, we will call these functions.\nSecond, notice that some lines include statements like if or else if. These are called conditionals.\nThird, notice how there are expressions that can be stated as true or false, such as “person is earlier in the book.” We call these boolean expressions.\nFinally, notice how there are statements like “go back to line 3.” We call these loops.\nThese building blocks are the fundamentals of programming.\nIn the context of Scratch, which is discussed below, we will use each of the above basic building blocks of programming.\n\n\n\n\n\nConsider how we can utilize the building blocks above to start creating our own artificial intelligence. Look at the following pseudocode:\nIf student says hello\n    Say hello\nElse if student says goodbye\n    Say goodbye \nElse if student asks how you are\n    Say well\nElse if student asks why 111 in binary is 7 in decimal\n...\nNotice how just to program a handful of interactions, many lines of code would be required. How many lines of code would be required for thousands or tens of thousands of possible interactions?\nRather than programming conversational AI like the above, AI programmers train large language models (LLMs) on large datasets.\nLLMs look at patterns in large blocks of language. Such language models attempt to create a best guess of what words come after one another or alongside one another.\nYou may use AI-based software to ask questions, but not presenting its answers as your own.\nYou may not use AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) to suggests answers for your work or lines of code.\n\n\n\n\n\nYou will be learning this week about Scratch, a visual programming language.\nThen, in future weeks, you will learn about C. That will look something like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  printf(\"hello, world\\n\");\n}\nBy learning C, you will be far more prepared for future learning in other programming languages like Python.\nFurther, as the weeks progress, you will learn about algorithms.\nWhat makes C so challenging is the punctuation. Setting aside that punctuation and syntax for today, we are going to work solely with ideas in a programming language called Scratch.\n\n\n\n\n\nScratch is a visual programming language developed by MIT.\nScratch utilizes the same essential coding building blocks that we covered earlier in this lecture.\nScratch is a great way to get into computer programming because it allows you to play with these building blocks in a visual manner, not having to be concerned about the syntax of curly braces, semicolons, parentheses, and the like.\nScratch IDE (integrated development environment) looks like the following:\n\n\n\nscratch interface\n\n\nNotice that on the left, there is a palette of building blocks that you can use in your programming. To the immediate right of the building blocks, there is the area to which you can drag blocks to build a program. To the right of that, you see the stage where a cat stands. The stage is where your programming comes to life.\nScratch operates on a coordinate system as follows:\n\n\n\nscratch coordinate system\n\n\nNotice that the center of the stage is at coordinate (0,0). Right now, the cat’s position is at that same position.\n\n\n\n\n\nTo begin, drag the “when green flag clicked” building block to the programming area. Then, drag the say building block to the programming area and attach it to the previous block.\nwhen green flag clicked\nsay [hello, world]\nNotice that when you click the green flag now on the stage, the cat says, “hello, world.”\nThis illustrates quite well what we were discussing earlier regarding programming:\n\n\n\nscratch with black box\n\n\nNotice that the input hello, world is passed to the function say, and the side effect of that function running is the cat saying hello, world.\n\n\n\n\n\nWe can make your program more interactive by having the cat say hello to someone specific. Modify your program as below:\nwhen green flag clicked\nask [What's your name?] and wait\nsay (join [hello,] (answer))\nNotice that when the green flag is clicked, the function ask is run. The program prompts you, the user, What's your name? It then stores that name in the variable called answer. The program then passes answer to a special function called join, which combines two strings of text hello, and whatever name was provided. Quite literally, answer returns a value to join. These collectively are passed to the say function. The cat says, Hello, and a name. Your program is now interactive.\nThroughout this course, you will be providing inputs into an algorithm and getting outputs (or side effects). This can be pictured in terms of the above program as follows:\n\n\n\nscratch as algorithm\n\n\nNotice that the inputs hello, and answer are provided to join, resulting in the side effect of hello, David.\nQuite similarly, we can modify our program as follows:\nwhen green flag clicked\nask [What's your name?] and wait\nspeak (join [hello,] (answer))\nNotice that this program, when the green flag is clicked, passes the same variable, joined with hello, to a function called speak.\n\n\n\n\n\nAlong with pseudocoding, abstraction is an essential skill and concept within computer programming.\nAbstraction is the act of simplifying a problem into smaller and smaller problems.\nFor example, if you were hosting a huge dinner for your friends, the problem of having to cook the entire meal could be quite overwhelming! However, if you break down the task of cooking the meal into smaller and smaller tasks (or problems), the big task of creating this delicious meal might feel less challenging.\nIn programming, and even within Scratch, we can see abstraction in action. In your programming area, program as follows:\nwhen green flag clicked\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nNotice that you are doing the same thing over and over again. Indeed, if you see yourself repeatedly coding the same statements, it’s likely the case that you could program more artfully – abstracting away this repetitive code.\nYou can modify your code as follows:\nwhen green flag clicked\nrepeat (3)\nplay sound (Meow v) until done\nwait (1) seconds\nNotice that the loop does exactly as the previous program did. However, the problem is simplified by abstracting away the repetition to a block that repeats the code for us.\nWe can even advance this further by using the define block, where you can create your own block (your own function)! Write code as follows:\ndefine meow\nplay sound (Meow v) until done\nwait (1) seconds\n\nwhen green flag clicked\nrepeat (3)\nmeow\nNotice that we are defining our own block called meow. The function plays the sound meow, and then waits one second. Below that, you can see that when the green flag is clicked, our meow function is repeated three times.\nWe can even provide a way by which the function can take an input n and repeat a number of times:\ndefine meow n times\nrepeat (n)\n play sound [meow v] until done\n wait (1) seconds\nNotice how n is taken from “meow n times.” n is passed to the meow function through the define block.\nOverall, notice how this process of refinement led to better and better-designed code. Further, notice how we created our own algorithm to solve a problem. You will be exercising both of these skills throughout this course.\n\n\n\n\n\nConditionals are an essential building block of programming, where the program looks to see if a specific condition has been met. If a condition is met, the program does something.\nTo illustrate a conditional, write code as follows:\nwhen green flag clicked\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nplay sound (Meow v) until done\nNotice that the forever block is utilized such that the if block is triggered over and over again, such that it can check continuously if the cat is touching the mouse pointer.\nWe can modify our program as follows to integrate video sensing:\nwhen video motion &gt; (10)\nplay sound (Meow v) until done\nRemember, programming is often a process of trial and error. If you get frustrated, take time to talk yourself through the problem at hand. What is the specific problem that you are working on right now? What is working? What is not working?\n\n\n\n\n\nOscartime is one of David’s own Scratch programs – though the music may haunt him because of the number of hours he listened to it while creating this program. Take a few moments to play through the game yourself.\nBuilding Oscartime ourselves, we first add the lamp post.\n\n\n\noscartime interface\n\n\nThen, write code as follows:\nwhen green flag clicked\nswitch costume to (oscar1 v)\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nswitch costume to (oscar2 v)\nelse\nswitch costume to (oscar1 v)\nNotice that moving your mouse over Oscar changes his costume. You can learn more by exploring these code blocks.\nThen, modify your code as follows to create a falling piece of trash:\nwhen green flag clicked\ngo to x: (pick random (-240) to (240)) y: (180)\nforever\nif &lt;(distance to (floor v)) &gt; (0)&gt; then\nchange y by (-3)\nNotice that the trash’s position on the y-axis always begins at 180. The x position is randomized. While the trash is above the floor, it goes down 3 pixels at a time. You can learn more by exploring these code blocks.\nNext, modify your code as follows to allow for the possibility of dragging trash.\nwhen green flag clicked\nforever\nif &lt;&lt;mouse down?&gt; and &lt;touching (mouse-pointer v) ?&gt;&gt; then\ngo to (mouse-pointer v)\nYou can learn more by exploring these code blocks.\nNext, we can implement the scoring variables as follows:\nwhen green flag clicked\nforever\nif &lt;touching (Oscar v) ?&gt; then\nchange (score) by (1)\ngo to x: (pick random (-240) to (240)) y: (180)\nYou can learn more by exploring these code blocks.\nGo try the full game Oscartime.\n\n\n\n\n\nMoving away from Oscartime to Ivy’s Hardest Game, we can now imagine how to implement movement within our program.\nOur program has three main components.\nFirst, write code as follows:\nwhen green flag clicked\ngo to x: (0) y: (0)\nforever\nlisten for keyboard\nfeel for walls\nNotice that when the green flag is clicked, our sprite moves to the center of the stage at coordinates (0,0) and then listens for the keyboard and checks for walls forever.\nSecond, add this second group of code blocks:\ndefine listen for keyboard\nif &lt;key (up arrow v) pressed?&gt; then\nchange y by (1)\nend\nif &lt;key (down arrow v) pressed?&gt; then\nchange y by (-1)\nend\nif &lt;key (right arrow v) pressed?&gt; then\nchange x by (1)\nend\nif &lt;key (left arrow v) pressed?&gt; then\nchange x by (-1)\nend\nNotice how we have created a custom listen for keyboard script. For each of our arrow keys on the keyboard, it will move the sprite around the screen.\nFinally, add this group of code blocks:\ndefine feel for walls\nif &lt;touching (left wall v) ?&gt; then\nchange x by (1)\nend\nif &lt;touching (right wall v) ?&gt; then\nchange x by (-1)\nend\nNotice how we also have a custom feel for walls script. When a sprite touches a wall, it moves it back to a safe position – preventing it from walking off the screen.\nYou can learn more by exploring these code blocks.\nScratch allows for many sprites to be on the screen at once.\nAdding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (90)\nforever\nif &lt;&lt;touching (left wall v)?&gt; or &lt;touching (right wall v)?&gt;&gt; then\nturn right (180) degrees\nend\nmove (1) steps\nend\nNotice how the Yale sprite seems to get in the way of the Harvard sprite by moving back and forth. When it bumps into a wall, it turns around until it bumps the wall again. You can learn more by exploring these code blocks.\nYou can even make a sprite follow another sprite. Adding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to (random position v)\nforever\npoint towards (Harvard v)\nmove (1) steps\nNotice how the MIT logo now seems to follow around the Harvard one. You can learn more by exploring these code blocks.\nGo try the full game Ivy’s Hardest Game.\n\n\n\n\nIn this lesson, you learned how this course sits in the wide world of computer science and programming. You learned…\n\nFew students come to this class with prior programming experience!\nYou are not alone! You are part of a community.\nProblem-solving is the essence of the work of computer scientists.\nThis course is not simply about programming – this course will introduce you to a new way of learning that you can apply to almost every area of life.\nHow numbers, text, images, music, and video are understood and represented by computers.\nThe fundamental programming skill of pseudocoding.\nReasonable and unreasonable ways to utilize AI in this course.\nHow abstraction will play a role in your future work in this course.\nThe basic building blocks of programming including functions, conditionals, loops, and variables.\nHow to build a project in Scratch.\n\nThat’s it! Welcome aboard! See you next time!",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#welcome",
    "href": "notes/notes_1.html#welcome",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "This class is about more than computer programming! The practical skills you will learn in this class may have an impact on your life and learning well beyond computer science.\nIndeed, this class is about problem-solving in a way that is exceedingly empowering! You will likely take the problem solving that you learn here, which will likely be instantly applicable to your work beyond this course and even your career as a whole!\nHowever, it will not be easy! You will be “drinking from the firehose” of knowledge during this course. You’ll be amazed at what you will be able to accomplish in the coming weeks.\nThis course is far more about you advancing “you” from “where you are today” than hitting some imagined standard.\nThe most important opening consideration in this course: Give the time you need to learn through this course. Everyone learns differently. If something does not work out well at the start, know that with time you will grow and grow in your skill.\nDon’t be scared if this is your first computer science class! For most of your peers, this is their first computer science class, too! Further, teaching fellows, course assistants, and your peer community are here to help you!",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#community",
    "href": "notes/notes_1.html#community",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "You are part of a community of those taking this course.\nWe hope you will join us (whether in person or virtually) in Discord: The Statistics Lab.\nYou can attend our community activities including Lunches, hackathons, and our Code Club and HARUG! meetings.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#computer-science-and-problem-solving",
    "href": "notes/notes_1.html#computer-science-and-problem-solving",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Essentially, computer programming is about taking some input and creating some output - thus solving a problem. What happens in between the input and output, what we could call a black box, is the focus of this course.\n\n\n\nBlack box with input and output\n\n\nFor example, we may need to take attendance for a class. We could use a system called unary (also called base-1) to count one finger at a time.\nComputers today count using a system called binary. It’s from the term binary digit that we get a familiar term called bit. A bit is a zero or one: on or off.\nComputers only speak in terms of zeros and ones. Zeros represent off. Ones represent on. Computers are millions, and perhaps billions, of transistors that are being turned on and off.\nIf you imagine using a light bulb, a single bulb can only count from zero to one.\nHowever, if you were to have three light bulbs, there are more options open to you!\nInside your iPhone, there are millions of light bulbs called transistors that enable the activities this device one may take for granted each day.\nAs a heuristic, we could imagine that the following values represent each possible place in our binary digit:\n4 2 1\nUsing three light bulbs, the following could represent zero:\n4 2 1\n0 0 0\nSimilarly, the following would represent one:\n4 2 1\n0 0 1\nBy this logic, we could propose that the following equals two:\n4 2 1\n0 1 0\nExtending this logic further, the following represents three:\n4 2 1\n0 1 1\nFour would appear as:\n4 2 1\n1 0 0\nWe could, in fact, using only three light bulbs count as high as seven!\n4 2 1\n1 1 1\nComputers use base-2 to count. This can be pictured as follows:\n2^2  2^1  2^0\n4    2    1\nTherefore, you could say that it would require three bits (the four’s place, the two’s place, and the one’s place) to represent a number as high as seven.\nSimilarly, to count a number as high as eight, values would be represented as follows:\n8 4 2 1\n1 0 0 0\nComputers generally use eight bits (also known as a byte) to represent a number. For example, 00000101 is the number 5 in binary. 11111111 represents the number 255. You can imagine zero as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#ascii",
    "href": "notes/notes_1.html#ascii",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Just as numbers are binary patterns of ones and zeros, letters are represented using ones and zeros, too!\nSince there is an overlap between the ones and zeros that represent numbers and letters, the ASCII standard was created to map specific letters to specific numbers.\nFor example, the letter A was decided to map to the number 65. 01000001 represents the number 65 in binary. You can visualize this as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n1\n0\n0\n0\n0\n0\n1\n\n\n\nIf you received a text message, the binary under that message might represent the numbers 72, 73, and 33. Mapping these out to ASCII, your message would look as follows:\nH   I   !\n72  73  33\nThank goodness for standards like ASCII that allow us to agree upon these values!\nHere is an expanded map of ASCII values:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nIf you wish, you can learn more about ASCII.\nSince binary can only count up to 255 we are limited to the number of characters represented by ASCII.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#unicode",
    "href": "notes/notes_1.html#unicode",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "As time has rolled on, there are more and more ways to communicate via text.\nSince there were not enough digits in binary to represent all the various characters that could be represented by humans, the Unicode standard expanded the number of bits that can be transmitted and understood by computers. Unicode includes not only special characters, but emoji as well.\nThere are emoji that you probably use every day. The following may look familiar to you:\n😀 😃 😄 😁 😆 😅 😂 🙂 🙃 😉 😊 😇 😍 😘 😗 😙 😚 😋 😛 😜 😝 🤑 🤓 😎 🤗 😏 😶 😐 😑 😒 🙄 😬 😕 ☹️ 😟 😮 😯 😲 😳 😦 😧 😨\nWhile the pattern of zeros and ones is standardized within Unicode, each device manufacturer may display each emoji slightly differently than another manufacturer.\nMore and more features are being added to the Unicode standard to represent further characters and emoji.\nIf you wish, you can learn more about Unicode.\nIf you wish, you can learn more about emoji.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#rgb",
    "href": "notes/notes_1.html#rgb",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Zeros and ones can be used to represent color.\nRed, green, and blue (called RGB) are a combination of three numbers.\n\n\n\nred green blue boxes\n\n\nTaking our previously used 72, 73, and 33, which said HI! via text, would be interpreted by image readers as a light shade of yellow. The red value would be 72, the green value would be 73, and the blue would be 33.\n\n\n\nyellow box\n\n\nThe three bytes required to represent various colors of red, blue, and green (or RGB) make up each pixel (or dot) of color in any digital image. Images are simply collections of RGB values.\nZeros and ones can be used to represent images, videos, and music!\nVideos are sequences of many images that are stored together, just like a flipbook.\nMusic can be represented similarly using various combinations of bytes.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#algorithms",
    "href": "notes/notes_1.html#algorithms",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Problem-solving is central to computer science and computer programming. An algorithm is a step-by-step set of instructions to solve a problem.\nImagine the basic problem of trying to locate a single name in a phone book.\nHow might one go about this?\nOne approach could be to simply read from page one to the next to the next until reaching the last page.\nAnother approach could be to search two pages at a time.\nA final and perhaps better approach could be to go to the middle of the phone book and ask, “Is the name I am looking for to the left or to the right?” Then, repeat this process, cutting the problem in half and half and half.\nEach of these approaches could be called algorithms. The speed of each of these algorithms can be pictured as follows in what is called big-O notation:\n\n\n\nbig o notation\n\n\nNotice that the first algorithm, highlighted in red, has a big-O of n because if there are 100 names in the phone book, it could take up to 100 tries to find the correct name. The second algorithm, where two pages were searched at a time, has a big-O of n/2 because we searched twice as fast through the pages. The final algorithm has a big-O of log2n, as doubling the problem would only result in one more step to solve the problem.\nProgrammers translate text-based, human instructions into code.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#pseudocode",
    "href": "notes/notes_1.html#pseudocode",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "This process of converting instructions into code is called pseudocode.\nThe ability to create pseudocode is central to one’s success in both this class and in computer programming.\nPseudocode is a human-readable version of your code. For example, considering the third algorithm above, we could compose pseudocode as follows:\n\n(Old fashioned example, but bear with me!)\n```         \n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n```\n\nPseudocoding is such an important skill for at least two reasons. First, when you pseudocode before you create formal code, it allows you to think through the logic of your problem in advance. Second, when you pseudocode, you can later provide this information to others that are seeking to understand your coding decisions and how your code works.\nNotice that the language within our pseudocode has some unique features. First, some of these lines begin with verbs like pick up, open, look at. Later, we will call these functions.\nSecond, notice that some lines include statements like if or else if. These are called conditionals.\nThird, notice how there are expressions that can be stated as true or false, such as “person is earlier in the book.” We call these boolean expressions.\nFinally, notice how there are statements like “go back to line 3.” We call these loops.\nThese building blocks are the fundamentals of programming.\nIn the context of Scratch, which is discussed below, we will use each of the above basic building blocks of programming.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#artificial-intelligence",
    "href": "notes/notes_1.html#artificial-intelligence",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Consider how we can utilize the building blocks above to start creating our own artificial intelligence. Look at the following pseudocode:\nIf student says hello\n    Say hello\nElse if student says goodbye\n    Say goodbye \nElse if student asks how you are\n    Say well\nElse if student asks why 111 in binary is 7 in decimal\n...\nNotice how just to program a handful of interactions, many lines of code would be required. How many lines of code would be required for thousands or tens of thousands of possible interactions?\nRather than programming conversational AI like the above, AI programmers train large language models (LLMs) on large datasets.\nLLMs look at patterns in large blocks of language. Such language models attempt to create a best guess of what words come after one another or alongside one another.\nYou may use AI-based software to ask questions, but not presenting its answers as your own.\nYou may not use AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) to suggests answers for your work or lines of code.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#whats-ahead",
    "href": "notes/notes_1.html#whats-ahead",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "You will be learning this week about Scratch, a visual programming language.\nThen, in future weeks, you will learn about C. That will look something like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  printf(\"hello, world\\n\");\n}\nBy learning C, you will be far more prepared for future learning in other programming languages like Python.\nFurther, as the weeks progress, you will learn about algorithms.\nWhat makes C so challenging is the punctuation. Setting aside that punctuation and syntax for today, we are going to work solely with ideas in a programming language called Scratch.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#scratch",
    "href": "notes/notes_1.html#scratch",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Scratch is a visual programming language developed by MIT.\nScratch utilizes the same essential coding building blocks that we covered earlier in this lecture.\nScratch is a great way to get into computer programming because it allows you to play with these building blocks in a visual manner, not having to be concerned about the syntax of curly braces, semicolons, parentheses, and the like.\nScratch IDE (integrated development environment) looks like the following:\n\n\n\nscratch interface\n\n\nNotice that on the left, there is a palette of building blocks that you can use in your programming. To the immediate right of the building blocks, there is the area to which you can drag blocks to build a program. To the right of that, you see the stage where a cat stands. The stage is where your programming comes to life.\nScratch operates on a coordinate system as follows:\n\n\n\nscratch coordinate system\n\n\nNotice that the center of the stage is at coordinate (0,0). Right now, the cat’s position is at that same position.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#hello-world",
    "href": "notes/notes_1.html#hello-world",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "To begin, drag the “when green flag clicked” building block to the programming area. Then, drag the say building block to the programming area and attach it to the previous block.\nwhen green flag clicked\nsay [hello, world]\nNotice that when you click the green flag now on the stage, the cat says, “hello, world.”\nThis illustrates quite well what we were discussing earlier regarding programming:\n\n\n\nscratch with black box\n\n\nNotice that the input hello, world is passed to the function say, and the side effect of that function running is the cat saying hello, world.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#hello-you",
    "href": "notes/notes_1.html#hello-you",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "We can make your program more interactive by having the cat say hello to someone specific. Modify your program as below:\nwhen green flag clicked\nask [What's your name?] and wait\nsay (join [hello,] (answer))\nNotice that when the green flag is clicked, the function ask is run. The program prompts you, the user, What's your name? It then stores that name in the variable called answer. The program then passes answer to a special function called join, which combines two strings of text hello, and whatever name was provided. Quite literally, answer returns a value to join. These collectively are passed to the say function. The cat says, Hello, and a name. Your program is now interactive.\nThroughout this course, you will be providing inputs into an algorithm and getting outputs (or side effects). This can be pictured in terms of the above program as follows:\n\n\n\nscratch as algorithm\n\n\nNotice that the inputs hello, and answer are provided to join, resulting in the side effect of hello, David.\nQuite similarly, we can modify our program as follows:\nwhen green flag clicked\nask [What's your name?] and wait\nspeak (join [hello,] (answer))\nNotice that this program, when the green flag is clicked, passes the same variable, joined with hello, to a function called speak.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#meow-and-abstraction",
    "href": "notes/notes_1.html#meow-and-abstraction",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Along with pseudocoding, abstraction is an essential skill and concept within computer programming.\nAbstraction is the act of simplifying a problem into smaller and smaller problems.\nFor example, if you were hosting a huge dinner for your friends, the problem of having to cook the entire meal could be quite overwhelming! However, if you break down the task of cooking the meal into smaller and smaller tasks (or problems), the big task of creating this delicious meal might feel less challenging.\nIn programming, and even within Scratch, we can see abstraction in action. In your programming area, program as follows:\nwhen green flag clicked\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nNotice that you are doing the same thing over and over again. Indeed, if you see yourself repeatedly coding the same statements, it’s likely the case that you could program more artfully – abstracting away this repetitive code.\nYou can modify your code as follows:\nwhen green flag clicked\nrepeat (3)\nplay sound (Meow v) until done\nwait (1) seconds\nNotice that the loop does exactly as the previous program did. However, the problem is simplified by abstracting away the repetition to a block that repeats the code for us.\nWe can even advance this further by using the define block, where you can create your own block (your own function)! Write code as follows:\ndefine meow\nplay sound (Meow v) until done\nwait (1) seconds\n\nwhen green flag clicked\nrepeat (3)\nmeow\nNotice that we are defining our own block called meow. The function plays the sound meow, and then waits one second. Below that, you can see that when the green flag is clicked, our meow function is repeated three times.\nWe can even provide a way by which the function can take an input n and repeat a number of times:\ndefine meow n times\nrepeat (n)\n play sound [meow v] until done\n wait (1) seconds\nNotice how n is taken from “meow n times.” n is passed to the meow function through the define block.\nOverall, notice how this process of refinement led to better and better-designed code. Further, notice how we created our own algorithm to solve a problem. You will be exercising both of these skills throughout this course.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#conditionals",
    "href": "notes/notes_1.html#conditionals",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Conditionals are an essential building block of programming, where the program looks to see if a specific condition has been met. If a condition is met, the program does something.\nTo illustrate a conditional, write code as follows:\nwhen green flag clicked\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nplay sound (Meow v) until done\nNotice that the forever block is utilized such that the if block is triggered over and over again, such that it can check continuously if the cat is touching the mouse pointer.\nWe can modify our program as follows to integrate video sensing:\nwhen video motion &gt; (10)\nplay sound (Meow v) until done\nRemember, programming is often a process of trial and error. If you get frustrated, take time to talk yourself through the problem at hand. What is the specific problem that you are working on right now? What is working? What is not working?",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#oscartime",
    "href": "notes/notes_1.html#oscartime",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Oscartime is one of David’s own Scratch programs – though the music may haunt him because of the number of hours he listened to it while creating this program. Take a few moments to play through the game yourself.\nBuilding Oscartime ourselves, we first add the lamp post.\n\n\n\noscartime interface\n\n\nThen, write code as follows:\nwhen green flag clicked\nswitch costume to (oscar1 v)\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nswitch costume to (oscar2 v)\nelse\nswitch costume to (oscar1 v)\nNotice that moving your mouse over Oscar changes his costume. You can learn more by exploring these code blocks.\nThen, modify your code as follows to create a falling piece of trash:\nwhen green flag clicked\ngo to x: (pick random (-240) to (240)) y: (180)\nforever\nif &lt;(distance to (floor v)) &gt; (0)&gt; then\nchange y by (-3)\nNotice that the trash’s position on the y-axis always begins at 180. The x position is randomized. While the trash is above the floor, it goes down 3 pixels at a time. You can learn more by exploring these code blocks.\nNext, modify your code as follows to allow for the possibility of dragging trash.\nwhen green flag clicked\nforever\nif &lt;&lt;mouse down?&gt; and &lt;touching (mouse-pointer v) ?&gt;&gt; then\ngo to (mouse-pointer v)\nYou can learn more by exploring these code blocks.\nNext, we can implement the scoring variables as follows:\nwhen green flag clicked\nforever\nif &lt;touching (Oscar v) ?&gt; then\nchange (score) by (1)\ngo to x: (pick random (-240) to (240)) y: (180)\nYou can learn more by exploring these code blocks.\nGo try the full game Oscartime.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#ivys-hardest-game",
    "href": "notes/notes_1.html#ivys-hardest-game",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Moving away from Oscartime to Ivy’s Hardest Game, we can now imagine how to implement movement within our program.\nOur program has three main components.\nFirst, write code as follows:\nwhen green flag clicked\ngo to x: (0) y: (0)\nforever\nlisten for keyboard\nfeel for walls\nNotice that when the green flag is clicked, our sprite moves to the center of the stage at coordinates (0,0) and then listens for the keyboard and checks for walls forever.\nSecond, add this second group of code blocks:\ndefine listen for keyboard\nif &lt;key (up arrow v) pressed?&gt; then\nchange y by (1)\nend\nif &lt;key (down arrow v) pressed?&gt; then\nchange y by (-1)\nend\nif &lt;key (right arrow v) pressed?&gt; then\nchange x by (1)\nend\nif &lt;key (left arrow v) pressed?&gt; then\nchange x by (-1)\nend\nNotice how we have created a custom listen for keyboard script. For each of our arrow keys on the keyboard, it will move the sprite around the screen.\nFinally, add this group of code blocks:\ndefine feel for walls\nif &lt;touching (left wall v) ?&gt; then\nchange x by (1)\nend\nif &lt;touching (right wall v) ?&gt; then\nchange x by (-1)\nend\nNotice how we also have a custom feel for walls script. When a sprite touches a wall, it moves it back to a safe position – preventing it from walking off the screen.\nYou can learn more by exploring these code blocks.\nScratch allows for many sprites to be on the screen at once.\nAdding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (90)\nforever\nif &lt;&lt;touching (left wall v)?&gt; or &lt;touching (right wall v)?&gt;&gt; then\nturn right (180) degrees\nend\nmove (1) steps\nend\nNotice how the Yale sprite seems to get in the way of the Harvard sprite by moving back and forth. When it bumps into a wall, it turns around until it bumps the wall again. You can learn more by exploring these code blocks.\nYou can even make a sprite follow another sprite. Adding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to (random position v)\nforever\npoint towards (Harvard v)\nmove (1) steps\nNotice how the MIT logo now seems to follow around the Harvard one. You can learn more by exploring these code blocks.\nGo try the full game Ivy’s Hardest Game.",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_1.html#summing-up",
    "href": "notes/notes_1.html#summing-up",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "In this lesson, you learned how this course sits in the wide world of computer science and programming. You learned…\n\nFew students come to this class with prior programming experience!\nYou are not alone! You are part of a community.\nProblem-solving is the essence of the work of computer scientists.\nThis course is not simply about programming – this course will introduce you to a new way of learning that you can apply to almost every area of life.\nHow numbers, text, images, music, and video are understood and represented by computers.\nThe fundamental programming skill of pseudocoding.\nReasonable and unreasonable ways to utilize AI in this course.\nHow abstraction will play a role in your future work in this course.\nThe basic building blocks of programming including functions, conditionals, loops, and variables.\nHow to build a project in Scratch.\n\nThat’s it! Welcome aboard! See you next time!",
    "crumbs": [
      "Notes",
      "Notes 01 🐈"
    ]
  },
  {
    "objectID": "notes/notes_11.html",
    "href": "notes/notes_11.html",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Recap\nLooking Ahead\nThank You!\nSumming Up\n\n\n\n\nOver these past ten weeks, you have been drinking from the proverbial firehose.\nDuring this course, you learned to program in many different languages; indeed, our great hope is that you learned how to program in them all, regardless of the language.\nConsider back to the beginning of the course when you worked on Mario: You have come so far and have gained so many skills.\nYou should measure your success as the delta between your skill at the start of the course and your skill now, at the end of the course.\nFurther, we hope that you learned how to solve problems above all else, how to take input, process it through an algorithm, and produce some output. To that point, we played a game where we drew a picture using verbal instructions.\nNotice how some verbal instructions were higher level and others were lower level, like the different programming languages utilized in this course.\nNotice how some instructions were more specific than others. Remember times when you had to refine your code to do exactly as you wanted.\nAlso, notice how some instructions were abstracted away, like draw arms. This is similar to how we abstracted away code into functions.\nLooking at all the weeks of the course, you gathered tools and built skills. Above all, though, you learned how to teach yourself.\nYour final project is your opportunity to build a project, using these skills, that is of your specification and design. We hope you will join us for our Hackathon, an epic late-nighter wherein we work together on our final projects.\n\n\n\n\n\nAs you journey from the work of this course to the world outside CS50, you may want to take a number of steps to prepare and adventure out.\nJourneying on, download and learn about VS Code.\nTo be able to execute commands on the terminal, much like you did in The Sandbox, install command-line tools on your Mac or PC.\nLearn more about Git.\nHost a website using GitHub and/or Netlify.\nIf applicable, host a web app using AWS, Azure, or Google Cloud.\nAsk questions in relevant online communities.\nAsk questions using AI-based tools like ChatGPT and GitHub Copilot.\nJoin one of our many communities.\n\n\n\n\n\nThank you for engaging in this course!\nMany people made this course possible. Thank you for making this course possible and for supporting us so well!\n\n\n\n\nIn this lesson, we reflected on your journey through this course. Specifically, we encourage you to…\n\nTake the programming skills you learned in this course to solve problems in the world.\nTake the new skills you acquired in this course and continue your learning!\nFinish strong and submit your final project.\nQuack!\n\nThis was Computing Technology!",
    "crumbs": [
      "Notes",
      "Notes 11 👋"
    ]
  },
  {
    "objectID": "notes/notes_11.html#recap",
    "href": "notes/notes_11.html#recap",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Over these past ten weeks, you have been drinking from the proverbial firehose.\nDuring this course, you learned to program in many different languages; indeed, our great hope is that you learned how to program in them all, regardless of the language.\nConsider back to the beginning of the course when you worked on Mario: You have come so far and have gained so many skills.\nYou should measure your success as the delta between your skill at the start of the course and your skill now, at the end of the course.\nFurther, we hope that you learned how to solve problems above all else, how to take input, process it through an algorithm, and produce some output. To that point, we played a game where we drew a picture using verbal instructions.\nNotice how some verbal instructions were higher level and others were lower level, like the different programming languages utilized in this course.\nNotice how some instructions were more specific than others. Remember times when you had to refine your code to do exactly as you wanted.\nAlso, notice how some instructions were abstracted away, like draw arms. This is similar to how we abstracted away code into functions.\nLooking at all the weeks of the course, you gathered tools and built skills. Above all, though, you learned how to teach yourself.\nYour final project is your opportunity to build a project, using these skills, that is of your specification and design. We hope you will join us for our Hackathon, an epic late-nighter wherein we work together on our final projects.",
    "crumbs": [
      "Notes",
      "Notes 11 👋"
    ]
  },
  {
    "objectID": "notes/notes_11.html#looking-ahead",
    "href": "notes/notes_11.html#looking-ahead",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "As you journey from the work of this course to the world outside CS50, you may want to take a number of steps to prepare and adventure out.\nJourneying on, download and learn about VS Code.\nTo be able to execute commands on the terminal, much like you did in The Sandbox, install command-line tools on your Mac or PC.\nLearn more about Git.\nHost a website using GitHub and/or Netlify.\nIf applicable, host a web app using AWS, Azure, or Google Cloud.\nAsk questions in relevant online communities.\nAsk questions using AI-based tools like ChatGPT and GitHub Copilot.\nJoin one of our many communities.",
    "crumbs": [
      "Notes",
      "Notes 11 👋"
    ]
  },
  {
    "objectID": "notes/notes_11.html#thank-you",
    "href": "notes/notes_11.html#thank-you",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Thank you for engaging in this course!\nMany people made this course possible. Thank you for making this course possible and for supporting us so well!",
    "crumbs": [
      "Notes",
      "Notes 11 👋"
    ]
  },
  {
    "objectID": "notes/notes_11.html#summing-up",
    "href": "notes/notes_11.html#summing-up",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "In this lesson, we reflected on your journey through this course. Specifically, we encourage you to…\n\nTake the programming skills you learned in this course to solve problems in the world.\nTake the new skills you acquired in this course and continue your learning!\nFinish strong and submit your final project.\nQuack!\n\nThis was Computing Technology!",
    "crumbs": [
      "Notes",
      "Notes 11 👋"
    ]
  },
  {
    "objectID": "notes/notes_3.html",
    "href": "notes/notes_3.html",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Welcome!\nReading Levels\nCompiling\nDebugging\nArrays\nStrings\nString Length\nCommand-Line Arguments\nExit Status\nCryptography\nSumming Up\n\n\n\n\nIn our previous session, we learned about C, a text-based programming language.\nThis week, we are going to take a deeper look at additional building blocks that will support our goals of learning more about programming from the bottom up.\nFundamentally, in addition to the essentials of programming, this course is about problem-solving. Accordingly, we will also focus further on how to approach computer science problems.\nBy the end of the course, you will learn how to use these aforementioned building blocks to solve a whole host of computer science problems.\n\n\n\n\n\nOne of the real-world problems we will solve in this course is understanding reading levels.\nWith the help of some of your peers, we presented readings at various reading levels.\nWe will be quantifying reading levels this week as one of your many programming challenges.\n\n\n\n\n\nEncryption is the act of hiding plain text from prying eyes. Decrypting, then, is the act of taking an encrypted piece of text and returning it to a human-readable form.\nAn encrypted piece of text may look like the following:\nU  I  J  T   J  T   D  T  5  0\n\nRecall that last week, you learned about a compiler, a specialized computer program that converts source code into machine code that can be understood by a computer.\nFor example, you might have a computer program that looks like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nA compiler will take the above code and turn it into the following machine code:\n\n\n\nmachine code\n\n\nVS Code, the programming environment provided to you as on Github Codespaces, utilizes a compiler called clang or c language.\nYou can enter the following into the terminal window to compile your code: clang -o hello hello.c.\nCommand-line arguments are provided at the command line to clang as -o hello hello.c.\nRunning ./hello in the terminal window, your program runs as intended.\nConsider the following code from last week:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string name = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", name);\n}\n\nTo compile this code, you can type clang -o hello hello.c -lcs50.\nIf you were to type make hello, it runs a command that executes clang to create an output file that you can run as a user.\nVS Code has been pre-programmed such that make will run numerous command line arguments along with clang for your convenience as a user.\nWhile the above is offered as an illustration, such that you can understand more deeply the process and concept of compiling code, using make is perfectly fine and the expectation!\nCompiling involves four major steps, including the following:\nFirst, preprocessing is where the header files in your code, designated by a # (such as #include &lt;cs50.h&gt;) are effectively copied and pasted into your file. During this step, the code from cs50.h is copied into your program. Similarly, just as your code contains #include &lt;stdio.h&gt;, code contained within stdio.h somewhere on your computer is copied to your program. This step can be visualized as follows:\n  string get_string(string prompt);\n  int printf(string format, ...);\n\n  int main(void)\n  {\n      string name = get_string(\"What's your name? \");\n      printf(\"hello, %s\\n\", name);\n  }\n\nSecond, compiling is where your program is converted into assembly code. This step can be visualized as follows:\n...\nmain:\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n\nThird, assembling involves the compiler converting your assembly code into machine code. This step can be visualized as follows:\n01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n\nFinally, during the linking step, code from your included libraries is converted also into machine code and combined with your code. The final executable file is then outputted.\n\n\n\nlinking\n\n\n\n\n\n\n\nEveryone will make mistakes while coding.\nDebugging is the process of locating and removing bugs from your code.\nOne of the debugging techniques you will use during this course to debug your code is called rubber duck debugging, where you can talk to an inanimate object (or yourself) to help think through your code and why it is not working as intended. When you are having challenges with your code, consider how speaking out loud to, quite literally, a rubber duck about the code problem. If you’d rather not talk to a small plastic duck, you are welcome to speak to a human near you!\nConsider the following image from last week:\n\n\n\nmario\n\n\nConsider the following code that has a bug purposely inserted within it:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that this code prints four blocks instead of three.\nType code buggy0.c into the terminal window and write the above code.\nRunning this code, four bricks appear instead of the intended three.\nprintf is a very useful way of debugging your code. You could modify your code as follows:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"i is %i\\n\", i);\n        printf(\"#\\n\");\n    }\n}\n\nNotice how this code outputs the value of i during each iteration of the loop such that we can debug our code.\nRunning this code, you will see numerous statements, including i is 0, i is 1, i is 2, and i is 3. Seeing this, you might realize that further code needs to be corrected as follows:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice the &lt;= has been replaced with &lt;.\nThis code can be further improved as follows:\n// Buggy example for debug50\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_column(int height);\n\nint main(void)\n{\n    int h = get_int(\"Height: \");\n    print_column(h);\n}\n\nvoid print_column(int height)\n{\n    for (int i = 0; i &lt;= height; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that compiling and running this code still results in a bug.\nTo address this bug, we will use a new tool.\nA second tool in debugging is called a debugger, a software tool created by programmers to help track down bugs in code.\nIn VS Code, a preconfigured debugger has been provided to you.\nTo utilize this debugger, first set a breakpoint by clicking to the left of a line of your code, just to the left of the line number. When you click there, you will see a red dot appearing. Imagine this as a stop sign, asking the compiler to pause so that you can consider what’s happening in this part of your code.\n\n\n\nbreakpoint\n\n\nSecond, run debug50 ./buggy0. You will notice that after the debugger comes to life and a line of your code will illuminate in a gold-like color. Quite literally, the code has paused at this line of code. Notice in the top left corner how all local variables are being displayed, including h, which currently does not have a value. At the top of your window, you can click the step over button, and it will keep moving through your code. Notice how the value of h increases.\nWhile this tool will not show you where your bug is, it will help you slow down and see how your code is running step by step. You can use step into as a way to look further into the details of your buggy code.\n\n\n\n\n\nIn Week 0, we talked about data types such as bool, int, char, string, etc.\nEach data type requires a certain amount of system resources:\n\nbool 1 byte\nint 4 bytes\nlong 8 bytes\nfloat 4 bytes\ndouble 8 bytes\nchar 1 byte\nstring ? bytes\n\nInside of your computer, you have a finite amount of memory available.\n\n\n\nmemory\n\n\nPhysically, on the memory of your computer, you can imagine how specific types of data are stored on your computer. You might imagine that a char, which only requires 1 byte of memory, may look as follows:\n\n\n\n1 byte\n\n\nSimilarly, an int, which requires 4 bytes, might look as follows:\n\n\n\n4 bytes\n\n\nWe can create a program that explores these concepts. Inside your terminal, type code scores.c and write code as follows:\n// Averages three (hardcoded) numbers\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int score1 = 72;\n    int score2 = 73;\n    int score3 = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (score1 + score2 + score3) / 3.0);\n}\n\nNotice that the number on the right is a floating point value of 3.0, so that the calculation is rendered as a floating point value in the end.\nRunning make scores, the program runs.\nYou can imagine how these variables are stored in memory:\n\n\n\nscores in memory\n\n\nArrays are a sequence of values that are stored back-to-back in memory.\nint scores[3] is a way of telling the compiler to provide you three back-to-back places in memory of size int to store three scores. Considering our program, you can revise your code as follows:\n// Averages three (hardcoded) numbers using an array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int scores[3];\n    scores[0] = 72;\n    scores[1] = 73;\n    scores[2] = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice that score[0] examines the value at this location of memory by indexing into the array called scores at location 0 to see what value is stored there.\nYou can see how, while the above code works, there is still an opportunity for improving our code. Revise your code as follows:\n// Averages three numbers using an array and a loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get scores\n    int scores[3];\n    for (int i = 0; i &lt; 3; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice how we index into scores by using scores[i] where i is supplied by the for loop.\nWe can simplify or abstract away the calculation of the average. Modify your code as follows:\n// Averages three numbers using an array, a constant, and a helper function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// Constant\nconst int N = 3;\n\n// Prototype\nfloat average(int length, int array[]);\n\nint main(void)\n{\n    // Get scores\n    int scores[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", average(N, scores));\n}\n\nfloat average(int length, int array[])\n{\n    // Calculate average\n    int sum = 0;\n    for (int i = 0; i &lt; length; i++)\n    {\n        sum += array[i];\n    }\n    return sum / (float) length;\n}\n\nNotice that a new function called average is declared. Further, notice that a const or constant value of N is declared. Most importantly, notice how the average function takes int array[], which means that the compiler passes an array to this function.\nNot only can arrays be containers: They can be passed between functions.\n\n\n\n\n\nA string is simply an array of variables of type char: an array of characters.\nTo explore char and string, type code hi.c in the terminal window and write code as follows:\n// Prints chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%c%c%c\\n\", c1, c2, c3);\n}\n\nNotice that this will output a string of characters.\nSimilarly, make the following modification to your code:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%i %i %i\\n\", c1, c2, c3);\n}\n\nNotice that that ASCII codes are printed by replacing %c with %i.\nConsidering the following image, you can see how a string is an array of characters that begins with the first character and ends with a special character called a NUL character:\n\n\n\nhi with terminator\n\n\nImagining this in decimal, your array would look like the following:\n\n\n\nhi with decimal\n\n\nTo further understand how a string works, revise your code as follows:\n// Treats string as array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%c%c%c\\n\", s[0], s[1], s[2]);\n}\n\nNotice how the printf statement presents three values from our array called s.\nAs before, we can replace %c with %i as follows:\n// Prints string's ASCII codes, including NUL\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n}\n\nNotice that this prints the string’s ASCII codes, including NUL.\nLet’s imagine we want to say both HI! and BYE!. Modify your code as follows:\n// Multiple strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    string t = \"BYE!\";\n\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\n\nNotice that two strings are declared and used in this example.\nYou can visualize this as follows:\n\n\n\nhi and bye\n\n\nWe can further improve this code. Modify your code as follows:\n// Array of strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%s\\n\", words[0]);\n    printf(\"%s\\n\", words[1]);\n}\n\nNotice that both strings are stored within a single array of type string.\nWe can consolidate our two strings into an array of strings.\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%c%c%c\\n\", words[0][0], words[0][1], words[0][2]);\n    printf(\"%c%c%c%c\\n\", words[1][0], words[1][1], words[1][2], words[1][3]);\n}\n\nNotice that an array of words is created. It is an array of strings. Each word is stored in words.\n\n\n\n\n\nA common problem within programming, and perhaps C more specifically, is to discover the length of an array. How could we implement this in code? Type code length.c in the terminal window and code as follows:\n// Determines the length of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (name[n] != '\\0')\n    {\n        n++;\n    }\n    printf(\"%i\\n\", n);\n}\n\nNotice that this code loops until the NUL character is found.\nThis code can be improved by abstracting away the counting into a function as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint string_length(string s);\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = string_length(name);\n    printf(\"%i\\n\", length);\n}\n\nint string_length(string s)\n{\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (s[n] != '\\0')\n    {\n        n++;\n    }\n    return n;\n}\n\nNotice that a new function called string_length counts characters until NUL is located.\nSince this is such a common problem within programming, other programmers have created code in the string.h library to find the length of a string. You can find the length of a string by modifying your code as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = strlen(name);\n    printf(\"%i\\n\", length);\n}\n\nNotice that this code uses the string.h library, declared at the top of the file. Further, it uses a function from that library called strlen, which calculates the length of the string passed to it.\nOur code can stand on the shoulders of programmers who came before and use libraries they created.\nctype.h is another library that is quite useful. Imagine we wanted to create a program that converted all lowercase characters to uppercase ones. In the terminal window, type code uppercase.c and write code as follows:\n// Uppercases a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (s[i] &gt;= 'a' && s[i] &lt;= 'z')\n        {\n            printf(\"%c\", s[i] - 32);\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code iterates through each value in the string. The program looks at each character. If the character is lowercase, it subtracts the value 32 from it to convert it to uppercase.\nRecalling our previous work from last week, you might remember this ASCII values chart:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nWhen a lowercase character has 32 subtracted from it, it results in an uppercase version of that same character.\nWhile the program does what we want, there is an easier way using the ctype.h library. Modify your program as follows:\n// Uppercases string using ctype library (and an unnecessary condition)\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (islower(s[i]))\n        {\n            printf(\"%c\", toupper(s[i]));\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that the program iterates through each character of the string. The toupper function is passed s[i]. Each character (if lowercase) is converted to uppercase.\nIt’s worth mentioning that toupper automatically knows to uppercase only lowercase characters. Hence, your code can be simplified as follows:\n// Uppercases string using ctype library\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        printf(\"%c\", toupper(s[i]));\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code uppercases a string using the ctype library.\nYou can read about all the capabilities of the ctype library on the Manual Pages.\n\n\n\n\n\nCommand-line arguments are those arguments that are passed to your program at the command line. For example, all those statements you typed after clang are considered command line arguments. You can use these arguments in your own programs!\nIn your terminal window, type code greet.c and write code as follows:\n// Uses get_string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nNotice that this says hello to the user.\nStill, would it not be nice to be able to take arguments before the program even runs? Modify your code as follows:\n// Prints a command-line argument\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc == 2)\n    {\n        printf(\"hello, %s\\n\", argv[1]);\n    }\n    else\n    {\n        printf(\"hello, world\\n\");\n    }\n}\n\nNotice that this program knows both argc, the number of command line arguments, and argv, which is an array of the characters passed as arguments at the command line.\nTherefore, using the syntax of this program, executing ./greet David would result in the program saying hello, David.\nYou can print each of the command-line arguments with the following:\n// Prints command-line arguments\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    for (int i = 0; i &lt; argc; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n}\n\n\n\n\n\n\nWhen a program ends, a special exit code is provided to the computer.\nWhen a program exits without error, a status code of 0 is provided to the computer. Often, when an error occurs that results in the program ending, a status of 1 is provided by the computer.\nYou could write a program as follows that illustrates this by typing code status.c and writing code as follows:\n// Returns explicit value from main\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"Missing command-line argument\\n\");\n        return 1;\n    }\n    printf(\"hello, %s\\n\", argv[1]);\n    return 0;\n}\n\nNotice that if you fail to provide ./status David, you will get an exit status of 1. However, if you do provide ./status David, you will get an exit status of 0.\nYou can type echo $? in the terminal to see the exit status of the last run command.\nYou can imagine how you might use portions of the above program to check if a user provided the correct number of command-line arguments.\n\n\n\n\n\nCryptography is the art of ciphering and deciphering a message.\nNow, with the building block of arrays, chars, and strings, you can cipher and decipher a message.\nplaintext and a key are provided to a cipher, resulting in ciphered text.\n\n\n\ncryptography\n\n\nThe key is a special argument passed to the cipher along with the plaintext. The cipher uses the key to make decisions about how to implement its cipher algorithm.\nThis week, you will undertake programming challenges similar to the above.\n\n\n\n\nIn this lesson, you learned more details about compiling and how data is stored within a computer. Specifically, you learned…\n\nGenerally, how a compiler works.\nHow to debug your code using four methods.\nHow to utilize arrays within your code.\nHow arrays store data in back-to-back portions of memory.\nHow strings are simply arrays of characters.\nHow to interact with arrays in your code.\nHow command-line arguments can be passed to your programs.\nThe basic building blocks of cryptography.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#welcome",
    "href": "notes/notes_3.html#welcome",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In our previous session, we learned about C, a text-based programming language.\nThis week, we are going to take a deeper look at additional building blocks that will support our goals of learning more about programming from the bottom up.\nFundamentally, in addition to the essentials of programming, this course is about problem-solving. Accordingly, we will also focus further on how to approach computer science problems.\nBy the end of the course, you will learn how to use these aforementioned building blocks to solve a whole host of computer science problems.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#reading-levels",
    "href": "notes/notes_3.html#reading-levels",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "One of the real-world problems we will solve in this course is understanding reading levels.\nWith the help of some of your peers, we presented readings at various reading levels.\nWe will be quantifying reading levels this week as one of your many programming challenges.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#compiling",
    "href": "notes/notes_3.html#compiling",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Encryption is the act of hiding plain text from prying eyes. Decrypting, then, is the act of taking an encrypted piece of text and returning it to a human-readable form.\nAn encrypted piece of text may look like the following:\nU  I  J  T   J  T   D  T  5  0\n\nRecall that last week, you learned about a compiler, a specialized computer program that converts source code into machine code that can be understood by a computer.\nFor example, you might have a computer program that looks like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nA compiler will take the above code and turn it into the following machine code:\n\n\n\nmachine code\n\n\nVS Code, the programming environment provided to you as on Github Codespaces, utilizes a compiler called clang or c language.\nYou can enter the following into the terminal window to compile your code: clang -o hello hello.c.\nCommand-line arguments are provided at the command line to clang as -o hello hello.c.\nRunning ./hello in the terminal window, your program runs as intended.\nConsider the following code from last week:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string name = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", name);\n}\n\nTo compile this code, you can type clang -o hello hello.c -lcs50.\nIf you were to type make hello, it runs a command that executes clang to create an output file that you can run as a user.\nVS Code has been pre-programmed such that make will run numerous command line arguments along with clang for your convenience as a user.\nWhile the above is offered as an illustration, such that you can understand more deeply the process and concept of compiling code, using make is perfectly fine and the expectation!\nCompiling involves four major steps, including the following:\nFirst, preprocessing is where the header files in your code, designated by a # (such as #include &lt;cs50.h&gt;) are effectively copied and pasted into your file. During this step, the code from cs50.h is copied into your program. Similarly, just as your code contains #include &lt;stdio.h&gt;, code contained within stdio.h somewhere on your computer is copied to your program. This step can be visualized as follows:\n  string get_string(string prompt);\n  int printf(string format, ...);\n\n  int main(void)\n  {\n      string name = get_string(\"What's your name? \");\n      printf(\"hello, %s\\n\", name);\n  }\n\nSecond, compiling is where your program is converted into assembly code. This step can be visualized as follows:\n...\nmain:\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n\nThird, assembling involves the compiler converting your assembly code into machine code. This step can be visualized as follows:\n01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n\nFinally, during the linking step, code from your included libraries is converted also into machine code and combined with your code. The final executable file is then outputted.\n\n\n\nlinking",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#debugging",
    "href": "notes/notes_3.html#debugging",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Everyone will make mistakes while coding.\nDebugging is the process of locating and removing bugs from your code.\nOne of the debugging techniques you will use during this course to debug your code is called rubber duck debugging, where you can talk to an inanimate object (or yourself) to help think through your code and why it is not working as intended. When you are having challenges with your code, consider how speaking out loud to, quite literally, a rubber duck about the code problem. If you’d rather not talk to a small plastic duck, you are welcome to speak to a human near you!\nConsider the following image from last week:\n\n\n\nmario\n\n\nConsider the following code that has a bug purposely inserted within it:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that this code prints four blocks instead of three.\nType code buggy0.c into the terminal window and write the above code.\nRunning this code, four bricks appear instead of the intended three.\nprintf is a very useful way of debugging your code. You could modify your code as follows:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"i is %i\\n\", i);\n        printf(\"#\\n\");\n    }\n}\n\nNotice how this code outputs the value of i during each iteration of the loop such that we can debug our code.\nRunning this code, you will see numerous statements, including i is 0, i is 1, i is 2, and i is 3. Seeing this, you might realize that further code needs to be corrected as follows:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice the &lt;= has been replaced with &lt;.\nThis code can be further improved as follows:\n// Buggy example for debug50\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_column(int height);\n\nint main(void)\n{\n    int h = get_int(\"Height: \");\n    print_column(h);\n}\n\nvoid print_column(int height)\n{\n    for (int i = 0; i &lt;= height; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that compiling and running this code still results in a bug.\nTo address this bug, we will use a new tool.\nA second tool in debugging is called a debugger, a software tool created by programmers to help track down bugs in code.\nIn VS Code, a preconfigured debugger has been provided to you.\nTo utilize this debugger, first set a breakpoint by clicking to the left of a line of your code, just to the left of the line number. When you click there, you will see a red dot appearing. Imagine this as a stop sign, asking the compiler to pause so that you can consider what’s happening in this part of your code.\n\n\n\nbreakpoint\n\n\nSecond, run debug50 ./buggy0. You will notice that after the debugger comes to life and a line of your code will illuminate in a gold-like color. Quite literally, the code has paused at this line of code. Notice in the top left corner how all local variables are being displayed, including h, which currently does not have a value. At the top of your window, you can click the step over button, and it will keep moving through your code. Notice how the value of h increases.\nWhile this tool will not show you where your bug is, it will help you slow down and see how your code is running step by step. You can use step into as a way to look further into the details of your buggy code.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#arrays",
    "href": "notes/notes_3.html#arrays",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In Week 0, we talked about data types such as bool, int, char, string, etc.\nEach data type requires a certain amount of system resources:\n\nbool 1 byte\nint 4 bytes\nlong 8 bytes\nfloat 4 bytes\ndouble 8 bytes\nchar 1 byte\nstring ? bytes\n\nInside of your computer, you have a finite amount of memory available.\n\n\n\nmemory\n\n\nPhysically, on the memory of your computer, you can imagine how specific types of data are stored on your computer. You might imagine that a char, which only requires 1 byte of memory, may look as follows:\n\n\n\n1 byte\n\n\nSimilarly, an int, which requires 4 bytes, might look as follows:\n\n\n\n4 bytes\n\n\nWe can create a program that explores these concepts. Inside your terminal, type code scores.c and write code as follows:\n// Averages three (hardcoded) numbers\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int score1 = 72;\n    int score2 = 73;\n    int score3 = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (score1 + score2 + score3) / 3.0);\n}\n\nNotice that the number on the right is a floating point value of 3.0, so that the calculation is rendered as a floating point value in the end.\nRunning make scores, the program runs.\nYou can imagine how these variables are stored in memory:\n\n\n\nscores in memory\n\n\nArrays are a sequence of values that are stored back-to-back in memory.\nint scores[3] is a way of telling the compiler to provide you three back-to-back places in memory of size int to store three scores. Considering our program, you can revise your code as follows:\n// Averages three (hardcoded) numbers using an array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int scores[3];\n    scores[0] = 72;\n    scores[1] = 73;\n    scores[2] = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice that score[0] examines the value at this location of memory by indexing into the array called scores at location 0 to see what value is stored there.\nYou can see how, while the above code works, there is still an opportunity for improving our code. Revise your code as follows:\n// Averages three numbers using an array and a loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get scores\n    int scores[3];\n    for (int i = 0; i &lt; 3; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice how we index into scores by using scores[i] where i is supplied by the for loop.\nWe can simplify or abstract away the calculation of the average. Modify your code as follows:\n// Averages three numbers using an array, a constant, and a helper function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// Constant\nconst int N = 3;\n\n// Prototype\nfloat average(int length, int array[]);\n\nint main(void)\n{\n    // Get scores\n    int scores[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", average(N, scores));\n}\n\nfloat average(int length, int array[])\n{\n    // Calculate average\n    int sum = 0;\n    for (int i = 0; i &lt; length; i++)\n    {\n        sum += array[i];\n    }\n    return sum / (float) length;\n}\n\nNotice that a new function called average is declared. Further, notice that a const or constant value of N is declared. Most importantly, notice how the average function takes int array[], which means that the compiler passes an array to this function.\nNot only can arrays be containers: They can be passed between functions.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#strings",
    "href": "notes/notes_3.html#strings",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "A string is simply an array of variables of type char: an array of characters.\nTo explore char and string, type code hi.c in the terminal window and write code as follows:\n// Prints chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%c%c%c\\n\", c1, c2, c3);\n}\n\nNotice that this will output a string of characters.\nSimilarly, make the following modification to your code:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%i %i %i\\n\", c1, c2, c3);\n}\n\nNotice that that ASCII codes are printed by replacing %c with %i.\nConsidering the following image, you can see how a string is an array of characters that begins with the first character and ends with a special character called a NUL character:\n\n\n\nhi with terminator\n\n\nImagining this in decimal, your array would look like the following:\n\n\n\nhi with decimal\n\n\nTo further understand how a string works, revise your code as follows:\n// Treats string as array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%c%c%c\\n\", s[0], s[1], s[2]);\n}\n\nNotice how the printf statement presents three values from our array called s.\nAs before, we can replace %c with %i as follows:\n// Prints string's ASCII codes, including NUL\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n}\n\nNotice that this prints the string’s ASCII codes, including NUL.\nLet’s imagine we want to say both HI! and BYE!. Modify your code as follows:\n// Multiple strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    string t = \"BYE!\";\n\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\n\nNotice that two strings are declared and used in this example.\nYou can visualize this as follows:\n\n\n\nhi and bye\n\n\nWe can further improve this code. Modify your code as follows:\n// Array of strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%s\\n\", words[0]);\n    printf(\"%s\\n\", words[1]);\n}\n\nNotice that both strings are stored within a single array of type string.\nWe can consolidate our two strings into an array of strings.\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%c%c%c\\n\", words[0][0], words[0][1], words[0][2]);\n    printf(\"%c%c%c%c\\n\", words[1][0], words[1][1], words[1][2], words[1][3]);\n}\n\nNotice that an array of words is created. It is an array of strings. Each word is stored in words.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#string-length",
    "href": "notes/notes_3.html#string-length",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "A common problem within programming, and perhaps C more specifically, is to discover the length of an array. How could we implement this in code? Type code length.c in the terminal window and code as follows:\n// Determines the length of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (name[n] != '\\0')\n    {\n        n++;\n    }\n    printf(\"%i\\n\", n);\n}\n\nNotice that this code loops until the NUL character is found.\nThis code can be improved by abstracting away the counting into a function as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint string_length(string s);\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = string_length(name);\n    printf(\"%i\\n\", length);\n}\n\nint string_length(string s)\n{\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (s[n] != '\\0')\n    {\n        n++;\n    }\n    return n;\n}\n\nNotice that a new function called string_length counts characters until NUL is located.\nSince this is such a common problem within programming, other programmers have created code in the string.h library to find the length of a string. You can find the length of a string by modifying your code as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = strlen(name);\n    printf(\"%i\\n\", length);\n}\n\nNotice that this code uses the string.h library, declared at the top of the file. Further, it uses a function from that library called strlen, which calculates the length of the string passed to it.\nOur code can stand on the shoulders of programmers who came before and use libraries they created.\nctype.h is another library that is quite useful. Imagine we wanted to create a program that converted all lowercase characters to uppercase ones. In the terminal window, type code uppercase.c and write code as follows:\n// Uppercases a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (s[i] &gt;= 'a' && s[i] &lt;= 'z')\n        {\n            printf(\"%c\", s[i] - 32);\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code iterates through each value in the string. The program looks at each character. If the character is lowercase, it subtracts the value 32 from it to convert it to uppercase.\nRecalling our previous work from last week, you might remember this ASCII values chart:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nWhen a lowercase character has 32 subtracted from it, it results in an uppercase version of that same character.\nWhile the program does what we want, there is an easier way using the ctype.h library. Modify your program as follows:\n// Uppercases string using ctype library (and an unnecessary condition)\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (islower(s[i]))\n        {\n            printf(\"%c\", toupper(s[i]));\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that the program iterates through each character of the string. The toupper function is passed s[i]. Each character (if lowercase) is converted to uppercase.\nIt’s worth mentioning that toupper automatically knows to uppercase only lowercase characters. Hence, your code can be simplified as follows:\n// Uppercases string using ctype library\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        printf(\"%c\", toupper(s[i]));\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code uppercases a string using the ctype library.\nYou can read about all the capabilities of the ctype library on the Manual Pages.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#command-line-arguments",
    "href": "notes/notes_3.html#command-line-arguments",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Command-line arguments are those arguments that are passed to your program at the command line. For example, all those statements you typed after clang are considered command line arguments. You can use these arguments in your own programs!\nIn your terminal window, type code greet.c and write code as follows:\n// Uses get_string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nNotice that this says hello to the user.\nStill, would it not be nice to be able to take arguments before the program even runs? Modify your code as follows:\n// Prints a command-line argument\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc == 2)\n    {\n        printf(\"hello, %s\\n\", argv[1]);\n    }\n    else\n    {\n        printf(\"hello, world\\n\");\n    }\n}\n\nNotice that this program knows both argc, the number of command line arguments, and argv, which is an array of the characters passed as arguments at the command line.\nTherefore, using the syntax of this program, executing ./greet David would result in the program saying hello, David.\nYou can print each of the command-line arguments with the following:\n// Prints command-line arguments\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    for (int i = 0; i &lt; argc; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n}",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#exit-status",
    "href": "notes/notes_3.html#exit-status",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "When a program ends, a special exit code is provided to the computer.\nWhen a program exits without error, a status code of 0 is provided to the computer. Often, when an error occurs that results in the program ending, a status of 1 is provided by the computer.\nYou could write a program as follows that illustrates this by typing code status.c and writing code as follows:\n// Returns explicit value from main\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"Missing command-line argument\\n\");\n        return 1;\n    }\n    printf(\"hello, %s\\n\", argv[1]);\n    return 0;\n}\n\nNotice that if you fail to provide ./status David, you will get an exit status of 1. However, if you do provide ./status David, you will get an exit status of 0.\nYou can type echo $? in the terminal to see the exit status of the last run command.\nYou can imagine how you might use portions of the above program to check if a user provided the correct number of command-line arguments.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#cryptography",
    "href": "notes/notes_3.html#cryptography",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Cryptography is the art of ciphering and deciphering a message.\nNow, with the building block of arrays, chars, and strings, you can cipher and decipher a message.\nplaintext and a key are provided to a cipher, resulting in ciphered text.\n\n\n\ncryptography\n\n\nThe key is a special argument passed to the cipher along with the plaintext. The cipher uses the key to make decisions about how to implement its cipher algorithm.\nThis week, you will undertake programming challenges similar to the above.",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_3.html#summing-up",
    "href": "notes/notes_3.html#summing-up",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In this lesson, you learned more details about compiling and how data is stored within a computer. Specifically, you learned…\n\nGenerally, how a compiler works.\nHow to debug your code using four methods.\nHow to utilize arrays within your code.\nHow arrays store data in back-to-back portions of memory.\nHow strings are simply arrays of characters.\nHow to interact with arrays in your code.\nHow command-line arguments can be passed to your programs.\nThe basic building blocks of cryptography.\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 03 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html",
    "href": "notes/notes_5.html",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Welcome!\nPixel Art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying and malloc\nValgrind\nGarbage Values\nPointer Fun with Binky\nSwapping\nOverflow\nscanf\nFile I/O\nSumming Up\n\n\n\n\nIn previous weeks, we talked about images being made of smaller building blocks called pixels.\nToday, we will go into further detail about the zeros and ones that make up these images. In particular, we will be going deeper into the fundamental building blocks that make up files, including images.\nFurther, we will discuss how to access the underlying data stored in computer memory.\nAs we begin today, know that the concepts covered in this lecture may take some time to fully click.\n\n\n\n\n\nPixels are squares, individual dots, of color that are arranged on an up-down, left-right grid.\nYou can imagine an image as a map of bits, where zeros represent black and ones represent white.\n\n\n\nZeros and ones being converted to a black and white smiley\n\n\n\n\n\n\n\nRGB, or red, green, blue, are numbers that represent the amount of each of these colors. In Adobe Photoshop, you can see these settings as follows:\n\n\n\nA photoshop panel with RGB values and hexadecimal input\n\n\nNotice how the amount of red, blue, and green changes the color selected.\nYou can see from the image above that color is not just represented by three values. At the bottom of the window, there is a special value made up of numbers and characters. 255 is represented as FF. Why might this be?\nHexadecimal is a system of counting that has 16 counting values. They are as follows:\n  0 1 2 3 4 5 6 7 8 9 A B C D E F\nNotice that F represents 15.\nHexadecimal is also known as base-16.\nWhen counting in hexadecimal, each column is a power of 16.\nThe number 0 is represented as 00.\nThe number 1 is represented as 01.\nThe number 9 is represented by 09.\nThe number 10 is represented as 0A.\nThe number 15 is represented as 0F.\nThe number 16 is represented as 10.\nThe number 255 is represented as FF, because 16 x 15 (or F) is 240. Add 15 more to make 255. This is the highest number you can count using a two-digit hexadecimal system.\nHexadecimal is useful because it can be represented using fewer digits. Hexadecimal allows us to represent information more succinctly.\n\n\n\n\n\nIn weeks past, you may recall our artist rendering of concurrent blocks of memory. Applying hexadecimal numbering to each of these blocks of memory, you can visualize these as follows:\n\n\n\nBlocks of memory numbered in hex\n\n\nYou can imagine how there may be confusion regarding whether the 10 block above may represent a location in memory or the value 10. Accordingly, by convention, all hexadecimal numbers are often represented with the 0x prefix as follows:\n\n\n\nblocks of memory numbered in hex with 0x\n\n\nIn your terminal window, type code addresses.c and write your code as follows:\n// Prints an integer\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%i\\n\", n);\n}\nNotice how n is stored in memory with the value 50.\nYou can visualize how this program stores this value as follows:\n\n\n\nthe value 50 stored in a memory location with hex\n\n\n\n\n\n\n\nThe C language has two powerful operators that relate to memory:\n  & Provides the address of something stored in memory.\n  * Instructs the compiler to go to a location in memory.\nWe can leverage this knowledge by modifying our code as follows:\n// Prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%p\\n\", &n);\n}\nNotice the %p, which allows us to view the address of a location in memory. &n can be literally translated as “the address of n.” Executing this code will return an address of memory beginning with 0x.\nA pointer is a variable that stores the address of something. Most succinctly, a pointer is an address in your computer’s memory.\nConsider the following code:\nint n = 50;\nint *p = &n;\nNotice that p is a pointer that contains the address of an integer n.\nModify your code as follows:\n// Stores and prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%p\\n\", p);\n}\nNotice that this code has the same effect as our previous code. We have simply leveraged our new knowledge of the & and * operators.\nTo illustrate the use of the * operator, consider the following:\n// Stores and prints an integer via its address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%i\\n\", *p);\n}\nNotice that the printf line prints the integer at the location of p. int *p creates a pointer whose job is to store the memory address of an integer.\nYou can visualize our code as follows:\n\n\n\nSame value of 50 in a memory location with a pointer value stored elsewhere\n\n\nNotice the pointer seems rather large. Indeed, a pointer is usually stored as an 8-byte value. p is storing the address of the 50.\nYou can more accurately visualize a pointer as one address that points to another:\n\n\n\nA pointer as an arrow, pointing from one location of memory to another\n\n\n\n\n\n\n\nNow that we have a mental model for pointers, we can peel back a level of simplification that was offered earlier in this course.\nModify your code as follows:\n// Prints a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that a string s is printed.\nRecall that a string is simply an array of characters. For example, string s = \"HI!\" can be represented as follows:\n\n\n\nThe string HI with an exclamation point stored in memory\n\n\nHowever, what is s really? Where is the s stored in memory? As you can imagine, s needs to be stored somewhere. You can visualize the relationship of s to the string as follows:\n\n\n\nSame string HI with a pointer pointing to it\n\n\nNotice how a pointer called s tells the compiler where the first byte of the string exists in memory.\nModify your code as follows:\n// Prints a string's address as well the addresses of its chars\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", &s[0]);\n    printf(\"%p\\n\", &s[1]);\n    printf(\"%p\\n\", &s[2]);\n    printf(\"%p\\n\", &s[3]);\n}\nNotice the above prints the memory locations of each character in the string s. The & symbol is used to show the address of each element of the string. When running this code, notice that elements 0, 1, 2, and 3 are next to one another in memory.\nLikewise, you can modify your code as follows:\n// Declares a string with CS50 Library\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that this code will present the string that starts at the location of s. This code effectively removes the training wheels of the string data type offered by cs50.h. This is raw C code, without the scaffolding of the cs50 library.\nTaking off the training wheels, you can modify your code again:\n// Declares a string without CS50 Library\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that cs50.h is removed. A string is implemented as a char *.\nYou can imagine how a string, as a data type, is created.\nLast week, we learned how to create your own data type as a struct.\nThe cs50 library includes a struct as follows: typedef char *string\nThis struct, when using the cs50 library, allows one to use a custom data type called string.\n\n\n\n\n\nPointer arithmetic is the ability to do math on locations of memory.\nYou can modify your code to print out each memory location in the string as follows:\n// Prints a string's chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", s[0]);\n    printf(\"%c\\n\", s[1]);\n    printf(\"%c\\n\", s[2]);\n}\nNotice that we are printing each character at the location of s.\nFurther, you can modify your code as follows:\n// Prints a string's chars via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", *s);\n    printf(\"%c\\n\", *(s + 1));\n    printf(\"%c\\n\", *(s + 2));\n}\nNotice that the first character at the location of s is printed. Then, the character at the location s + 1 is printed, and so on.\nLikewise, consider the following:\n// Prints substrings via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", s + 1);\n    printf(\"%s\\n\", s + 2);\n}\nNotice that this code prints the values stored at various memory locations starting with s.\n\n\n\n\n\nA string of characters is simply an array of characters identified by the location of its first byte.\nEarlier in the course, we considered the comparison of integers. We could represent this in code by typing code compare.c into the terminal window as follows:\n// Compares two integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two integers\n    int i = get_int(\"i: \");\n    int j = get_int(\"j: \");\n\n    // Compare integers\n    if (i == j)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that this code takes two integers from the user and compares them.\nIn the case of strings, however, one cannot compare two strings using the == operator.\nUtilizing the == operator in an attempt to compare strings will attempt to compare the memory locations of the strings instead of the characters therein. Accordingly, we recommended the use of strcmp.\nTo illustrate this, modify your code as follows:\n// Compares two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings' addresses\n    if (s == t)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNoticing that typing in HI! for both strings still results in the output of Different.\nWhy are these strings seemingly different? You can use the following to visualize why:\n\n\n\ntwo strings stored separately in memory\n\n\nTherefore, the code for compare.c above is actually attempting to see if the memory addresses are different, not the strings themselves.\nUsing strcmp, we can correct our code:\n// Compares two strings using strcmp\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings\n    if (strcmp(s, t) == 0)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that strcmp can return 0 if the strings are the same.\nTo further illustrate how these two strings are living in two locations, modify your code as follows:\n// Prints two strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\nNotice how we now have two separate strings stored, likely at two separate locations.\nYou can see the locations of these two stored strings with a small modification:\n// Prints two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings' addresses\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", t);\n}\nNotice that the %s has been changed to %p in the print statement.\n\n\n\n\n\nA common need in programming is to copy one string to another.\nIn your terminal window, type code copy.c and write code as follows:\n// Capitalizes a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    t[0] = toupper(t[0]);\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that string t = s copies the address of s to t. This does not accomplish what we are desiring. The string is not copied – only the address is. Further, notice the inclusion of ctype.h.\nYou can visualize the above code as follows:\n\n\n\ntwo pointers pointing at the same memory location with a string\n\n\nNotice that s and t are still pointing at the same blocks of memory. This is not an authentic copy of a string. Instead, these are two pointers pointing at the same string.\nBefore we address this challenge, it’s important to ensure that we don’t experience a segmentation fault through our code, where we attempt to copy string s to string t, where string t does not exist. We can employ the strlen function as follows to assist with that:\n// Capitalizes a string, checking length first\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strlen is used to make sure string t exists. If it does not, nothing will be copied.\nTo be able to make an authentic copy of the string, we will need to introduce two new building blocks. First, malloc allows you, the programmer, to allocate a block of a specific size of memory. Second, free allows you to tell the compiler to free up that block of memory you previously allocated.\nWe can modify our code to create an authentic copy of our string as follows:\n// Capitalizes a copy of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0; i &lt;= strlen(s); i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that malloc(strlen(s) + 1) creates a block of memory that is the length of the string s plus one. This allows for the inclusion of the null \\0 character in our final copied string. Then, the for loop walks through the string s and assigns each value to that same location on the string t.\nIt turns out that our code is inefficient. Modify your code as follows:\n// Capitalizes a copy of a string, defining n in loop too\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0, n = strlen(s); i &lt;= n; i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that n = strlen(s) is defined now in the left-hand side of the for loop. It’s best not to call unneeded functions in the middle condition of the for loop, as it will run over and over again. When moving n = strlen(s) to the left-hand side, the function strlen only runs once.\nThe C Language has a built-in function to copy strings called strcpy. It can be implemented as follows:\n// Capitalizes a copy of a string using strcpy\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strcpy does the same work that our for loop previously did.\nBoth get_string and malloc return NULL, a special value in memory, in the event that something goes wrong. You can write code that can check for this NULL condition as follows:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\nNotice that if the string obtained is of length 0 or malloc fails, NULL is returned. Further, notice that free lets the computer know you are done with this block of memory you created via malloc.\n\n\n\n\n\nValgrind is a tool that can check to see if there are memory-related issues with your programs wherein you utilized malloc. Specifically, it checks to see if you free all the memory you allocated.\nConsider the following code for memory.c:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n}\nNotice that running this program does not cause any errors. While malloc is used to allocate enough memory for an array, the code fails to free that allocated memory.\nIf you type make memory followed by valgrind ./memory, you will get a report from valgrind that will report where memory has been lost as a result of your program. One error that valgrind reveals is that we attempted to assign the value of 33 at the 4th position of the array, where we only allocated an array of size 3. Another error is that we never freed x.\nYou can modify your code to free the memory of x as follows:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n    free(x);\n}\nNotice that running valgrind again now results in no memory leaks.\n\n\n\n\n\nWhen you ask the compiler for a block of memory, there is no guarantee that this memory will be empty.\nIt’s very possible that the memory you allocated was previously utilized by the computer. Accordingly, you may see junk or garbage values. This is a result of you getting a block of memory but not initializing it. For example, consider the following code for garbage.c:\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int scores[1024];\n    for (int i = 0; i &lt; 1024; i++)\n    {\n        printf(\"%i\\n\", scores[i]);\n    }\n}\nNotice that running this code will allocate 1024 locations in memory for your array, but the for loop will likely show that not all values therein are 0. It’s always best practice to be aware of the potential for garbage values when you do not initialize blocks of memory to some other value like zero or otherwise.\n\n\n\n\n\nWe watched a video from Stanford University that helped us visualize and understand pointers.\n\n\n\n\n\nIn the real world, a common need in programming is to swap two values. Naturally, it’s hard to swap two variables without a temporary holding space. In practice, you can type code swap.c and write code as follows to see this in action:\n// Fails to swap two integers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int a, int b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(x, y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int a, int b)\n{\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\nNotice that while this code runs, it does not work. The values, even after being sent to the swap function, do not swap. Why?\nWhen you pass values to a function, you are only providing copies. The scope of x and y is limited to the main function as the code is presently written. That is, the values of x and y created in the curly {} braces of the main function only have the scope of the main function. In our code above, x and y are being passed by value.\nConsider the following image:\n\n\n\na rectangle with machine code at top followed by globals heap and stack\n\n\nNotice that global variables, which we have not used in this course, live in one place in memory. Various functions are stored in the stack in another area of memory.\nNow, consider the following image:\n\n\n\na rectangle with main function at bottom and swap function directly above it\n\n\nNotice that main and swap have two separate frames or areas of memory. Therefore, we cannot simply pass the values from one function to another to change them.\nModify your code as follows:\n// Swaps two integers using pointers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nNotice that variables are not passed by value but by reference. That is, the addresses of a and b are provided to the function. Therefore, the swap function can know where to make changes to the actual a and b from the main function.\nYou can visualize this as follows:\n\n\n\na and b stored in main function being passed by reference to the swap function\n\n\n\n\n\n\n\nA heap overflow is when you overflow the heap, touching areas of memory you are not supposed to.\nA stack overflow is when too many functions are called, overflowing the amount of memory available.\nBoth of these are considered buffer overflows.\n\n\n\n\n\nFunctions like get_int to simplify the act of getting input from the user.\nscanf is a built-in function that can get user input.\nWe can reimplement get_int rather easily using scanf as follows:\n// Gets an int from user using scanf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n;\n    printf(\"n: \");\n    scanf(\"%i\", &n);\n    printf(\"n: %i\\n\", n);\n}\nNotice that the value of n is stored at the location of n in the line scanf(\"%i\", &n).\nHowever, attempting to reimplement get_string is not easy. Consider the following:\n// Dangerously gets a string from user using scanf with array\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that no & is required because strings are special. Still, this program will not function correctly every time it is run. Nowhere in this program do we allocate the amount of memory required for our string. Indeed, we don’t know how long of a string may be inputted by the user! Further, we don’t know what garbage values may exist at the memory location.\nFurther, your code could be modified as follows. However, we have to pre-allocate a certain amount of memory for a string:\n// Using malloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    char *s = malloc(4);\n    if (s == NULL)\n    {\n        return 1;\n    }\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n    free(s);\n    return 0;\n}\nNotice that if a string that is four bytes is provided you might get an error.\nSimplifying our code as follows, we can further understand this essential problem of pre-allocation:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that if we pre-allocate an array of size 4, we can type cat and the program functions. However, a string larger than this could create an error.\nSometimes, the compiler or the system running it may allocate more memory than we indicate. Fundamentally, though, the above code is unsafe. We cannot trust that the user will input a string that fits into our pre-allocated memory.\n\n\n\n\n\nYou can read from and manipulate files. While this topic will be discussed further in a future week, consider the following code for phonebook.c:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this code uses pointers to access the file.\nYou can create a file called phonebook.csv in advance of running the above code or download phonebook.csv (right click, save as…). After running the above program and inputting a name and phone number, you will notice that this data persists in your CSV file.\nIf we want to ensure that phonebook.csv exists prior to running the program, we can modify our code as follows:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this program protects against a NULL pointer by invoking return 1.\nWe can implement our own copy program by typing code cp.c and writing code as follows:\n// Copies a file\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n    FILE *src = fopen(argv[1], \"rb\");\n    FILE *dst = fopen(argv[2], \"wb\");\n\n    BYTE b;\n\n    while (fread(&b, sizeof(b), 1, src) != 0)\n    {\n        fwrite(&b, sizeof(b), 1, dst);\n    }\n\n    fclose(dst);\n    fclose(src);\n}\nNotice that this file creates our own data type called a BYTE , which is the size of a uint8_t. Then, the file reads a BYTE and writes it to a file.\nBMPs are also assortments of data that we can examine and manipulate. This week, you will be doing just that in your problem sets!\n\n\n\n\nIn this lesson, you learned about pointers that provide you with the ability to access and manipulate data at specific memory locations. Specifically, we delved into…\n\nPixel art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying\nmalloc and Valgrind\nGarbage values\nSwapping\nOverflow\nscanf\nFile I/O\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#welcome",
    "href": "notes/notes_5.html#welcome",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In previous weeks, we talked about images being made of smaller building blocks called pixels.\nToday, we will go into further detail about the zeros and ones that make up these images. In particular, we will be going deeper into the fundamental building blocks that make up files, including images.\nFurther, we will discuss how to access the underlying data stored in computer memory.\nAs we begin today, know that the concepts covered in this lecture may take some time to fully click.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#pixel-art",
    "href": "notes/notes_5.html#pixel-art",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Pixels are squares, individual dots, of color that are arranged on an up-down, left-right grid.\nYou can imagine an image as a map of bits, where zeros represent black and ones represent white.\n\n\n\nZeros and ones being converted to a black and white smiley",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#hexadecimal",
    "href": "notes/notes_5.html#hexadecimal",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "RGB, or red, green, blue, are numbers that represent the amount of each of these colors. In Adobe Photoshop, you can see these settings as follows:\n\n\n\nA photoshop panel with RGB values and hexadecimal input\n\n\nNotice how the amount of red, blue, and green changes the color selected.\nYou can see from the image above that color is not just represented by three values. At the bottom of the window, there is a special value made up of numbers and characters. 255 is represented as FF. Why might this be?\nHexadecimal is a system of counting that has 16 counting values. They are as follows:\n  0 1 2 3 4 5 6 7 8 9 A B C D E F\nNotice that F represents 15.\nHexadecimal is also known as base-16.\nWhen counting in hexadecimal, each column is a power of 16.\nThe number 0 is represented as 00.\nThe number 1 is represented as 01.\nThe number 9 is represented by 09.\nThe number 10 is represented as 0A.\nThe number 15 is represented as 0F.\nThe number 16 is represented as 10.\nThe number 255 is represented as FF, because 16 x 15 (or F) is 240. Add 15 more to make 255. This is the highest number you can count using a two-digit hexadecimal system.\nHexadecimal is useful because it can be represented using fewer digits. Hexadecimal allows us to represent information more succinctly.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#memory",
    "href": "notes/notes_5.html#memory",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In weeks past, you may recall our artist rendering of concurrent blocks of memory. Applying hexadecimal numbering to each of these blocks of memory, you can visualize these as follows:\n\n\n\nBlocks of memory numbered in hex\n\n\nYou can imagine how there may be confusion regarding whether the 10 block above may represent a location in memory or the value 10. Accordingly, by convention, all hexadecimal numbers are often represented with the 0x prefix as follows:\n\n\n\nblocks of memory numbered in hex with 0x\n\n\nIn your terminal window, type code addresses.c and write your code as follows:\n// Prints an integer\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%i\\n\", n);\n}\nNotice how n is stored in memory with the value 50.\nYou can visualize how this program stores this value as follows:\n\n\n\nthe value 50 stored in a memory location with hex",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#pointers",
    "href": "notes/notes_5.html#pointers",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "The C language has two powerful operators that relate to memory:\n  & Provides the address of something stored in memory.\n  * Instructs the compiler to go to a location in memory.\nWe can leverage this knowledge by modifying our code as follows:\n// Prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%p\\n\", &n);\n}\nNotice the %p, which allows us to view the address of a location in memory. &n can be literally translated as “the address of n.” Executing this code will return an address of memory beginning with 0x.\nA pointer is a variable that stores the address of something. Most succinctly, a pointer is an address in your computer’s memory.\nConsider the following code:\nint n = 50;\nint *p = &n;\nNotice that p is a pointer that contains the address of an integer n.\nModify your code as follows:\n// Stores and prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%p\\n\", p);\n}\nNotice that this code has the same effect as our previous code. We have simply leveraged our new knowledge of the & and * operators.\nTo illustrate the use of the * operator, consider the following:\n// Stores and prints an integer via its address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%i\\n\", *p);\n}\nNotice that the printf line prints the integer at the location of p. int *p creates a pointer whose job is to store the memory address of an integer.\nYou can visualize our code as follows:\n\n\n\nSame value of 50 in a memory location with a pointer value stored elsewhere\n\n\nNotice the pointer seems rather large. Indeed, a pointer is usually stored as an 8-byte value. p is storing the address of the 50.\nYou can more accurately visualize a pointer as one address that points to another:\n\n\n\nA pointer as an arrow, pointing from one location of memory to another",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#strings",
    "href": "notes/notes_5.html#strings",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Now that we have a mental model for pointers, we can peel back a level of simplification that was offered earlier in this course.\nModify your code as follows:\n// Prints a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that a string s is printed.\nRecall that a string is simply an array of characters. For example, string s = \"HI!\" can be represented as follows:\n\n\n\nThe string HI with an exclamation point stored in memory\n\n\nHowever, what is s really? Where is the s stored in memory? As you can imagine, s needs to be stored somewhere. You can visualize the relationship of s to the string as follows:\n\n\n\nSame string HI with a pointer pointing to it\n\n\nNotice how a pointer called s tells the compiler where the first byte of the string exists in memory.\nModify your code as follows:\n// Prints a string's address as well the addresses of its chars\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", &s[0]);\n    printf(\"%p\\n\", &s[1]);\n    printf(\"%p\\n\", &s[2]);\n    printf(\"%p\\n\", &s[3]);\n}\nNotice the above prints the memory locations of each character in the string s. The & symbol is used to show the address of each element of the string. When running this code, notice that elements 0, 1, 2, and 3 are next to one another in memory.\nLikewise, you can modify your code as follows:\n// Declares a string with CS50 Library\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that this code will present the string that starts at the location of s. This code effectively removes the training wheels of the string data type offered by cs50.h. This is raw C code, without the scaffolding of the cs50 library.\nTaking off the training wheels, you can modify your code again:\n// Declares a string without CS50 Library\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that cs50.h is removed. A string is implemented as a char *.\nYou can imagine how a string, as a data type, is created.\nLast week, we learned how to create your own data type as a struct.\nThe cs50 library includes a struct as follows: typedef char *string\nThis struct, when using the cs50 library, allows one to use a custom data type called string.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#pointer-arithmetic",
    "href": "notes/notes_5.html#pointer-arithmetic",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Pointer arithmetic is the ability to do math on locations of memory.\nYou can modify your code to print out each memory location in the string as follows:\n// Prints a string's chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", s[0]);\n    printf(\"%c\\n\", s[1]);\n    printf(\"%c\\n\", s[2]);\n}\nNotice that we are printing each character at the location of s.\nFurther, you can modify your code as follows:\n// Prints a string's chars via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", *s);\n    printf(\"%c\\n\", *(s + 1));\n    printf(\"%c\\n\", *(s + 2));\n}\nNotice that the first character at the location of s is printed. Then, the character at the location s + 1 is printed, and so on.\nLikewise, consider the following:\n// Prints substrings via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", s + 1);\n    printf(\"%s\\n\", s + 2);\n}\nNotice that this code prints the values stored at various memory locations starting with s.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#string-comparison",
    "href": "notes/notes_5.html#string-comparison",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A string of characters is simply an array of characters identified by the location of its first byte.\nEarlier in the course, we considered the comparison of integers. We could represent this in code by typing code compare.c into the terminal window as follows:\n// Compares two integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two integers\n    int i = get_int(\"i: \");\n    int j = get_int(\"j: \");\n\n    // Compare integers\n    if (i == j)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that this code takes two integers from the user and compares them.\nIn the case of strings, however, one cannot compare two strings using the == operator.\nUtilizing the == operator in an attempt to compare strings will attempt to compare the memory locations of the strings instead of the characters therein. Accordingly, we recommended the use of strcmp.\nTo illustrate this, modify your code as follows:\n// Compares two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings' addresses\n    if (s == t)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNoticing that typing in HI! for both strings still results in the output of Different.\nWhy are these strings seemingly different? You can use the following to visualize why:\n\n\n\ntwo strings stored separately in memory\n\n\nTherefore, the code for compare.c above is actually attempting to see if the memory addresses are different, not the strings themselves.\nUsing strcmp, we can correct our code:\n// Compares two strings using strcmp\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings\n    if (strcmp(s, t) == 0)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that strcmp can return 0 if the strings are the same.\nTo further illustrate how these two strings are living in two locations, modify your code as follows:\n// Prints two strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\nNotice how we now have two separate strings stored, likely at two separate locations.\nYou can see the locations of these two stored strings with a small modification:\n// Prints two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings' addresses\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", t);\n}\nNotice that the %s has been changed to %p in the print statement.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#copying-and-malloc",
    "href": "notes/notes_5.html#copying-and-malloc",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A common need in programming is to copy one string to another.\nIn your terminal window, type code copy.c and write code as follows:\n// Capitalizes a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    t[0] = toupper(t[0]);\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that string t = s copies the address of s to t. This does not accomplish what we are desiring. The string is not copied – only the address is. Further, notice the inclusion of ctype.h.\nYou can visualize the above code as follows:\n\n\n\ntwo pointers pointing at the same memory location with a string\n\n\nNotice that s and t are still pointing at the same blocks of memory. This is not an authentic copy of a string. Instead, these are two pointers pointing at the same string.\nBefore we address this challenge, it’s important to ensure that we don’t experience a segmentation fault through our code, where we attempt to copy string s to string t, where string t does not exist. We can employ the strlen function as follows to assist with that:\n// Capitalizes a string, checking length first\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strlen is used to make sure string t exists. If it does not, nothing will be copied.\nTo be able to make an authentic copy of the string, we will need to introduce two new building blocks. First, malloc allows you, the programmer, to allocate a block of a specific size of memory. Second, free allows you to tell the compiler to free up that block of memory you previously allocated.\nWe can modify our code to create an authentic copy of our string as follows:\n// Capitalizes a copy of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0; i &lt;= strlen(s); i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that malloc(strlen(s) + 1) creates a block of memory that is the length of the string s plus one. This allows for the inclusion of the null \\0 character in our final copied string. Then, the for loop walks through the string s and assigns each value to that same location on the string t.\nIt turns out that our code is inefficient. Modify your code as follows:\n// Capitalizes a copy of a string, defining n in loop too\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0, n = strlen(s); i &lt;= n; i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that n = strlen(s) is defined now in the left-hand side of the for loop. It’s best not to call unneeded functions in the middle condition of the for loop, as it will run over and over again. When moving n = strlen(s) to the left-hand side, the function strlen only runs once.\nThe C Language has a built-in function to copy strings called strcpy. It can be implemented as follows:\n// Capitalizes a copy of a string using strcpy\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strcpy does the same work that our for loop previously did.\nBoth get_string and malloc return NULL, a special value in memory, in the event that something goes wrong. You can write code that can check for this NULL condition as follows:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\nNotice that if the string obtained is of length 0 or malloc fails, NULL is returned. Further, notice that free lets the computer know you are done with this block of memory you created via malloc.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#valgrind",
    "href": "notes/notes_5.html#valgrind",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Valgrind is a tool that can check to see if there are memory-related issues with your programs wherein you utilized malloc. Specifically, it checks to see if you free all the memory you allocated.\nConsider the following code for memory.c:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n}\nNotice that running this program does not cause any errors. While malloc is used to allocate enough memory for an array, the code fails to free that allocated memory.\nIf you type make memory followed by valgrind ./memory, you will get a report from valgrind that will report where memory has been lost as a result of your program. One error that valgrind reveals is that we attempted to assign the value of 33 at the 4th position of the array, where we only allocated an array of size 3. Another error is that we never freed x.\nYou can modify your code to free the memory of x as follows:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n    free(x);\n}\nNotice that running valgrind again now results in no memory leaks.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#garbage-values",
    "href": "notes/notes_5.html#garbage-values",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "When you ask the compiler for a block of memory, there is no guarantee that this memory will be empty.\nIt’s very possible that the memory you allocated was previously utilized by the computer. Accordingly, you may see junk or garbage values. This is a result of you getting a block of memory but not initializing it. For example, consider the following code for garbage.c:\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int scores[1024];\n    for (int i = 0; i &lt; 1024; i++)\n    {\n        printf(\"%i\\n\", scores[i]);\n    }\n}\nNotice that running this code will allocate 1024 locations in memory for your array, but the for loop will likely show that not all values therein are 0. It’s always best practice to be aware of the potential for garbage values when you do not initialize blocks of memory to some other value like zero or otherwise.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#pointer-fun-with-binky",
    "href": "notes/notes_5.html#pointer-fun-with-binky",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "We watched a video from Stanford University that helped us visualize and understand pointers.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#swapping",
    "href": "notes/notes_5.html#swapping",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In the real world, a common need in programming is to swap two values. Naturally, it’s hard to swap two variables without a temporary holding space. In practice, you can type code swap.c and write code as follows to see this in action:\n// Fails to swap two integers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int a, int b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(x, y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int a, int b)\n{\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\nNotice that while this code runs, it does not work. The values, even after being sent to the swap function, do not swap. Why?\nWhen you pass values to a function, you are only providing copies. The scope of x and y is limited to the main function as the code is presently written. That is, the values of x and y created in the curly {} braces of the main function only have the scope of the main function. In our code above, x and y are being passed by value.\nConsider the following image:\n\n\n\na rectangle with machine code at top followed by globals heap and stack\n\n\nNotice that global variables, which we have not used in this course, live in one place in memory. Various functions are stored in the stack in another area of memory.\nNow, consider the following image:\n\n\n\na rectangle with main function at bottom and swap function directly above it\n\n\nNotice that main and swap have two separate frames or areas of memory. Therefore, we cannot simply pass the values from one function to another to change them.\nModify your code as follows:\n// Swaps two integers using pointers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nNotice that variables are not passed by value but by reference. That is, the addresses of a and b are provided to the function. Therefore, the swap function can know where to make changes to the actual a and b from the main function.\nYou can visualize this as follows:\n\n\n\na and b stored in main function being passed by reference to the swap function",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#overflow",
    "href": "notes/notes_5.html#overflow",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A heap overflow is when you overflow the heap, touching areas of memory you are not supposed to.\nA stack overflow is when too many functions are called, overflowing the amount of memory available.\nBoth of these are considered buffer overflows.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#scanf",
    "href": "notes/notes_5.html#scanf",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Functions like get_int to simplify the act of getting input from the user.\nscanf is a built-in function that can get user input.\nWe can reimplement get_int rather easily using scanf as follows:\n// Gets an int from user using scanf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n;\n    printf(\"n: \");\n    scanf(\"%i\", &n);\n    printf(\"n: %i\\n\", n);\n}\nNotice that the value of n is stored at the location of n in the line scanf(\"%i\", &n).\nHowever, attempting to reimplement get_string is not easy. Consider the following:\n// Dangerously gets a string from user using scanf with array\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that no & is required because strings are special. Still, this program will not function correctly every time it is run. Nowhere in this program do we allocate the amount of memory required for our string. Indeed, we don’t know how long of a string may be inputted by the user! Further, we don’t know what garbage values may exist at the memory location.\nFurther, your code could be modified as follows. However, we have to pre-allocate a certain amount of memory for a string:\n// Using malloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    char *s = malloc(4);\n    if (s == NULL)\n    {\n        return 1;\n    }\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n    free(s);\n    return 0;\n}\nNotice that if a string that is four bytes is provided you might get an error.\nSimplifying our code as follows, we can further understand this essential problem of pre-allocation:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that if we pre-allocate an array of size 4, we can type cat and the program functions. However, a string larger than this could create an error.\nSometimes, the compiler or the system running it may allocate more memory than we indicate. Fundamentally, though, the above code is unsafe. We cannot trust that the user will input a string that fits into our pre-allocated memory.",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#file-io",
    "href": "notes/notes_5.html#file-io",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "You can read from and manipulate files. While this topic will be discussed further in a future week, consider the following code for phonebook.c:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this code uses pointers to access the file.\nYou can create a file called phonebook.csv in advance of running the above code or download phonebook.csv (right click, save as…). After running the above program and inputting a name and phone number, you will notice that this data persists in your CSV file.\nIf we want to ensure that phonebook.csv exists prior to running the program, we can modify our code as follows:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this program protects against a NULL pointer by invoking return 1.\nWe can implement our own copy program by typing code cp.c and writing code as follows:\n// Copies a file\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n    FILE *src = fopen(argv[1], \"rb\");\n    FILE *dst = fopen(argv[2], \"wb\");\n\n    BYTE b;\n\n    while (fread(&b, sizeof(b), 1, src) != 0)\n    {\n        fwrite(&b, sizeof(b), 1, dst);\n    }\n\n    fclose(dst);\n    fclose(src);\n}\nNotice that this file creates our own data type called a BYTE , which is the size of a uint8_t. Then, the file reads a BYTE and writes it to a file.\nBMPs are also assortments of data that we can examine and manipulate. This week, you will be doing just that in your problem sets!",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_5.html#summing-up",
    "href": "notes/notes_5.html#summing-up",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In this lesson, you learned about pointers that provide you with the ability to access and manipulate data at specific memory locations. Specifically, we delved into…\n\nPixel art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying\nmalloc and Valgrind\nGarbage values\nSwapping\nOverflow\nscanf\nFile I/O\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 05 🟢"
    ]
  },
  {
    "objectID": "notes/notes_7.html",
    "href": "notes/notes_7.html",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Welcome!\nHello Python!\nSpeller\nFilter\nFunctions\nLibraries, Modules, and Packages\nStrings\nPositional Parameters and Named Parameters\nVariables\nTypes\nCalculator\nConditionals\nObject-Oriented Programming\nLoops\nAbstraction\nTruncation and Floating Point Imprecision\nExceptions\nMario\nLists\nSearching and Dictionaries\nCommand-Line Arguments\nExit Status\nCSV Files\nThird-Party Libraries\nSumming Up\n\n\n\n\nIn previous weeks, you were introduced to the fundamental building blocks of programming.\nYou learned about programming in a lower-level programming language called C.\nToday, we are going to work with a higher-level programming language called Python.\nAs you learn this new language, you’re going to find that you are going to be more able to teach yourself new programming languages.\n\n\n\n\n\nHumans, over the decades, have seen how previous design decisions made in prior programming languages could be improved upon.\nPython is a programming language that builds upon what you have already learned in C.\nPython additionally has access to a vast number of user-created libraries.\nUnlike in C, which is a compiled language, Python is an interpreted language, where you need not separately compile your program. Instead, you run your program in the Python Interpreter.\nUp until this point, the code has looked like this:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nToday, you’ll find that the process of writing and compiling code has been simplified.\nFor example, the above code will be rendered in Python as:\n# A program that says hello to the world\n\nprint(\"hello, world\")\n\nNotice that the semicolon is gone and that no library is needed. You can run this program in your terminal by typing python hello.py.\nPython notably can implement what was quite complicated in C with relative simplicity.\n\n\n\n\n\nTo illustrate this simplicity, let’s type ‘code dictionary.py’ in the terminal window and write code as follows:\n# Words in dictionary\nwords = set()\n\n\ndef check(word):\n    \"\"\"Return true if word is in dictionary else false\"\"\"\n    return word.lower() in words\n\n\ndef load(dictionary):\n    \"\"\"Load dictionary into memory, returning true if successful else false\"\"\"\n    with open(dictionary) as file:\n        words.update(file.read().splitlines())\n    return True\n\n\ndef size():\n    \"\"\"Returns number of words in dictionary if loaded else 0 if not yet loaded\"\"\"\n    return len(words)\n\n\ndef unload():\n    \"\"\"Unloads dictionary from memory, returning true if successful else false\"\"\"\n    return True\n\nNotice that there are four functions above. In the check function, if a word is in words, it returns True. It is so much easier than an implementation in C! Similarly, in the load function, the dictionary file is opened. For each line in that file, we add that line to words. Using rstrip, the trailing new line is removed from the added word. size simply returns the len or length of words. unload only needs to return True because Python handles memory management on its own.\nThe above code illustrates why higher-level languages exist: To simplify and allow you to write code more easily.\nHowever, speed is a tradeoff. Because C allows you, the programmer, to make decisions about memory management, it may run faster than Python – depending on your code. While C only runs your lines of code, Python runs all the code that comes under the hood with it when you call Python’s built-in functions.\nYou can learn more about functions in the Python documentation\n\n\n\n\n\nTo further illustrate this simplicity, create a new file by typing code blur.py in your terminal window and write code as follows:\n# Blurs an image\n\nfrom PIL import Image, ImageFilter\n\n# Blur image\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.BoxBlur(1))\nafter.save(\"out.bmp\")\n\nNotice that this program imports modules Image and ImageFilter from a library called PIL. This takes an input file and creates an output file.\nFurther, you can create a new file called edges.py as follows:\n# Finds edges in an image\n\nfrom PIL import Image, ImageFilter\n\n# Find edges\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.FIND_EDGES)\nafter.save(\"out.bmp\")\n\nNotice that this code is a small adjustment to your blur code but produces a dramatically different result.\nPython allows you to abstract away programming that would be much more complicated within C and other lower-level programming languages.\n\n\n\n\n\nIn C, you may have seen functions as follows:\nprintf(\"hello, world\\n\");\n\nIn Python, you will see functions as follows:\nprint(\"hello, world\")\n\n\n\n\n\n\nAs with C, the CS50 library can be utilized within Python.\nThe following functions will be of particular use:\n  get_float\n  get_int\n  get_string\n\nYou can import the cs50 library as follows:\nimport cs50\n\nYou also have the option of importing only specific functions from the CS50 library as follows:\nfrom cs50 import get_float, get_int, get_string\n\n\n\n\n\n\nIn C, you might remember this code:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThis code is transformed in Python to:\n# get_string and print, with concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello, \" + answer)\n\nYou can write this code by executing code hello.py in the terminal window. Then, you can execute this code by running python hello.py. Notice how the + sign concatenates \"hello, \" and answer.\nSimilarly, this can be done without concatenation:\n# get_string and print, without concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello,\", answer)\n\nNotice that the print statement automatically creates a space between the hello statement and the answer.\nSimilarly, you could implement the above code as:\n# get_string and print, with format strings\n\nfrom cs50 import get_string\n\nanswer  = get_string(\"What's your name? \")\nprint(f\"hello, {answer}\")\n\nNotice how the curly braces allow for the print function to interpolate the answer such that answer appears within. The f is required to include the answer properly formatting.\n\n\n\n\n\nFunctions in C like fread, fwrite, and printf use positional arguments, where you provide arguments with commas as separators. You, the programmer, must remember what argument is in which position. These are referred to as positional arguments.\nIn Python, named parameters allow you to provide arguments without regard to positionality.\nYou can learn more about the parameters of the print function in the documentation.\nAccessing that documentation, you may see the following:\nprint(*objects, sep=' ', end='\\n', file=None, flush=False)\n\nNotice that various objects can be provided to print. A separator of a single space is provided that will display when more than one object is given to print. Similarly, a new line is provided at the end of the print statement.\n\n\n\n\n\nVariable declaration is simplified too. In C, you might have int counter = 0;. In Python, this same line would read counter = 0. You need not declare the type of the variable.\nPython favors counter += 1 to increment by one, losing the ability found in C to type counter++.\n\n\n\n\n\nData types in Python do not need to be explicitly declared. For example, you saw how answer above is a string, but we did not have to tell the interpreter this was the case: It knew on its own.\nIn Python, commonly used types include:\n  bool\n  float\n  int\n  str\n\nNotice that long and double are missing. Python will handle what data type should be used for larger and smaller numbers.\nSome other data types in Python include:\nrange   sequence of numbers\nlist    sequence of mutable values\ntuple   sequence of immutable values\ndict    collection of key-value pairs\nset     collection of unique values\n\nEach of these data types can be implemented in C, but in Python, they can be implemented more simply.\n\n\n\n\n\nYou might recall calculator.c from earlier in the course:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Perform addition\n    printf(\"%i\\n\", x + y);\n}\n\nWe can implement a simple calculator just as we did within C. Type code calculator.py into the terminal window and write code as follows:\n# Addition with int [using get_int]\n\nfrom cs50 import get_int\n\n# Prompt user for x\nx = get_int(\"x: \")\n\n# Prompt user for y\ny = get_int(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how the CS50 library is imported. Then, x and y are gathered from the user. Finally, the result is printed. Notice that the main function that would have been seen in a C program is gone entirely! While one could utilize a main function, it is not required.\nIt’s possible for one to remove the training wheels of the CS50 library. Modify your code as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = input(\"x: \")\n\n# Prompt user for y\ny = input(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how executing the above code results in strange program behavior. Why might this be so?\nYou may have guessed that the interpreter understood x and y to be strings. You can fix your code by employing the int function as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Perform addition\nprint(x + y)\n\nNotice how the input for x and y is passed to the int function, which converts it to an integer. Without converting x and y to be integers, the characters will concatenate.\n\n\n\n\n\nIn C, you might remember a program like this:\n// Conditionals, Boolean expressions, relational operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nIn Python, it would appear as follows:\n# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int(\"What's x? \")\ny = get_int(\"What's y? \")\n\n# Compare integers\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n\nNotice that there are no more curly braces. Instead, indentations are utilized. Second, a colon is utilized in the if statement. Further, elif replaces else if. Parentheses are also no longer required in the if and elif statements.\nFurther looking at comparisons, consider the following code in C:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nThe above can be implemented as follows:\n# Logical operators\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s == \"Y\" or s == \"y\":\n    print(\"Agreed.\")\nelif s == \"N\" or s == \"n\":\n    print(\"Not agreed.\")\n\nNotice that the two vertical bars utilized in C is replaced with or. Indeed, people often enjoy Python because it is more readable by humans. Also, notice that char does not exist in Python. Instead, strs are utilized.\nAnother approach to this same code could be as follows using lists:\n# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how we are able to express multiple keywords like y and yes in a list.\n\n\n\n\n\nIt’s possible to have certain types of values not only have properties or attributes inside of them but have functions as well. In Python, these values are known as objects\nIn C, we could create a struct where you could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific object, it is known as a method.\nFor example, strs in Python have built-in methods. Therefore, you could modify your code as follows:\n# Logical operators, using lists\n\n# Prompt user to agree\ns = input(\"Do you agree? \").lower()\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how the old value of s is overwritten with the result of s.lower(), a built-in method of strs.\nSimilarly, you may recall how we copied a string in C:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\n\nNotice the number of lines of code.\nWe may implement the above in Python as follows:\n# Capitalizes a copy of a string\n\n# Get a string\ns = input(\"s: \")\n\n# Capitalize copy of string\nt = s.capitalize()\n\n# Print strings\nprint(f\"s: {s}\")\nprint(f\"t: {t}\")\n\nNotice how much shorter this program is than its counterpart in C.\nIn this class, we will only scratch the surface of Python. Therefore, the Python documentation will be of particular importance as you continue.\nYou can learn more about string methods in the Python documentation\n\n\n\n\n\nLoops in Python are very similar to C. You may recall the following code in C:\n// Demonstrates for loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nfor loops can be implemented in Python as follows:\n# Better design\n\nfor i in range(3):\n    print(\"meow\")\n\nNotice that i is never explicitly used. However, Python will increment the value of i.\nFurther, a while loop could be implemented as follows:\n# Demonstrates while loop\n\ni = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n\nTo further our understanding of loops and iteration in Python, let’s create a new file called uppercase.py as follows:\n# Uppercases string one character at a time\n\nbefore = input(\"Before: \")\nprint(\"After:  \", end=\"\")\nfor c in before:\n    print(c.upper(), end=\"\")\nprint()\n\nNotice how end= is used to pass a parameter to the print function that continues the line without a line ending. This code passes one string at a time.\nReading the documentation, we discover that Python has methods that can be implemented upon the entire string as follows:\n# Uppercases string all at once\n\nbefore = input(\"Before: \")\nafter = before.upper()\nprint(f\"After:  {after}\")\n\nNotice how .upper is applied to the entire string.\n\n\n\n\n\nAs we hinted at earlier today, you can further improve upon our code using functions and abstracting away various code into functions. Modify your earlier-created meow.py code as follows:\n# Abstraction\n\ndef main():\n    for i in range(3):\n        meow()\n\n# Meow once\ndef meow():\n    print(\"meow\")\n\n\nmain()\n\nNotice that the meow function abstracts away the print statement. Further, notice that the main function appears at the top of the file. At the bottom of the file, the main function is called. By convention, it’s expected that you create a main function in Python.\nIndeed, we can pass variables between our functions as follows:\n# Abstraction with parameterization\n\ndef main():\n    meow(3)\n\n\n# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print(\"meow\")\n\n\nmain()\n\nNotice how meow now takes a variable n. In the main function, you can call meow and pass a value like 3 to it. Then, meow utilizes the value of n in the for loop.\nReading the above code, notice how you, as a C programmer, are able to quite easily make sense of the above code. While some conventions are different, the building blocks you previously learned are very apparent in this new programming language.\n\n\n\n\n\nRecall that in C, we experienced truncation where one integer is divided by another could result in an imprecise result.\nYou can see how Python handles such division as follows by modifying your code for calculator.py:\n# Division with integers, demonstration lack of truncation\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(z)\n\nNotice that executing this code results in a value, but that if you were to see more digits after .333333 you’d see that we are faced with floating-point imprecision. Truncation does not occur.\nWe can reveal this imprecision by modifying our codes slightly:\n# Floating-point imprecision\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(f\"{z:.50f}\")\n\nNotice that this code reveals the imprecision. Python still faces this issue, just as C does.\n\n\n\n\n\nLet’s explore more about exceptions that can occur when we run Python code.\nModify calculator.py as follows:\n# Doesn't handle exception\n\n# Prompt user for an integer\nn = int(input(\"Input: \"))\nprint(\"Integer\")\n\nNotice that inputting the wrong data could result in an error.\nWe can try to handle and catch potential exceptions by modifying our code as follows:\n# Handles exception\n\n# Prompt user for an integer\ntry:\n    n = int(input(\"Input: \"))\n    print(\"Integer.\")\nexcept ValueError:\n    print(\"Not integer.\")\n\nNotice that the above code repeatedly tries to get the correct type of data, providing additional prompts when needed.\n\n\n\n\n\nRecall a few weeks ago our challenge of building three blocks on top of one another, like in Mario.\n\n\n\nthree vertical blocks\n\n\nIn Python, we can implement something akin to this as follows:\n# Prints a column of 3 bricks with a loop\n\nfor i in range(3):\n    print(\"#\")\n\nThis prints a column of three bricks.\nIn C, we had the advantage of a do-while loop. However, in Python, it is conventional to utilize a while loop, as Python does not have a do-while loop. You can write code as follows in a file called mario.py:\n# Prints a column of n bricks with a loop\n\nfrom cs50 import get_int\n\nwhile True:\n    n = get_int(\"Height: \")\n    if n &gt; 0:\n        break\n\nfor i in range(n):\n    print(\"#\")\n\nNotice how the while loop is used to obtain the height. Once a height greater than zero is inputted, the loop breaks.\nConsider the following image:\n\n\n\nfour horizontal question blocks\n\n\nIn Python, we could implement by modifying your code as follows:\n# Prints a row of 4 question marks with a loop\n\nfor i in range(4):\n    print(\"?\", end=\"\")\nprint()\n\nNotice that you can override the behavior of the print function to stay on the same line as the previous print.\nSimilar in spirit to previous iterations, we can further simplify this program:\n# Prints a row of 4 question marks without a loop\n\nprint(\"?\" * 4)\n\nNotice that we can utilize * to multiply the print statement to repeat 4 times.\nWhat about a large block of bricks?\n\n\n\nthree by three block of mario blocks\n\n\nTo implement the above, you can modify your code as follows:\n# Prints a 3-by-3 grid of bricks with loops\n\nfor i in range(3):\n    for j in range(3):\n        print(\"#\", end=\"\")\n    print()\n\nNotice how one for loop exists inside another. The print statement adds a new line at the end of each row of bricks.\nYou can learn more about the print function in the Python documentation\n\n\n\n\n\nlists are a data structure within Python.\nlists have built-in methods or functions within them.\nFor example, consider the following code:\n# Averages three numbers using a list\n\n# Scores\nscores = [72, 73, 33]\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that you can use the built-in sum method to calculate the average.\nYou can even utilize the following syntax to get values from the user:\n# Averages three numbers using a list and a loop\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int(\"Score: \")\n    scores.append(score)\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that this code utilizes the built-in append method for lists.\nYou can learn more about lists in the Python documentation\nYou can also learn more about len in the Python documentation\n\n\n\n\n\nWe can also search within a data structure.\nConsider a program called phonebook.py as follows:\n# Implements linear search for names using loop\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nfor n in names:\n    if name == n:\n        print(\"Found\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice how this implements linear search for each name.\nHowever, we don’t need to iterate through a list. In Python, we can execute linear search as follows:\n# Implements linear search for names using `in`\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nif name in names:\n    print(\"Found\")\nelse:\n    print(\"Not found\")\n\nNotice how in is used to implement linear search.\nStill, this code could be improved.\nRecall that a dictionary or dict is a collection of key and value pairs.\nYou can implement a dictionary in Python as follows:\n# Implements a phone book as a list of dictionaries, without a variable\n\nfrom cs50 import get_string\n\npeople = [\n    {\"name\": \"Yuliia\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"David\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"John\", \"number\": \"+1-949-468-2750\"},\n]\n\n# Search for name\nname = get_string(\"Name: \")\nfor person in people:\n    if person[\"name\"] == name:\n        print(f\"Found {person['number']}\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented having both name and number for each entry.\nEven better, strictly speaking, we don’t need both a name and a number. We can simplify this code as follows:\n# Implements a phone book using a dictionary\n\nfrom cs50 import get_string\n\npeople = {\n    \"Yuliia\": \"+1-617-495-1000\",\n    \"David\": \"+1-617-495-1000\",\n    \"John\": \"+1-949-468-2750\",\n}\n\n# Search for name\nname = get_string(\"Name: \")\nif name in people:\n    print(f\"Number: {people[name]}\")\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented using curly braces. Then, the statement if name in people searches to see if the name is in the people dictionary. Further, notice how, in the print statement, we can index into the people dictionary using the value of name. Very useful!\nPython has done their best to get to constant time using their built-in searches.\nYou can learn more about dictionaries in the Python documentation\n\n\n\n\n\nAs with C, you can also utilize command-line arguments. Consider the following code:\n# Prints a command-line argument\n\nfrom sys import argv\n\nif len(argv) == 2:\n    print(f\"hello, {argv[1]}\")\nelse:\n    print(\"hello, world\")\n\nNotice that argv[1] is printed using a formatted string, noted by the f present in the print statement.\nYou can learn more about the sys library in the Python documentation\n\n\n\n\n\nThe sys library also has built-in methods. We can use sys.exit(i) to exit the program with a specific exit code:\n# Exits with explicit value, importing sys\n\nimport sys\n\nif len(sys.argv) != 2:\n    print(\"Missing command-line argument\")\n    sys.exit(1)\n\nprint(f\"hello, {sys.argv[1]}\")\nsys.exit(0)\n\nNotice that dot-notation is used to utilize the built-in functions of sys.\n\n\n\n\n\nPython also has built-in support for CSV files.\nModify your code for phonebook.py as follows:\nimport csv\n\nfile = open(\"phonebook.csv\", \"a\")\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwriter = csv.writer(file)\nwriter.writerow([name,number])\n\nfile.close()\n\nNotice writerow adds the commas in the CSV file for us.\nWhile file.close and file = open are commonly used and available syntax in Python, this code can be improved as follows:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.writer(file)\n    writer.writerow([name,number])\n\nNotice that the code is indented under the with statement. This automatically closes the file when done.\nSimilarly, we can write a dictionary as follows within the CSV file:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"number\"])\n    writer.writerow({\"name\": name, \"number\": number})\n\nNotice this code is quite similar to our prior iteration but with csv.DictWriter instead.\n\n\n\n\n\nOne of the advantages of Python is its massive user base and similarly large number of third-party libraries.\nYou can install the CS50 Library on your own computer by typing pip install cs50, provided you have Python installed.\nConsidering other libraries, we demoed the use of cowsay and qrcode.\n\n\n\n\nIn this lesson, you learned how the building blocks of programming from prior lessons can be implemented within Python. Further, you learned about how Python allowed for more simplified code. Also, you learned how to utilize various Python libraries. In the end, you learned that your skills as a programmer are not limited to a single programming language. Already, you are seeing how you are discovering a new way of learning through this course that could serve you in any programming language – and, perhaps, in nearly any avenue of learning! Specifically, we discussed…\n\nPython\nVariables\nConditionals\nLoops\nTypes\nObject-Oriented programming\nTruncation and floating point imprecision\nExceptions\nDictionaries\nCommand-line arguments\nThird-Party libraries\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#welcome",
    "href": "notes/notes_7.html#welcome",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In previous weeks, you were introduced to the fundamental building blocks of programming.\nYou learned about programming in a lower-level programming language called C.\nToday, we are going to work with a higher-level programming language called Python.\nAs you learn this new language, you’re going to find that you are going to be more able to teach yourself new programming languages.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#hello-python",
    "href": "notes/notes_7.html#hello-python",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Humans, over the decades, have seen how previous design decisions made in prior programming languages could be improved upon.\nPython is a programming language that builds upon what you have already learned in C.\nPython additionally has access to a vast number of user-created libraries.\nUnlike in C, which is a compiled language, Python is an interpreted language, where you need not separately compile your program. Instead, you run your program in the Python Interpreter.\nUp until this point, the code has looked like this:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nToday, you’ll find that the process of writing and compiling code has been simplified.\nFor example, the above code will be rendered in Python as:\n# A program that says hello to the world\n\nprint(\"hello, world\")\n\nNotice that the semicolon is gone and that no library is needed. You can run this program in your terminal by typing python hello.py.\nPython notably can implement what was quite complicated in C with relative simplicity.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#speller",
    "href": "notes/notes_7.html#speller",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "To illustrate this simplicity, let’s type ‘code dictionary.py’ in the terminal window and write code as follows:\n# Words in dictionary\nwords = set()\n\n\ndef check(word):\n    \"\"\"Return true if word is in dictionary else false\"\"\"\n    return word.lower() in words\n\n\ndef load(dictionary):\n    \"\"\"Load dictionary into memory, returning true if successful else false\"\"\"\n    with open(dictionary) as file:\n        words.update(file.read().splitlines())\n    return True\n\n\ndef size():\n    \"\"\"Returns number of words in dictionary if loaded else 0 if not yet loaded\"\"\"\n    return len(words)\n\n\ndef unload():\n    \"\"\"Unloads dictionary from memory, returning true if successful else false\"\"\"\n    return True\n\nNotice that there are four functions above. In the check function, if a word is in words, it returns True. It is so much easier than an implementation in C! Similarly, in the load function, the dictionary file is opened. For each line in that file, we add that line to words. Using rstrip, the trailing new line is removed from the added word. size simply returns the len or length of words. unload only needs to return True because Python handles memory management on its own.\nThe above code illustrates why higher-level languages exist: To simplify and allow you to write code more easily.\nHowever, speed is a tradeoff. Because C allows you, the programmer, to make decisions about memory management, it may run faster than Python – depending on your code. While C only runs your lines of code, Python runs all the code that comes under the hood with it when you call Python’s built-in functions.\nYou can learn more about functions in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#filter",
    "href": "notes/notes_7.html#filter",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "To further illustrate this simplicity, create a new file by typing code blur.py in your terminal window and write code as follows:\n# Blurs an image\n\nfrom PIL import Image, ImageFilter\n\n# Blur image\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.BoxBlur(1))\nafter.save(\"out.bmp\")\n\nNotice that this program imports modules Image and ImageFilter from a library called PIL. This takes an input file and creates an output file.\nFurther, you can create a new file called edges.py as follows:\n# Finds edges in an image\n\nfrom PIL import Image, ImageFilter\n\n# Find edges\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.FIND_EDGES)\nafter.save(\"out.bmp\")\n\nNotice that this code is a small adjustment to your blur code but produces a dramatically different result.\nPython allows you to abstract away programming that would be much more complicated within C and other lower-level programming languages.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#functions",
    "href": "notes/notes_7.html#functions",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you may have seen functions as follows:\nprintf(\"hello, world\\n\");\n\nIn Python, you will see functions as follows:\nprint(\"hello, world\")",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#libraries-modules-and-packages",
    "href": "notes/notes_7.html#libraries-modules-and-packages",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As with C, the CS50 library can be utilized within Python.\nThe following functions will be of particular use:\n  get_float\n  get_int\n  get_string\n\nYou can import the cs50 library as follows:\nimport cs50\n\nYou also have the option of importing only specific functions from the CS50 library as follows:\nfrom cs50 import get_float, get_int, get_string",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#strings",
    "href": "notes/notes_7.html#strings",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you might remember this code:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThis code is transformed in Python to:\n# get_string and print, with concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello, \" + answer)\n\nYou can write this code by executing code hello.py in the terminal window. Then, you can execute this code by running python hello.py. Notice how the + sign concatenates \"hello, \" and answer.\nSimilarly, this can be done without concatenation:\n# get_string and print, without concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello,\", answer)\n\nNotice that the print statement automatically creates a space between the hello statement and the answer.\nSimilarly, you could implement the above code as:\n# get_string and print, with format strings\n\nfrom cs50 import get_string\n\nanswer  = get_string(\"What's your name? \")\nprint(f\"hello, {answer}\")\n\nNotice how the curly braces allow for the print function to interpolate the answer such that answer appears within. The f is required to include the answer properly formatting.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#positional-parameters-and-named-parameters",
    "href": "notes/notes_7.html#positional-parameters-and-named-parameters",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Functions in C like fread, fwrite, and printf use positional arguments, where you provide arguments with commas as separators. You, the programmer, must remember what argument is in which position. These are referred to as positional arguments.\nIn Python, named parameters allow you to provide arguments without regard to positionality.\nYou can learn more about the parameters of the print function in the documentation.\nAccessing that documentation, you may see the following:\nprint(*objects, sep=' ', end='\\n', file=None, flush=False)\n\nNotice that various objects can be provided to print. A separator of a single space is provided that will display when more than one object is given to print. Similarly, a new line is provided at the end of the print statement.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#variables",
    "href": "notes/notes_7.html#variables",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Variable declaration is simplified too. In C, you might have int counter = 0;. In Python, this same line would read counter = 0. You need not declare the type of the variable.\nPython favors counter += 1 to increment by one, losing the ability found in C to type counter++.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#types",
    "href": "notes/notes_7.html#types",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Data types in Python do not need to be explicitly declared. For example, you saw how answer above is a string, but we did not have to tell the interpreter this was the case: It knew on its own.\nIn Python, commonly used types include:\n  bool\n  float\n  int\n  str\n\nNotice that long and double are missing. Python will handle what data type should be used for larger and smaller numbers.\nSome other data types in Python include:\nrange   sequence of numbers\nlist    sequence of mutable values\ntuple   sequence of immutable values\ndict    collection of key-value pairs\nset     collection of unique values\n\nEach of these data types can be implemented in C, but in Python, they can be implemented more simply.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#calculator",
    "href": "notes/notes_7.html#calculator",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "You might recall calculator.c from earlier in the course:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Perform addition\n    printf(\"%i\\n\", x + y);\n}\n\nWe can implement a simple calculator just as we did within C. Type code calculator.py into the terminal window and write code as follows:\n# Addition with int [using get_int]\n\nfrom cs50 import get_int\n\n# Prompt user for x\nx = get_int(\"x: \")\n\n# Prompt user for y\ny = get_int(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how the CS50 library is imported. Then, x and y are gathered from the user. Finally, the result is printed. Notice that the main function that would have been seen in a C program is gone entirely! While one could utilize a main function, it is not required.\nIt’s possible for one to remove the training wheels of the CS50 library. Modify your code as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = input(\"x: \")\n\n# Prompt user for y\ny = input(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how executing the above code results in strange program behavior. Why might this be so?\nYou may have guessed that the interpreter understood x and y to be strings. You can fix your code by employing the int function as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Perform addition\nprint(x + y)\n\nNotice how the input for x and y is passed to the int function, which converts it to an integer. Without converting x and y to be integers, the characters will concatenate.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#conditionals",
    "href": "notes/notes_7.html#conditionals",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you might remember a program like this:\n// Conditionals, Boolean expressions, relational operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nIn Python, it would appear as follows:\n# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int(\"What's x? \")\ny = get_int(\"What's y? \")\n\n# Compare integers\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n\nNotice that there are no more curly braces. Instead, indentations are utilized. Second, a colon is utilized in the if statement. Further, elif replaces else if. Parentheses are also no longer required in the if and elif statements.\nFurther looking at comparisons, consider the following code in C:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nThe above can be implemented as follows:\n# Logical operators\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s == \"Y\" or s == \"y\":\n    print(\"Agreed.\")\nelif s == \"N\" or s == \"n\":\n    print(\"Not agreed.\")\n\nNotice that the two vertical bars utilized in C is replaced with or. Indeed, people often enjoy Python because it is more readable by humans. Also, notice that char does not exist in Python. Instead, strs are utilized.\nAnother approach to this same code could be as follows using lists:\n# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how we are able to express multiple keywords like y and yes in a list.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#object-oriented-programming",
    "href": "notes/notes_7.html#object-oriented-programming",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "It’s possible to have certain types of values not only have properties or attributes inside of them but have functions as well. In Python, these values are known as objects\nIn C, we could create a struct where you could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific object, it is known as a method.\nFor example, strs in Python have built-in methods. Therefore, you could modify your code as follows:\n# Logical operators, using lists\n\n# Prompt user to agree\ns = input(\"Do you agree? \").lower()\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how the old value of s is overwritten with the result of s.lower(), a built-in method of strs.\nSimilarly, you may recall how we copied a string in C:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\n\nNotice the number of lines of code.\nWe may implement the above in Python as follows:\n# Capitalizes a copy of a string\n\n# Get a string\ns = input(\"s: \")\n\n# Capitalize copy of string\nt = s.capitalize()\n\n# Print strings\nprint(f\"s: {s}\")\nprint(f\"t: {t}\")\n\nNotice how much shorter this program is than its counterpart in C.\nIn this class, we will only scratch the surface of Python. Therefore, the Python documentation will be of particular importance as you continue.\nYou can learn more about string methods in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#loops",
    "href": "notes/notes_7.html#loops",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Loops in Python are very similar to C. You may recall the following code in C:\n// Demonstrates for loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nfor loops can be implemented in Python as follows:\n# Better design\n\nfor i in range(3):\n    print(\"meow\")\n\nNotice that i is never explicitly used. However, Python will increment the value of i.\nFurther, a while loop could be implemented as follows:\n# Demonstrates while loop\n\ni = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n\nTo further our understanding of loops and iteration in Python, let’s create a new file called uppercase.py as follows:\n# Uppercases string one character at a time\n\nbefore = input(\"Before: \")\nprint(\"After:  \", end=\"\")\nfor c in before:\n    print(c.upper(), end=\"\")\nprint()\n\nNotice how end= is used to pass a parameter to the print function that continues the line without a line ending. This code passes one string at a time.\nReading the documentation, we discover that Python has methods that can be implemented upon the entire string as follows:\n# Uppercases string all at once\n\nbefore = input(\"Before: \")\nafter = before.upper()\nprint(f\"After:  {after}\")\n\nNotice how .upper is applied to the entire string.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#abstraction",
    "href": "notes/notes_7.html#abstraction",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As we hinted at earlier today, you can further improve upon our code using functions and abstracting away various code into functions. Modify your earlier-created meow.py code as follows:\n# Abstraction\n\ndef main():\n    for i in range(3):\n        meow()\n\n# Meow once\ndef meow():\n    print(\"meow\")\n\n\nmain()\n\nNotice that the meow function abstracts away the print statement. Further, notice that the main function appears at the top of the file. At the bottom of the file, the main function is called. By convention, it’s expected that you create a main function in Python.\nIndeed, we can pass variables between our functions as follows:\n# Abstraction with parameterization\n\ndef main():\n    meow(3)\n\n\n# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print(\"meow\")\n\n\nmain()\n\nNotice how meow now takes a variable n. In the main function, you can call meow and pass a value like 3 to it. Then, meow utilizes the value of n in the for loop.\nReading the above code, notice how you, as a C programmer, are able to quite easily make sense of the above code. While some conventions are different, the building blocks you previously learned are very apparent in this new programming language.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#truncation-and-floating-point-imprecision",
    "href": "notes/notes_7.html#truncation-and-floating-point-imprecision",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Recall that in C, we experienced truncation where one integer is divided by another could result in an imprecise result.\nYou can see how Python handles such division as follows by modifying your code for calculator.py:\n# Division with integers, demonstration lack of truncation\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(z)\n\nNotice that executing this code results in a value, but that if you were to see more digits after .333333 you’d see that we are faced with floating-point imprecision. Truncation does not occur.\nWe can reveal this imprecision by modifying our codes slightly:\n# Floating-point imprecision\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(f\"{z:.50f}\")\n\nNotice that this code reveals the imprecision. Python still faces this issue, just as C does.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#exceptions",
    "href": "notes/notes_7.html#exceptions",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Let’s explore more about exceptions that can occur when we run Python code.\nModify calculator.py as follows:\n# Doesn't handle exception\n\n# Prompt user for an integer\nn = int(input(\"Input: \"))\nprint(\"Integer\")\n\nNotice that inputting the wrong data could result in an error.\nWe can try to handle and catch potential exceptions by modifying our code as follows:\n# Handles exception\n\n# Prompt user for an integer\ntry:\n    n = int(input(\"Input: \"))\n    print(\"Integer.\")\nexcept ValueError:\n    print(\"Not integer.\")\n\nNotice that the above code repeatedly tries to get the correct type of data, providing additional prompts when needed.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#mario",
    "href": "notes/notes_7.html#mario",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Recall a few weeks ago our challenge of building three blocks on top of one another, like in Mario.\n\n\n\nthree vertical blocks\n\n\nIn Python, we can implement something akin to this as follows:\n# Prints a column of 3 bricks with a loop\n\nfor i in range(3):\n    print(\"#\")\n\nThis prints a column of three bricks.\nIn C, we had the advantage of a do-while loop. However, in Python, it is conventional to utilize a while loop, as Python does not have a do-while loop. You can write code as follows in a file called mario.py:\n# Prints a column of n bricks with a loop\n\nfrom cs50 import get_int\n\nwhile True:\n    n = get_int(\"Height: \")\n    if n &gt; 0:\n        break\n\nfor i in range(n):\n    print(\"#\")\n\nNotice how the while loop is used to obtain the height. Once a height greater than zero is inputted, the loop breaks.\nConsider the following image:\n\n\n\nfour horizontal question blocks\n\n\nIn Python, we could implement by modifying your code as follows:\n# Prints a row of 4 question marks with a loop\n\nfor i in range(4):\n    print(\"?\", end=\"\")\nprint()\n\nNotice that you can override the behavior of the print function to stay on the same line as the previous print.\nSimilar in spirit to previous iterations, we can further simplify this program:\n# Prints a row of 4 question marks without a loop\n\nprint(\"?\" * 4)\n\nNotice that we can utilize * to multiply the print statement to repeat 4 times.\nWhat about a large block of bricks?\n\n\n\nthree by three block of mario blocks\n\n\nTo implement the above, you can modify your code as follows:\n# Prints a 3-by-3 grid of bricks with loops\n\nfor i in range(3):\n    for j in range(3):\n        print(\"#\", end=\"\")\n    print()\n\nNotice how one for loop exists inside another. The print statement adds a new line at the end of each row of bricks.\nYou can learn more about the print function in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#lists",
    "href": "notes/notes_7.html#lists",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "lists are a data structure within Python.\nlists have built-in methods or functions within them.\nFor example, consider the following code:\n# Averages three numbers using a list\n\n# Scores\nscores = [72, 73, 33]\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that you can use the built-in sum method to calculate the average.\nYou can even utilize the following syntax to get values from the user:\n# Averages three numbers using a list and a loop\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int(\"Score: \")\n    scores.append(score)\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that this code utilizes the built-in append method for lists.\nYou can learn more about lists in the Python documentation\nYou can also learn more about len in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#searching-and-dictionaries",
    "href": "notes/notes_7.html#searching-and-dictionaries",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "We can also search within a data structure.\nConsider a program called phonebook.py as follows:\n# Implements linear search for names using loop\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nfor n in names:\n    if name == n:\n        print(\"Found\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice how this implements linear search for each name.\nHowever, we don’t need to iterate through a list. In Python, we can execute linear search as follows:\n# Implements linear search for names using `in`\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nif name in names:\n    print(\"Found\")\nelse:\n    print(\"Not found\")\n\nNotice how in is used to implement linear search.\nStill, this code could be improved.\nRecall that a dictionary or dict is a collection of key and value pairs.\nYou can implement a dictionary in Python as follows:\n# Implements a phone book as a list of dictionaries, without a variable\n\nfrom cs50 import get_string\n\npeople = [\n    {\"name\": \"Yuliia\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"David\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"John\", \"number\": \"+1-949-468-2750\"},\n]\n\n# Search for name\nname = get_string(\"Name: \")\nfor person in people:\n    if person[\"name\"] == name:\n        print(f\"Found {person['number']}\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented having both name and number for each entry.\nEven better, strictly speaking, we don’t need both a name and a number. We can simplify this code as follows:\n# Implements a phone book using a dictionary\n\nfrom cs50 import get_string\n\npeople = {\n    \"Yuliia\": \"+1-617-495-1000\",\n    \"David\": \"+1-617-495-1000\",\n    \"John\": \"+1-949-468-2750\",\n}\n\n# Search for name\nname = get_string(\"Name: \")\nif name in people:\n    print(f\"Number: {people[name]}\")\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented using curly braces. Then, the statement if name in people searches to see if the name is in the people dictionary. Further, notice how, in the print statement, we can index into the people dictionary using the value of name. Very useful!\nPython has done their best to get to constant time using their built-in searches.\nYou can learn more about dictionaries in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#command-line-arguments",
    "href": "notes/notes_7.html#command-line-arguments",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As with C, you can also utilize command-line arguments. Consider the following code:\n# Prints a command-line argument\n\nfrom sys import argv\n\nif len(argv) == 2:\n    print(f\"hello, {argv[1]}\")\nelse:\n    print(\"hello, world\")\n\nNotice that argv[1] is printed using a formatted string, noted by the f present in the print statement.\nYou can learn more about the sys library in the Python documentation",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#exit-status",
    "href": "notes/notes_7.html#exit-status",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "The sys library also has built-in methods. We can use sys.exit(i) to exit the program with a specific exit code:\n# Exits with explicit value, importing sys\n\nimport sys\n\nif len(sys.argv) != 2:\n    print(\"Missing command-line argument\")\n    sys.exit(1)\n\nprint(f\"hello, {sys.argv[1]}\")\nsys.exit(0)\n\nNotice that dot-notation is used to utilize the built-in functions of sys.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#csv-files",
    "href": "notes/notes_7.html#csv-files",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Python also has built-in support for CSV files.\nModify your code for phonebook.py as follows:\nimport csv\n\nfile = open(\"phonebook.csv\", \"a\")\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwriter = csv.writer(file)\nwriter.writerow([name,number])\n\nfile.close()\n\nNotice writerow adds the commas in the CSV file for us.\nWhile file.close and file = open are commonly used and available syntax in Python, this code can be improved as follows:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.writer(file)\n    writer.writerow([name,number])\n\nNotice that the code is indented under the with statement. This automatically closes the file when done.\nSimilarly, we can write a dictionary as follows within the CSV file:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"number\"])\n    writer.writerow({\"name\": name, \"number\": number})\n\nNotice this code is quite similar to our prior iteration but with csv.DictWriter instead.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#third-party-libraries",
    "href": "notes/notes_7.html#third-party-libraries",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "One of the advantages of Python is its massive user base and similarly large number of third-party libraries.\nYou can install the CS50 Library on your own computer by typing pip install cs50, provided you have Python installed.\nConsidering other libraries, we demoed the use of cowsay and qrcode.",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_7.html#summing-up",
    "href": "notes/notes_7.html#summing-up",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In this lesson, you learned how the building blocks of programming from prior lessons can be implemented within Python. Further, you learned about how Python allowed for more simplified code. Also, you learned how to utilize various Python libraries. In the end, you learned that your skills as a programmer are not limited to a single programming language. Already, you are seeing how you are discovering a new way of learning through this course that could serve you in any programming language – and, perhaps, in nearly any avenue of learning! Specifically, we discussed…\n\nPython\nVariables\nConditionals\nLoops\nTypes\nObject-Oriented programming\nTruncation and floating point imprecision\nExceptions\nDictionaries\nCommand-line arguments\nThird-Party libraries\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 07 🐍"
    ]
  },
  {
    "objectID": "notes/notes_9.html",
    "href": "notes/notes_9.html",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Welcome!\nThe Internet\nRouters\nDNS\nDHCP\nHTTPS\nHTML\nRegular Expressions\nCSS\nFrameworks\nJavaScript\nSumming Up\n\n\n\n\nIn previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. Today, we will extend those building blocks further in HTML, CSS, and JavaScript.\n\n\n\n\n\nThe internet is a technology that we all use.\nUsing our skills from previous weeks, we can build our own web pages and applications.\nThe ARPANET connected the first points on the internet to one another.\nDots between two points could be considered routers.\n\n\n\n\n\nTo route data from one place to another, we need to make routing decisions. That is, someone needs to program how data is transferred from point A to point B.\nYou can imagine how data could take multiple paths from point A and point B, such that when a router is congested, data can flow through another path. Packets of data are transferred from one router to another, from one computer to another.\nTCP/IP are two protocols that allow computers to transfer data between them over the internet.\nIP or internet protocol is a way by which computers can identify one another across the internet. Every computer has a unique address in the world. Addresses are in this form:\n#.#.#.#\n\nNumbers range from 0 to 255. IP addresses are 32-bits, meaning that these addresses could accommodate over 4 billion addresses. Newer versions of IP addresses, implementing 128-bits, can accommodate far more computers!\nIn the real world, servers do a lot of work for us.\nPackets are structured as follows:\n0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version|  IHL  |Type of Service|          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         Identification        |Flags|      Fragment Offset    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Time to Live |    Protocol   |         Header Checksum       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Source Address                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Destination Address                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options                    |    Padding    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nPackets are standardized. The source and destination are held within each packet.\nTCP, or transmission control protocol, helps keep track of the sequence of packets being sent.\nFurther, TCP is used to distinguish web services from one another. For example, 80 is used to denote HTTP and 443 is used to denote HTTPS. These numbers are port numbers.\nWhen information is sent from one location to another, a source IP address, a destination IP address, and a TCP port number are sent.\nThese protocols are also used to fragment large files into multiple parts or packets. For example, a large photo of a cat can be sent in multiple packets. When a packet is lost, TCP/IP can request missing packets again from the origin server.\nTCP will acknowledge when all the data has been transmitted and received.\n\n\n\n\n\nIt would be very tedious if you needed to remember an IP address to visit a website.\nDNS, or domain name systems, is a collection of servers on the internet that are used to route website addresses like harvard.edu to a specific IP address.\nDNS is simply a table or database that links specific, fully qualified domain names to specific IP addresses.\n\n\n\n\n\nDHCP is a protocol that ascertains the IP address of your device.\nFurther, this protocol defines the default gateway and nameservers your device uses.\n\n\n\n\n\nHTTP or hypertext transfer protocol is an application-level protocol that developers use to build powerful and useful things through the transfer of data from one place to another. HTTPS is a secure version of this protocol.\nWhen you see an address such as https://www.example.com you are actually implicitly visiting that address with a / at the end of it.\nThe path is what exists after that slash. For example, https://www.example.com/folder/file.html visits example.com and browses to the folder directory, and then visits the file named file.html.\nThe .com is called a top-level domain that is used to denote the location or type of organization associated with this address.\nhttps in this address is the protocol that is used to connect to that web address. By protocol, we mean that HTTP utilizes GET or POST requests to ask for information from a server. For example, you can launch Google Chrome, right-click, and click inspect. When you open the developer tools and visit Network, selecting Preserve log, you will see Request Headers. You’ll see mentions of GET. This is possible in other browsers as well, using slightly different methods.\nFor example, when issuing a GET request, your computer may send the following to a server:\nGET / HTTP/2\nHost: www.harvard.edu\n\nNotice that this requests via HTTP the content served on www.harvard.edu.\nGenerally, after making a request to a server, you will receive the following in Response Headers:\nHTTP/2 200\nContent-Type: text/html\n\nThis approach to inspecting these logs may be a bit more complicated than need be. You can analyze the work of HTTP protocols in The Sandbox). For example, type the following in your terminal window:\ncurl -I https://www.google.com/\n\nNotice that the output of this command returns all the header values of the responses of the server.\nVia developer tools in your web browser, you can see all the HTTP requests when browsing to the above website.\nFurther, execute the following command in your terminal window:\ncurl -I https://google.com\n\nNotice that you will see a 301 response, providing a hint to a browser of where it can find the correct website.\nSimilarly, execute the following in your terminal window:\ncurl -I http://www.google.com/\n\nNotice that the s in https has been removed. The server response will show that the response is 301, meaning that the website has permanently moved.\nSimilar to 301, a code of 404 means that a specified URL has not been found. There are numerous other response codes, such as:\n200 OK\n301 Moved Permanently\n302 Found\n304 Not Modified\n307 Temporary Redirect\n401 Unauthorized\n403 Forbidden\n404 Not Found\n418 I'm a Teapot\n500 Internal Server Error\n503 Service Unavailable\n\nIt’s worth mentioning that 500 errors are always your fault as the developer when they concern a product or application of your creation. This will be especially important for next week’s problem set, and potentially for your final project!\n\n\n\n\n\nHTML or hypertext markup language is made up of tags, each of which may have some attributes that describe it.\nIn your terminal, type code hello.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates HTML --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;hello, title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, body\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the html tag both opens and closes this file. Further, notice the lang attribute, which modifies the behavior of the html tag. Also, notice that there are both head tags and body tags. Indentation is not required but does suggest a hierarchy.\nYou can serve your code by typing http-server. This served content is now available on a very long URL. If you click it, you can visit the website generated by your own code.\nWhen you visit this URL, notice that the file name hello.html appears at the end of this URL. Further, notice, based upon the URL, that the server is serving via port 8080.\nThe hierarchy of tags can be represented as follows:\n\n\n\nhtml code next to a hierarchy showing parent and child nodes\n\n\nKnowledge of this hierarchy will be useful later as we learn JavaScript.\nThe browser will read your HTML file top to bottom and left to right.\nBecause whitespace and indentation are effectively ignored in HTML, you will need to use &lt;p&gt; paragraph tags to open and close a paragraph. Consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates paragraphs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;paragraphs&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that paragraphs start with a &lt;p&gt; tag and end with a &lt;/p&gt; tag.\nHTML allows for the representation of headings:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates headings (for chapters, sections, subsections, etc.) --&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;headings&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;One&lt;/h1&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n\n        &lt;h2&gt;Two&lt;/h2&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n\n        &lt;h3&gt;Three&lt;/h3&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n\n        &lt;h4&gt;Four&lt;/h4&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n\n        &lt;h5&gt;Five&lt;/h5&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n\n        &lt;h6&gt;Six&lt;/h6&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; denote different levels of headings.\nWe can also create unordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ul&gt; tag creates an unordered list containing three items.\nWe can also create ordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ol&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ol&gt; tag creates an ordered list containing three items.\nWe can also create a table in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;table&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;3&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;4&lt;/td&gt;\n                &lt;td&gt;5&lt;/td&gt;\n                &lt;td&gt;6&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;7&lt;/td&gt;\n                &lt;td&gt;8&lt;/td&gt;\n                &lt;td&gt;9&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;*&lt;/td&gt;\n                &lt;td&gt;0&lt;/td&gt;\n                &lt;td&gt;#&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nTables also have tags that open and close each element within. Also, notice the syntax for comments in HTML.\nImages can also be utilized within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates image --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;image&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img alt=\"photo of bridge\" src=\"bridge.png\"&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that src=\"bridge.png\" indicates the path where the image file can be located.\nVideos can also be included in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates video --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;video&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;video controls muted&gt;\n            &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n        &lt;/video&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the type attribute designates that this is a video of type mp4. Further, notice how controls and muted are passed to video.\nYou can also link between various web pages:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates link --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;link&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n       Visit &lt;a href=\"https://www.bbc.com/news\"&gt;BBC news&lt;/a&gt;.\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;a&gt; or anchor tag is used to make BBC news a linkable text.\nYou can also create forms reminiscent of Google’s search:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates form --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input name=\"q\" type=\"search\"&gt;\n            &lt;input type=\"submit\" value=\"Google Search\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that a form tag opens and provides the attribute of what action it will take. The input field is included, passing the name q and the type as search.\nWe can make this search better as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates additional form attributes --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n            &lt;button&gt;Google Search&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that autocomplete is turned off. autofocus is enabled.\nWe’ve seen just a few of many HTML elements you can add to your site. If you have an idea for something to add to your site that we haven’t seen yet (a button, an audio file, etc.) try Googling “X in HTML” to find the right syntax! Similarly, you can use The Sandbox) to help you discover more HTML features!\n\n\n\n\n\nRegular expressions or regexes are a means by which to ensure that user-provided data fits a specific format.\nWe can implement our own registration page that utilizes regexes as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates type=\"email\" --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the input tag includes attributes that designate that this is of type email. The browser knows to double-check that the input is an email address.\nWhile the browser uses these built-in attributes to check for an email address, we can add a pattern attribute to ensure that only specific data ends up in the email address:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates pattern attribute --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" pattern=\".+@.+\\.edu\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the pattern attribute is handed a regular expression to denote that the email address must include an @ symbol and a .edu.\nYou can learn more about regular expressions from Mozilla’s documentation. Further, you can check out this cheatsheet.\n\n\n\n\n\nCSS, or cascading style sheet, is a markup language that allows you to fine-tune the aesthetics of your HTML files.\nCSS is filled with properties, which include key-value pairs.\nIn your terminal, type code home.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates inline CSS with P tags --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p style=\"font-size: large; text-align: center;\"&gt;\n            John Harvard\n        &lt;/p&gt;\n        &lt;p style=\"font-size: medium; text-align: center;\"&gt;\n            Welcome to my home page!\n        &lt;/p&gt;\n        &lt;p style=\"font-size: small; text-align: center;\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that some style attributes are provided to the &lt;p&gt; tags. The font-size is set to large, medium, or small. Then text-align is set to center.\nWhile correct, the above is not well-designed. We can remove redundancy by modifying our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Removes outer DIV --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;div style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/div&gt;\n        &lt;div style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/div&gt;\n        &lt;div style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that &lt;div&gt; tags are used to divide up this HTML file into specific regions. text-align: center is invoked on the entire body of the HTML. Because everything inside body is a child of body, the center attribute cascades down to those children.\nIt turns out that there are newer semantic tags included in HTML. We can modify our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Uses semantic tags instead of DIVs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;header style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the header and footer both have different styles assigned to them.\nThis practice of placing the style and information all in the same location is not good practice. We could move the elements of style to the top of the file as follows:\n&lt;!-- Demonstrates class selectors --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n\n            .centered\n            {\n                text-align: center;\n            }\n\n            .large\n            {\n                font-size: large;\n            }\n\n            .medium\n            {\n                font-size: medium;\n            }\n\n            .small\n            {\n                font-size: small;\n            }\n\n        &lt;/style&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice all the style tags are placed up in the head in the style tag wrapper. Also, notice that we’ve assigned classes, called centered, large, medium, and small to our elements, and that we select those classes by placing a dot before the name, as in .centered\nIt turns out that we can move all our style code into a special file called a CSS file. We can create a file called style.css and paste our classes there:\n.centered\n{\n    text-align: center;\n}\n\n.large\n{\n    font-size: large;\n}\n\n.medium\n{\n    font-size: medium;\n}\n\n.small\n{\n    font-size: small;\n}\n\nNotice that this is verbatim what appeared in our HTML file.\nWe then can tell the browser where to locate the CSS for this HTML file:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates external stylesheets --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that style.css is linked to this HTML file as a stylesheet, telling the browser where to locate the styles we created.\n\n\n\n\n\nSimilar to third-party libraries we can leverage in Python, there are third-party libraries called frameworks that we can utilize with our HTML files.\nBootstrap is one of these frameworks that we can use to beautify our HTML and easily perfect design elements such that our pages are more readable.\nBootstrap can be utilized by adding the following link tag in the head of your html file:\n&lt;head&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;title&gt;bootstrap&lt;/title&gt;\n&lt;/head&gt;\n\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;John&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how, when looking at a served version of this page, it’s quite plain.\nNow consider the following HTML that implements the use of Bootstrap:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table class=\"table\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n                    &lt;th scope=\"col\"&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how much prettier this website is now.\nSimilarly, consider the following expansion of our search page created earlier:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates layout with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;div class=\"container-fluid\"&gt;\n\n            &lt;ul class=\"m-3 nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://about.google/\"&gt;About&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://store.google.com/\"&gt;Store&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item ms-auto\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/gmail/\"&gt;Gmail&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/imghp\"&gt;Images&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/intl/en/about/products\"&gt;\n                        &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-grid-3x3-gap-fill\" viewBox=\"0 0 16 16\"&gt;\n                            &lt;path d=\"M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z\"/&gt;\n                        &lt;/svg&gt;\n                    &lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"btn btn-primary\" href=\"https://accounts.google.com/ServiceLogin\" role=\"button\"&gt;Sign in&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;div class=\"text-center\"&gt;\n\n                &lt;!-- https://knowyourmeme.com/memes/happy-cat --&gt;\n                &lt;img alt=\"Happy Cat\" class=\"img-fluid w-25\" src=\"cat.gif\"&gt;\n\n                &lt;form action=\"https://www.google.com/search\" class=\"mt-4\" method=\"get\"&gt;\n                    &lt;input autocomplete=\"off\" autofocus class=\"form-control form-control-lg mb-4 mx-auto w-50\" name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n                    &lt;button class=\"btn btn-light\"&gt;Google Search&lt;/button&gt;\n                    &lt;button class=\"btn btn-light\" name=\"btnI\"&gt;I'm Feeling Lucky&lt;/button&gt;\n                &lt;/form&gt;\n\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis version of the page is exceedingly stylized, thanks to Bootstrap.\nYou can learn more about this in the Bootstrap Documentation.\n\n\n\n\n\nJavaScript is another programming language that allows for interactivity within web pages.\nConsider the following implementation of hello.html that includes both JavaScript and HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates onsubmit --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            function greet()\n            {\n                alert('hello, ' + document.querySelector('#name').value);\n            }\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form onsubmit=\"greet(); return false;\"&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how this form uses an onsubmit property to trigger a script found at the top of the file. The script uses alert to create an alert pop-up. #name.value goes to the textbox on the page and obtains the value typed by the user.\nGenerally, it’s considered bad design to mix onsubmit and JavaScript. We can advance our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates DOMContentLoaded --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                document.querySelector('form').addEventListener('submit', function(e) {\n                    alert('hello, ' + document.querySelector('#name').value);\n                    e.preventDefault();\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that this version of the code creates an addEventListener to listen to the form submit being triggered. Notice how DOMContentLoaded ensures that the whole page is loaded before executing the JavaScript.\nWe can advance this code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates keyup and template literals --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                let input = document.querySelector('input');\n                input.addEventListener('keyup', function(event) {\n                    let name = document.querySelector('p');\n                    if (input.value) {\n                        name.innerHTML = `hello, ${input.value}`;\n                    }\n                    else {\n                        name.innerHTML = 'hello, whoever you are';\n                    }\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus placeholder=\"Name\" type=\"text\"&gt;\n        &lt;/form&gt;\n        &lt;p&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the DOM is dynamically updated in memory as the user types out a name. If there is a value inside input, upon the keyup on the keyboard, the DOM is updated. Otherwise, default text is presented.\nJavaScript allows you to dynamically read and modify the html document loaded into memory such that the user need not reload to see changes.\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates programmatic changes to style --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;background&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button id=\"red\"&gt;R&lt;/button&gt;\n        &lt;button id=\"green\"&gt;G&lt;/button&gt;\n        &lt;button id=\"blue\"&gt;B&lt;/button&gt;\n        &lt;script&gt;\n\n            let body = document.querySelector('body');\n            document.querySelector('#red').addEventListener('click', function() {\n                body.style.backgroundColor = 'red';\n            });\n            document.querySelector('#green').addEventListener('click', function() {\n                body.style.backgroundColor = 'green';\n            });\n            document.querySelector('#blue').addEventListener('click', function() {\n                body.style.backgroundColor = 'blue';\n            });\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that JavaScript listens for when a specific button is clicked. Upon such a click, certain style attributes on the page are changed. body is defined as the body of the page. Then, an event listener waits for the clicking of one of the buttons. Then, the body.style.backgroundColor is changed.\nSimilarly, consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            // Toggles visibility of greeting\n            function blink()\n            {\n                let body = document.querySelector('body');\n                if (body.style.visibility == 'hidden')\n                {\n                    body.style.visibility = 'visible';\n                }\n                else\n                {\n                    body.style.visibility = 'hidden';\n                }\n            }\n\n            // Blink every 500ms\n            window.setInterval(blink, 500);\n\n        &lt;/script&gt;\n        &lt;title&gt;blink&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, world\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis example blinks a text at a set interval. Notice that window.setInterval takes in two arguments: A function to be called and a waiting period (in milliseconds) between function calls.\nConsider the following implementation of JavaScript that autocompletes text:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;autocomplete&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script src=\"large.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n\n            let input = document.querySelector('input');\n            input.addEventListener('keyup', function(event) {\n                let html = '';\n                if (input.value) {\n                    for (word of WORDS) {\n                        if (word.startsWith(input.value)) {\n                            html += `&lt;li&gt;${word}&lt;/li&gt;`;\n                        }\n                    }\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis is a JavaScript implementation of autocomplete. This pulls from a file (not pictured here) called large.js that is a list of words.\nThe capabilities of JavaScript are many and can be found in the JavaScript Documentation.\n\n\n\n\nIn this lesson, you learned how to create your own HTML files, style them, leverage third-party frameworks, and utilize JavaScript. Specifically, we discussed…\n\nTCP/IP\nDNS\nHTML\nRegular expressions\nCSS\nFrameworks\nJavaScript\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#welcome",
    "href": "notes/notes_9.html#welcome",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "In previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. Today, we will extend those building blocks further in HTML, CSS, and JavaScript.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#the-internet",
    "href": "notes/notes_9.html#the-internet",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "The internet is a technology that we all use.\nUsing our skills from previous weeks, we can build our own web pages and applications.\nThe ARPANET connected the first points on the internet to one another.\nDots between two points could be considered routers.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#routers",
    "href": "notes/notes_9.html#routers",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "To route data from one place to another, we need to make routing decisions. That is, someone needs to program how data is transferred from point A to point B.\nYou can imagine how data could take multiple paths from point A and point B, such that when a router is congested, data can flow through another path. Packets of data are transferred from one router to another, from one computer to another.\nTCP/IP are two protocols that allow computers to transfer data between them over the internet.\nIP or internet protocol is a way by which computers can identify one another across the internet. Every computer has a unique address in the world. Addresses are in this form:\n#.#.#.#\n\nNumbers range from 0 to 255. IP addresses are 32-bits, meaning that these addresses could accommodate over 4 billion addresses. Newer versions of IP addresses, implementing 128-bits, can accommodate far more computers!\nIn the real world, servers do a lot of work for us.\nPackets are structured as follows:\n0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version|  IHL  |Type of Service|          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         Identification        |Flags|      Fragment Offset    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Time to Live |    Protocol   |         Header Checksum       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Source Address                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Destination Address                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options                    |    Padding    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nPackets are standardized. The source and destination are held within each packet.\nTCP, or transmission control protocol, helps keep track of the sequence of packets being sent.\nFurther, TCP is used to distinguish web services from one another. For example, 80 is used to denote HTTP and 443 is used to denote HTTPS. These numbers are port numbers.\nWhen information is sent from one location to another, a source IP address, a destination IP address, and a TCP port number are sent.\nThese protocols are also used to fragment large files into multiple parts or packets. For example, a large photo of a cat can be sent in multiple packets. When a packet is lost, TCP/IP can request missing packets again from the origin server.\nTCP will acknowledge when all the data has been transmitted and received.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#dns",
    "href": "notes/notes_9.html#dns",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "It would be very tedious if you needed to remember an IP address to visit a website.\nDNS, or domain name systems, is a collection of servers on the internet that are used to route website addresses like harvard.edu to a specific IP address.\nDNS is simply a table or database that links specific, fully qualified domain names to specific IP addresses.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#dhcp",
    "href": "notes/notes_9.html#dhcp",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "DHCP is a protocol that ascertains the IP address of your device.\nFurther, this protocol defines the default gateway and nameservers your device uses.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#https",
    "href": "notes/notes_9.html#https",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "HTTP or hypertext transfer protocol is an application-level protocol that developers use to build powerful and useful things through the transfer of data from one place to another. HTTPS is a secure version of this protocol.\nWhen you see an address such as https://www.example.com you are actually implicitly visiting that address with a / at the end of it.\nThe path is what exists after that slash. For example, https://www.example.com/folder/file.html visits example.com and browses to the folder directory, and then visits the file named file.html.\nThe .com is called a top-level domain that is used to denote the location or type of organization associated with this address.\nhttps in this address is the protocol that is used to connect to that web address. By protocol, we mean that HTTP utilizes GET or POST requests to ask for information from a server. For example, you can launch Google Chrome, right-click, and click inspect. When you open the developer tools and visit Network, selecting Preserve log, you will see Request Headers. You’ll see mentions of GET. This is possible in other browsers as well, using slightly different methods.\nFor example, when issuing a GET request, your computer may send the following to a server:\nGET / HTTP/2\nHost: www.harvard.edu\n\nNotice that this requests via HTTP the content served on www.harvard.edu.\nGenerally, after making a request to a server, you will receive the following in Response Headers:\nHTTP/2 200\nContent-Type: text/html\n\nThis approach to inspecting these logs may be a bit more complicated than need be. You can analyze the work of HTTP protocols in The Sandbox). For example, type the following in your terminal window:\ncurl -I https://www.google.com/\n\nNotice that the output of this command returns all the header values of the responses of the server.\nVia developer tools in your web browser, you can see all the HTTP requests when browsing to the above website.\nFurther, execute the following command in your terminal window:\ncurl -I https://google.com\n\nNotice that you will see a 301 response, providing a hint to a browser of where it can find the correct website.\nSimilarly, execute the following in your terminal window:\ncurl -I http://www.google.com/\n\nNotice that the s in https has been removed. The server response will show that the response is 301, meaning that the website has permanently moved.\nSimilar to 301, a code of 404 means that a specified URL has not been found. There are numerous other response codes, such as:\n200 OK\n301 Moved Permanently\n302 Found\n304 Not Modified\n307 Temporary Redirect\n401 Unauthorized\n403 Forbidden\n404 Not Found\n418 I'm a Teapot\n500 Internal Server Error\n503 Service Unavailable\n\nIt’s worth mentioning that 500 errors are always your fault as the developer when they concern a product or application of your creation. This will be especially important for next week’s problem set, and potentially for your final project!",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#html",
    "href": "notes/notes_9.html#html",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "HTML or hypertext markup language is made up of tags, each of which may have some attributes that describe it.\nIn your terminal, type code hello.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates HTML --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;hello, title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, body\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the html tag both opens and closes this file. Further, notice the lang attribute, which modifies the behavior of the html tag. Also, notice that there are both head tags and body tags. Indentation is not required but does suggest a hierarchy.\nYou can serve your code by typing http-server. This served content is now available on a very long URL. If you click it, you can visit the website generated by your own code.\nWhen you visit this URL, notice that the file name hello.html appears at the end of this URL. Further, notice, based upon the URL, that the server is serving via port 8080.\nThe hierarchy of tags can be represented as follows:\n\n\n\nhtml code next to a hierarchy showing parent and child nodes\n\n\nKnowledge of this hierarchy will be useful later as we learn JavaScript.\nThe browser will read your HTML file top to bottom and left to right.\nBecause whitespace and indentation are effectively ignored in HTML, you will need to use &lt;p&gt; paragraph tags to open and close a paragraph. Consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates paragraphs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;paragraphs&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that paragraphs start with a &lt;p&gt; tag and end with a &lt;/p&gt; tag.\nHTML allows for the representation of headings:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates headings (for chapters, sections, subsections, etc.) --&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;headings&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;One&lt;/h1&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n\n        &lt;h2&gt;Two&lt;/h2&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n\n        &lt;h3&gt;Three&lt;/h3&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n\n        &lt;h4&gt;Four&lt;/h4&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n\n        &lt;h5&gt;Five&lt;/h5&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n\n        &lt;h6&gt;Six&lt;/h6&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; denote different levels of headings.\nWe can also create unordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ul&gt; tag creates an unordered list containing three items.\nWe can also create ordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ol&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ol&gt; tag creates an ordered list containing three items.\nWe can also create a table in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;table&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;3&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;4&lt;/td&gt;\n                &lt;td&gt;5&lt;/td&gt;\n                &lt;td&gt;6&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;7&lt;/td&gt;\n                &lt;td&gt;8&lt;/td&gt;\n                &lt;td&gt;9&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;*&lt;/td&gt;\n                &lt;td&gt;0&lt;/td&gt;\n                &lt;td&gt;#&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nTables also have tags that open and close each element within. Also, notice the syntax for comments in HTML.\nImages can also be utilized within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates image --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;image&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img alt=\"photo of bridge\" src=\"bridge.png\"&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that src=\"bridge.png\" indicates the path where the image file can be located.\nVideos can also be included in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates video --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;video&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;video controls muted&gt;\n            &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n        &lt;/video&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the type attribute designates that this is a video of type mp4. Further, notice how controls and muted are passed to video.\nYou can also link between various web pages:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates link --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;link&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n       Visit &lt;a href=\"https://www.bbc.com/news\"&gt;BBC news&lt;/a&gt;.\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;a&gt; or anchor tag is used to make BBC news a linkable text.\nYou can also create forms reminiscent of Google’s search:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates form --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input name=\"q\" type=\"search\"&gt;\n            &lt;input type=\"submit\" value=\"Google Search\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that a form tag opens and provides the attribute of what action it will take. The input field is included, passing the name q and the type as search.\nWe can make this search better as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates additional form attributes --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n            &lt;button&gt;Google Search&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that autocomplete is turned off. autofocus is enabled.\nWe’ve seen just a few of many HTML elements you can add to your site. If you have an idea for something to add to your site that we haven’t seen yet (a button, an audio file, etc.) try Googling “X in HTML” to find the right syntax! Similarly, you can use The Sandbox) to help you discover more HTML features!",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#regular-expressions",
    "href": "notes/notes_9.html#regular-expressions",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Regular expressions or regexes are a means by which to ensure that user-provided data fits a specific format.\nWe can implement our own registration page that utilizes regexes as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates type=\"email\" --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the input tag includes attributes that designate that this is of type email. The browser knows to double-check that the input is an email address.\nWhile the browser uses these built-in attributes to check for an email address, we can add a pattern attribute to ensure that only specific data ends up in the email address:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates pattern attribute --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" pattern=\".+@.+\\.edu\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the pattern attribute is handed a regular expression to denote that the email address must include an @ symbol and a .edu.\nYou can learn more about regular expressions from Mozilla’s documentation. Further, you can check out this cheatsheet.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#css",
    "href": "notes/notes_9.html#css",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "CSS, or cascading style sheet, is a markup language that allows you to fine-tune the aesthetics of your HTML files.\nCSS is filled with properties, which include key-value pairs.\nIn your terminal, type code home.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates inline CSS with P tags --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p style=\"font-size: large; text-align: center;\"&gt;\n            John Harvard\n        &lt;/p&gt;\n        &lt;p style=\"font-size: medium; text-align: center;\"&gt;\n            Welcome to my home page!\n        &lt;/p&gt;\n        &lt;p style=\"font-size: small; text-align: center;\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that some style attributes are provided to the &lt;p&gt; tags. The font-size is set to large, medium, or small. Then text-align is set to center.\nWhile correct, the above is not well-designed. We can remove redundancy by modifying our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Removes outer DIV --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;div style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/div&gt;\n        &lt;div style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/div&gt;\n        &lt;div style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that &lt;div&gt; tags are used to divide up this HTML file into specific regions. text-align: center is invoked on the entire body of the HTML. Because everything inside body is a child of body, the center attribute cascades down to those children.\nIt turns out that there are newer semantic tags included in HTML. We can modify our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Uses semantic tags instead of DIVs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;header style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the header and footer both have different styles assigned to them.\nThis practice of placing the style and information all in the same location is not good practice. We could move the elements of style to the top of the file as follows:\n&lt;!-- Demonstrates class selectors --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n\n            .centered\n            {\n                text-align: center;\n            }\n\n            .large\n            {\n                font-size: large;\n            }\n\n            .medium\n            {\n                font-size: medium;\n            }\n\n            .small\n            {\n                font-size: small;\n            }\n\n        &lt;/style&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice all the style tags are placed up in the head in the style tag wrapper. Also, notice that we’ve assigned classes, called centered, large, medium, and small to our elements, and that we select those classes by placing a dot before the name, as in .centered\nIt turns out that we can move all our style code into a special file called a CSS file. We can create a file called style.css and paste our classes there:\n.centered\n{\n    text-align: center;\n}\n\n.large\n{\n    font-size: large;\n}\n\n.medium\n{\n    font-size: medium;\n}\n\n.small\n{\n    font-size: small;\n}\n\nNotice that this is verbatim what appeared in our HTML file.\nWe then can tell the browser where to locate the CSS for this HTML file:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates external stylesheets --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that style.css is linked to this HTML file as a stylesheet, telling the browser where to locate the styles we created.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#frameworks",
    "href": "notes/notes_9.html#frameworks",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Similar to third-party libraries we can leverage in Python, there are third-party libraries called frameworks that we can utilize with our HTML files.\nBootstrap is one of these frameworks that we can use to beautify our HTML and easily perfect design elements such that our pages are more readable.\nBootstrap can be utilized by adding the following link tag in the head of your html file:\n&lt;head&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;title&gt;bootstrap&lt;/title&gt;\n&lt;/head&gt;\n\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;John&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how, when looking at a served version of this page, it’s quite plain.\nNow consider the following HTML that implements the use of Bootstrap:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table class=\"table\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n                    &lt;th scope=\"col\"&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how much prettier this website is now.\nSimilarly, consider the following expansion of our search page created earlier:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates layout with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;div class=\"container-fluid\"&gt;\n\n            &lt;ul class=\"m-3 nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://about.google/\"&gt;About&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://store.google.com/\"&gt;Store&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item ms-auto\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/gmail/\"&gt;Gmail&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/imghp\"&gt;Images&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/intl/en/about/products\"&gt;\n                        &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-grid-3x3-gap-fill\" viewBox=\"0 0 16 16\"&gt;\n                            &lt;path d=\"M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z\"/&gt;\n                        &lt;/svg&gt;\n                    &lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"btn btn-primary\" href=\"https://accounts.google.com/ServiceLogin\" role=\"button\"&gt;Sign in&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;div class=\"text-center\"&gt;\n\n                &lt;!-- https://knowyourmeme.com/memes/happy-cat --&gt;\n                &lt;img alt=\"Happy Cat\" class=\"img-fluid w-25\" src=\"cat.gif\"&gt;\n\n                &lt;form action=\"https://www.google.com/search\" class=\"mt-4\" method=\"get\"&gt;\n                    &lt;input autocomplete=\"off\" autofocus class=\"form-control form-control-lg mb-4 mx-auto w-50\" name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n                    &lt;button class=\"btn btn-light\"&gt;Google Search&lt;/button&gt;\n                    &lt;button class=\"btn btn-light\" name=\"btnI\"&gt;I'm Feeling Lucky&lt;/button&gt;\n                &lt;/form&gt;\n\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis version of the page is exceedingly stylized, thanks to Bootstrap.\nYou can learn more about this in the Bootstrap Documentation.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#javascript",
    "href": "notes/notes_9.html#javascript",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "JavaScript is another programming language that allows for interactivity within web pages.\nConsider the following implementation of hello.html that includes both JavaScript and HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates onsubmit --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            function greet()\n            {\n                alert('hello, ' + document.querySelector('#name').value);\n            }\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form onsubmit=\"greet(); return false;\"&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how this form uses an onsubmit property to trigger a script found at the top of the file. The script uses alert to create an alert pop-up. #name.value goes to the textbox on the page and obtains the value typed by the user.\nGenerally, it’s considered bad design to mix onsubmit and JavaScript. We can advance our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates DOMContentLoaded --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                document.querySelector('form').addEventListener('submit', function(e) {\n                    alert('hello, ' + document.querySelector('#name').value);\n                    e.preventDefault();\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that this version of the code creates an addEventListener to listen to the form submit being triggered. Notice how DOMContentLoaded ensures that the whole page is loaded before executing the JavaScript.\nWe can advance this code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates keyup and template literals --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                let input = document.querySelector('input');\n                input.addEventListener('keyup', function(event) {\n                    let name = document.querySelector('p');\n                    if (input.value) {\n                        name.innerHTML = `hello, ${input.value}`;\n                    }\n                    else {\n                        name.innerHTML = 'hello, whoever you are';\n                    }\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus placeholder=\"Name\" type=\"text\"&gt;\n        &lt;/form&gt;\n        &lt;p&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the DOM is dynamically updated in memory as the user types out a name. If there is a value inside input, upon the keyup on the keyboard, the DOM is updated. Otherwise, default text is presented.\nJavaScript allows you to dynamically read and modify the html document loaded into memory such that the user need not reload to see changes.\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates programmatic changes to style --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;background&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button id=\"red\"&gt;R&lt;/button&gt;\n        &lt;button id=\"green\"&gt;G&lt;/button&gt;\n        &lt;button id=\"blue\"&gt;B&lt;/button&gt;\n        &lt;script&gt;\n\n            let body = document.querySelector('body');\n            document.querySelector('#red').addEventListener('click', function() {\n                body.style.backgroundColor = 'red';\n            });\n            document.querySelector('#green').addEventListener('click', function() {\n                body.style.backgroundColor = 'green';\n            });\n            document.querySelector('#blue').addEventListener('click', function() {\n                body.style.backgroundColor = 'blue';\n            });\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that JavaScript listens for when a specific button is clicked. Upon such a click, certain style attributes on the page are changed. body is defined as the body of the page. Then, an event listener waits for the clicking of one of the buttons. Then, the body.style.backgroundColor is changed.\nSimilarly, consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            // Toggles visibility of greeting\n            function blink()\n            {\n                let body = document.querySelector('body');\n                if (body.style.visibility == 'hidden')\n                {\n                    body.style.visibility = 'visible';\n                }\n                else\n                {\n                    body.style.visibility = 'hidden';\n                }\n            }\n\n            // Blink every 500ms\n            window.setInterval(blink, 500);\n\n        &lt;/script&gt;\n        &lt;title&gt;blink&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, world\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis example blinks a text at a set interval. Notice that window.setInterval takes in two arguments: A function to be called and a waiting period (in milliseconds) between function calls.\nConsider the following implementation of JavaScript that autocompletes text:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;autocomplete&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script src=\"large.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n\n            let input = document.querySelector('input');\n            input.addEventListener('keyup', function(event) {\n                let html = '';\n                if (input.value) {\n                    for (word of WORDS) {\n                        if (word.startsWith(input.value)) {\n                            html += `&lt;li&gt;${word}&lt;/li&gt;`;\n                        }\n                    }\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis is a JavaScript implementation of autocomplete. This pulls from a file (not pictured here) called large.js that is a list of words.\nThe capabilities of JavaScript are many and can be found in the JavaScript Documentation.",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "notes/notes_9.html#summing-up",
    "href": "notes/notes_9.html#summing-up",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "In this lesson, you learned how to create your own HTML files, style them, leverage third-party frameworks, and utilize JavaScript. Specifically, we discussed…\n\nTCP/IP\nDNS\nHTML\nRegular expressions\nCSS\nFrameworks\nJavaScript\n\nSee you next time!",
    "crumbs": [
      "Notes",
      "Notes 09 🌐"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-2.html",
    "href": "tutorials/tutorial-week-2.html",
    "title": "Tutorials week 2",
    "section": "",
    "text": "▶ 👨‍🏫 Command line\n▶ 👨‍🏫 Conditional statements\n▶ 👨‍🏫 Data types\n▶ 👨‍🏫 Loops\n▶ 👨‍🏫 Magic numbers\n▶ 👨‍🏫 Operators",
    "crumbs": [
      "Tutorials",
      "Tutorial 02 🟢"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-4.html",
    "href": "tutorials/tutorial-week-4.html",
    "title": "Tutorials week 4",
    "section": "",
    "text": "▶ 👨‍🏫 Binary search\n▶ 👨‍🏫 Bubble sort\n▶ 👨‍🏫 Call stacks\n▶ 👨‍🏫 Linear search\n▶ 👨‍🏫 Merge sort\n▶ 👨‍🏫 Recursion\n▶ 👨‍🏫 Selection sort",
    "crumbs": [
      "Tutorials",
      "Tutorial 04 🟢"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-6.html",
    "href": "tutorials/tutorial-week-6.html",
    "title": "Tutorials week 6",
    "section": "",
    "text": "▶ 👨‍🏫 Data structures\n▶ 👨‍🏫 Doubly-linked lists\n▶ 👨‍🏫 Hash tables\n▶ 👨‍🏫 Queues\n▶ 👨‍🏫 Singly-linked lists\n▶ 👨‍🏫 Stacks\n▶ 👨‍🏫 Structures\n▶ 👨‍🏫 Tries",
    "crumbs": [
      "Tutorials",
      "Tutorial 06 🟢"
    ]
  },
  {
    "objectID": "tutorials/tutorial-week-8.html",
    "href": "tutorials/tutorial-week-8.html",
    "title": "Tutorials week 8",
    "section": "",
    "text": "▶ 👨‍🏫 SQL",
    "crumbs": [
      "Tutorials",
      "Tutorial 08 📊"
    ]
  },
  {
    "objectID": "module-faq.html#how-do-i-submit-my-homework-assignments-in-github-codespaces",
    "href": "module-faq.html#how-do-i-submit-my-homework-assignments-in-github-codespaces",
    "title": "FAQ",
    "section": "How do I submit my homework assignments in Github Codespaces?",
    "text": "How do I submit my homework assignments in Github Codespaces?",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#can-i-use-a-local-install-of-vs-code-c-python-sqletc.-instead-of-using-the-sandbox-in-github-codespaces",
    "href": "module-faq.html#can-i-use-a-local-install-of-vs-code-c-python-sqletc.-instead-of-using-the-sandbox-in-github-codespaces",
    "title": "FAQ",
    "section": "Can I use a local install of VS Code, C, Python, SQL,etc. instead of using The Sandbox in Github Codespaces?",
    "text": "Can I use a local install of VS Code, C, Python, SQL,etc. instead of using The Sandbox in Github Codespaces?\nThe short answer is, heck yeah! However, installing and configuring all this software on your own computer is sometimes complicated and irritating, even for experienced programmers. Comfiguring all the tools we will be using in The Sandbox to be exactly the same on your own computer, operating system, etc., will require advanced skills. Still you can do it if you want to; most of the tools are open source and free and will work. Also, we are here to help support you if you want to try.\nIf you want to take this path, here is what you need to do:\nFor a start… - Download and install Python (&gt; v3.11): https://www.python.org/downloads/ - Download and install VS Code: https://code.visualstudio.com/download - Install C/C++ in VS Code: https://code.visualstudio.com/docs/languages/cpp - Install Git: https://happygitwithr.com/install-git.html",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#how-do-i-submit-my-homework",
    "href": "module-faq.html#how-do-i-submit-my-homework",
    "title": "FAQ",
    "section": "How do I submit my homework?",
    "text": "How do I submit my homework?",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#can-i-use-vs-code-c-python-sql-etc.-on-my-own-computer",
    "href": "module-faq.html#can-i-use-vs-code-c-python-sql-etc.-on-my-own-computer",
    "title": "FAQ",
    "section": "Can I use VS Code, C, Python, SQL, etc. on my own computer?",
    "text": "Can I use VS Code, C, Python, SQL, etc. on my own computer?\nThe short answer is, heck yeah (but you will still need to use codespaces to submit your work)! However, installing and configuring all this software on your own computer is sometimes complicated and irritating, even for experienced programmers. Comfiguring all the tools we will be using in The Sandbox to be exactly the same on your own computer, operating system, etc., will require advanced skills. Still, you can do it if you want to; most of the tools are open source and free and will work for most tasks. Also, we are here to help support you if you want to try.\nIf you want to explore this path, here are the main things you need to do:\nFor a start…\n\nDownload and install Python (&gt; v3.11): https://www.python.org/downloads/\nDownload and install VS Code: https://code.visualstudio.com/download\nInstall C/C++ in VS Code: https://code.visualstudio.com/docs/languages/cpp\nInstall Git: https://happygitwithr.com/install-git.html",
    "crumbs": [
      "FAQ"
    ]
  }
]
[
  {
    "objectID": "slides/lec-2.html#announcements",
    "href": "slides/lec-2.html#announcements",
    "title": "Simple Linear Regression",
    "section": "Announcements",
    "text": "Announcements\n\nIf you’re just joining the class, welcome! Go to the course website and review content you’ve missed, read the syllabus, and complete the Getting to know you survey.\nLab 1 is due Friday, at 5pm, on Gradescope."
  },
  {
    "objectID": "slides/lec-2.html#dorianne-gray-says",
    "href": "slides/lec-2.html#dorianne-gray-says",
    "title": "Simple Linear Regression",
    "section": "Dorianne Gray says…",
    "text": "Dorianne Gray says…"
  },
  {
    "objectID": "slides/lec-2.html#outline",
    "href": "slides/lec-2.html#outline",
    "title": "Simple Linear Regression",
    "section": "Outline",
    "text": "Outline\n\nUse simple linear regression to describe the relationship between a quantitative predictor and quantitative outcome variable\nEstimate the slope and intercept of the regression line using the least squares method\nInterpret the slope and intercept of the regression line"
  },
  {
    "objectID": "slides/lec-2.html#computational-setup",
    "href": "slides/lec-2.html#computational-setup",
    "title": "Simple Linear Regression",
    "section": "Computational setup",
    "text": "Computational setup\n\n# load packages\nlibrary(tidyverse)       # for data wrangling\nlibrary(tidymodels)      # for modeling\nlibrary(fivethirtyeight) # for the fandango dataset\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))\n\n# set default figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 8,\n  fig.asp = 0.618,\n  fig.retina = 3,\n  dpi = 300,\n  out.width = \"80%\"\n)"
  },
  {
    "objectID": "slides/lec-2.html#movie-ratings",
    "href": "slides/lec-2.html#movie-ratings",
    "title": "Simple Linear Regression",
    "section": "Movie ratings",
    "text": "Movie ratings\n\n\n\nData behind the FiveThirtyEight story Be Suspicious Of Online Movie Ratings, Especially Fandango’s\nIn the fivethirtyeight package: fandango\nContains every film that has at least 30 fan reviews on Fandango, an IMDb score, Rotten Tomatoes critic and user ratings, and Metacritic critic and user scores"
  },
  {
    "objectID": "slides/lec-2.html#data-prep",
    "href": "slides/lec-2.html#data-prep",
    "title": "Simple Linear Regression",
    "section": "Data prep",
    "text": "Data prep\n\nRename Rotten Tomatoes columns as critics and audience\nRename the dataset as movie_scores\n\n\nmovie_scores &lt;- fandango %&gt;%\n  rename(\n    critics = rottentomatoes, \n    audience = rottentomatoes_user\n  )"
  },
  {
    "objectID": "slides/lec-2.html#data-overview",
    "href": "slides/lec-2.html#data-overview",
    "title": "Simple Linear Regression",
    "section": "Data overview",
    "text": "Data overview\n\nglimpse(movie_scores)\n\nRows: 146\nColumns: 23\n$ film                       &lt;chr&gt; \"Avengers: Age of Ultron\", \"Cinderella\", \"A…\n$ year                       &lt;dbl&gt; 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2…\n$ critics                    &lt;int&gt; 74, 85, 80, 18, 14, 63, 42, 86, 99, 89, 84,…\n$ audience                   &lt;int&gt; 86, 80, 90, 84, 28, 62, 53, 64, 82, 87, 77,…\n$ metacritic                 &lt;int&gt; 66, 67, 64, 22, 29, 50, 53, 81, 81, 80, 71,…\n$ metacritic_user            &lt;dbl&gt; 7.1, 7.5, 8.1, 4.7, 3.4, 6.8, 7.6, 6.8, 8.8…\n$ imdb                       &lt;dbl&gt; 7.8, 7.1, 7.8, 5.4, 5.1, 7.2, 6.9, 6.5, 7.4…\n$ fandango_stars             &lt;dbl&gt; 5.0, 5.0, 5.0, 5.0, 3.5, 4.5, 4.0, 4.0, 4.5…\n$ fandango_ratingvalue       &lt;dbl&gt; 4.5, 4.5, 4.5, 4.5, 3.0, 4.0, 3.5, 3.5, 4.0…\n$ rt_norm                    &lt;dbl&gt; 3.70, 4.25, 4.00, 0.90, 0.70, 3.15, 2.10, 4…\n$ rt_user_norm               &lt;dbl&gt; 4.30, 4.00, 4.50, 4.20, 1.40, 3.10, 2.65, 3…\n$ metacritic_norm            &lt;dbl&gt; 3.30, 3.35, 3.20, 1.10, 1.45, 2.50, 2.65, 4…\n$ metacritic_user_nom        &lt;dbl&gt; 3.55, 3.75, 4.05, 2.35, 1.70, 3.40, 3.80, 3…\n$ imdb_norm                  &lt;dbl&gt; 3.90, 3.55, 3.90, 2.70, 2.55, 3.60, 3.45, 3…\n$ rt_norm_round              &lt;dbl&gt; 3.5, 4.5, 4.0, 1.0, 0.5, 3.0, 2.0, 4.5, 5.0…\n$ rt_user_norm_round         &lt;dbl&gt; 4.5, 4.0, 4.5, 4.0, 1.5, 3.0, 2.5, 3.0, 4.0…\n$ metacritic_norm_round      &lt;dbl&gt; 3.5, 3.5, 3.0, 1.0, 1.5, 2.5, 2.5, 4.0, 4.0…\n$ metacritic_user_norm_round &lt;dbl&gt; 3.5, 4.0, 4.0, 2.5, 1.5, 3.5, 4.0, 3.5, 4.5…\n$ imdb_norm_round            &lt;dbl&gt; 4.0, 3.5, 4.0, 2.5, 2.5, 3.5, 3.5, 3.5, 3.5…\n$ metacritic_user_vote_count &lt;int&gt; 1330, 249, 627, 31, 88, 34, 17, 124, 62, 54…\n$ imdb_user_vote_count       &lt;int&gt; 271107, 65709, 103660, 3136, 19560, 39373, …\n$ fandango_votes             &lt;int&gt; 14846, 12640, 12055, 1793, 1021, 397, 252, …\n$ fandango_difference        &lt;dbl&gt; 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5…"
  },
  {
    "objectID": "slides/lec-2.html#data-visualization",
    "href": "slides/lec-2.html#data-visualization",
    "title": "Simple Linear Regression",
    "section": "Data visualization",
    "text": "Data visualization"
  },
  {
    "objectID": "slides/lec-2.html#fit-a-line",
    "href": "slides/lec-2.html#fit-a-line",
    "title": "Simple Linear Regression",
    "section": "Fit a line",
    "text": "Fit a line\n… to describe the relationship between the critics and audience score"
  },
  {
    "objectID": "slides/lec-2.html#terminology",
    "href": "slides/lec-2.html#terminology",
    "title": "Simple Linear Regression",
    "section": "Terminology",
    "text": "Terminology\n\n\n\nOutcome, Y: variable describing the outcome of interest\nPredictor, X: variable used to help understand the variability in the outcome"
  },
  {
    "objectID": "slides/lec-2.html#regression-model-1",
    "href": "slides/lec-2.html#regression-model-1",
    "title": "Simple Linear Regression",
    "section": "Regression model",
    "text": "Regression model\nA regression model is a function that describes the relationship between the outcome, \\(Y\\), and the predictor, \\(X\\).\n\\[\\begin{aligned} Y &= \\color{black}{\\textbf{Model}} + \\text{Error} \\\\[8pt]\n&= \\color{black}{\\mathbf{f(X)}} + \\epsilon \\\\[8pt]\n&= \\color{black}{\\boldsymbol{\\mu_{Y|X}}} + \\epsilon \\end{aligned}\\]"
  },
  {
    "objectID": "slides/lec-2.html#regression-model-2",
    "href": "slides/lec-2.html#regression-model-2",
    "title": "Simple Linear Regression",
    "section": "Regression model",
    "text": "Regression model\n\n\n\\[\n\\begin{aligned} Y &= \\color{purple}{\\textbf{Model}} + \\text{Error} \\\\[8pt]\n&= \\color{purple}{\\mathbf{f(X)}} + \\epsilon \\\\[8pt]\n&= \\color{purple}{\\boldsymbol{\\mu_{Y|X}}} + \\epsilon\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec-2.html#regression-model-residuals",
    "href": "slides/lec-2.html#regression-model-residuals",
    "title": "Simple Linear Regression",
    "section": "Regression model + residuals",
    "text": "Regression model + residuals\n\n\n\\[\\begin{aligned} Y &= \\color{purple}{\\textbf{Model}} + \\color{blue}{\\textbf{Error}} \\\\[8pt]\n&= \\color{purple}{\\mathbf{f(X)}} + \\color{blue}{\\boldsymbol{\\epsilon}} \\\\[8pt]\n&= \\color{purple}{\\boldsymbol{\\mu_{Y|X}}} + \\color{blue}{\\boldsymbol{\\epsilon}} \\\\[8pt]\n\\end{aligned}\\]"
  },
  {
    "objectID": "slides/lec-2.html#simple-linear-regression-1",
    "href": "slides/lec-2.html#simple-linear-regression-1",
    "title": "Simple Linear Regression",
    "section": "Simple linear regression",
    "text": "Simple linear regression\nUse simple linear regression to model the relationthip between a quantitative outcome (\\(Y\\)) and a single quantitative predictor (\\(X\\)): \\[\\Large{Y = \\beta_0 + \\beta_1 X + \\epsilon}\\]\n\n\\(\\beta_1\\): True slope of the relationship between \\(X\\) and \\(Y\\)\n\\(\\beta_0\\): True intercept of the relationship between \\(X\\) and \\(Y\\)\n\\(\\epsilon\\): Error (residual)"
  },
  {
    "objectID": "slides/lec-2.html#simple-linear-regression-2",
    "href": "slides/lec-2.html#simple-linear-regression-2",
    "title": "Simple Linear Regression",
    "section": "Simple linear regression",
    "text": "Simple linear regression\n\\[\\Large{\\hat{Y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 X}\\]\n\n\\(\\hat{\\beta}_1\\): Estimated slope of the relationship between \\(X\\) and \\(Y\\)\n\\(\\hat{\\beta}_0\\): Estimated intercept of the relationship between \\(X\\) and \\(Y\\)\nNo error term!"
  },
  {
    "objectID": "slides/lec-2.html#choosing-values-for-hatbeta_1-and-hatbeta_0",
    "href": "slides/lec-2.html#choosing-values-for-hatbeta_1-and-hatbeta_0",
    "title": "Simple Linear Regression",
    "section": "Choosing values for \\(\\hat{\\beta}_1\\) and \\(\\hat{\\beta}_0\\)",
    "text": "Choosing values for \\(\\hat{\\beta}_1\\) and \\(\\hat{\\beta}_0\\)"
  },
  {
    "objectID": "slides/lec-2.html#residuals",
    "href": "slides/lec-2.html#residuals",
    "title": "Simple Linear Regression",
    "section": "Residuals",
    "text": "Residuals\n\n\\[\\text{residual} = \\text{observed} - \\text{predicted} = y - \\hat{y}\\]"
  },
  {
    "objectID": "slides/lec-2.html#least-squares-line",
    "href": "slides/lec-2.html#least-squares-line",
    "title": "Simple Linear Regression",
    "section": "Least squares line",
    "text": "Least squares line\n\nThe residual for the \\(i^{th}\\) observation is\n\n\\[e_i = \\text{observed} - \\text{predicted} = y_i - \\hat{y}_i\\]\n\nThe sum of squared residuals is\n\n\\[e^2_1 + e^2_2 + \\dots + e^2_n\\]\n\nThe least squares line is the one that minimizes the sum of squared residuals"
  },
  {
    "objectID": "slides/lec-2.html#properties-of-least-squares-regression",
    "href": "slides/lec-2.html#properties-of-least-squares-regression",
    "title": "Simple Linear Regression",
    "section": "Properties of least squares regression",
    "text": "Properties of least squares regression\n\nThe regression line goes through the center of mass point, the coordinates corresponding to average \\(X\\) and average \\(Y\\): \\(\\hat{\\beta}_0 = \\bar{Y} - \\hat{\\beta}_1\\bar{X}\\)\nThe slope has the same sign as the correlation coefficient: \\(\\hat{\\beta}_1 = r \\frac{s_Y}{s_X}\\)\nThe sum of the residuals is zero: \\(\\sum_{i = 1}^n \\epsilon_i = 0\\)\nThe residuals and \\(X\\) values are uncorrelated"
  },
  {
    "objectID": "slides/lec-2.html#estimating-the-slope",
    "href": "slides/lec-2.html#estimating-the-slope",
    "title": "Simple Linear Regression",
    "section": "Estimating the slope",
    "text": "Estimating the slope\n\\[\\large{\\hat{\\beta}_1 = r \\frac{s_Y}{s_X}}\\]\n\n\n\\[\n\\begin{aligned}\ns_X &= 30.1688 \\\\\ns_Y &=  20.0244 \\\\\nr &= 0.7814\n\\end{aligned}\n\\]\n\n\\[\n\\begin{aligned}\n\\hat{\\beta}_1 &= 0.7814 \\times \\frac{20.0244}{30.1688} \\\\\n&= 0.5187\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec-2.html#estimating-the-intercept",
    "href": "slides/lec-2.html#estimating-the-intercept",
    "title": "Simple Linear Regression",
    "section": "Estimating the intercept",
    "text": "Estimating the intercept\n\\[\\large{\\hat{\\beta}_0 = \\bar{Y} - \\hat{\\beta}_1\\bar{X}}\\]\n\n\n\\[\\begin{aligned}\n&\\bar{x} = 60.8493 \\\\\n&\\bar{y} = 63.8767 \\\\\n&\\hat{\\beta}_1 = 0.5187\n\\end{aligned}\\]\n\n\\[\n\\begin{aligned}\\hat{\\beta}_0 &= 63.8767 - 0.5187 \\times 60.8493 \\\\\n&= 32.3142\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec-2.html#interpreting-the-slope",
    "href": "slides/lec-2.html#interpreting-the-slope",
    "title": "Simple Linear Regression",
    "section": "Interpreting the slope",
    "text": "Interpreting the slope\nPoll: The slope of the model for predicting audience score from critics score is 32.3142. Which of the following is the best interpretation of this value?\n\nFor every one point increase in the critics score, the audience score goes up by 0.5187 points, on average.\nFor every one point increase in the critics score, we expect the audience score to be higher by 0.5187 points, on average.\nFor every one point increase in the critics score, the audience score goes up by 0.5187 points.\nFor every one point increase in the audience score, the critics score goes up by 0.5187 points, on average."
  },
  {
    "objectID": "slides/lec-2.html#interpreting-slope-intercept",
    "href": "slides/lec-2.html#interpreting-slope-intercept",
    "title": "Simple Linear Regression",
    "section": "Interpreting slope & intercept",
    "text": "Interpreting slope & intercept\n\\[\\widehat{\\text{audience}} = 32.3142 + 0.5187 \\times \\text{critics}\\]\n\nSlope: For every one point increase in the critics score, we expect the audience score to be higher by 0.5187 points, on average.\nIntercept: If the critics score is 0 points, we expect the audience score to be 32.3142 points."
  },
  {
    "objectID": "slides/lec-2.html#is-the-intercept-meaningful",
    "href": "slides/lec-2.html#is-the-intercept-meaningful",
    "title": "Simple Linear Regression",
    "section": "Is the intercept meaningful?",
    "text": "Is the intercept meaningful?\n✅ The intercept is meaningful in context of the data if\n\nthe predictor can feasibly take values equal to or near zero or\nthe predictor has values near zero in the observed data\n\n\n🛑 Otherwise, it might not be meaningful!"
  },
  {
    "objectID": "slides/lec-2.html#making-a-prediction",
    "href": "slides/lec-2.html#making-a-prediction",
    "title": "Simple Linear Regression",
    "section": "Making a prediction",
    "text": "Making a prediction\nSuppose that a movie has a critics score of 50. According to this model, what is the movie’s predicted audience score?\n\\[\n\\begin{aligned}\n\\widehat{\\text{audience}} &= 32.3142 + 0.5187 \\times \\text{critics} \\\\\n&= 32.3142 + 0.5187 \\times 50 \\\\\n&= 58.2492\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec-2.html#extrapolation",
    "href": "slides/lec-2.html#extrapolation",
    "title": "Simple Linear Regression",
    "section": "Extrapolation",
    "text": "Extrapolation\nSuppose that a movie has a critics score of 0. According to this model, what is the movie’s predicted audience score?"
  },
  {
    "objectID": "slides/lec-2.html#recap-1",
    "href": "slides/lec-2.html#recap-1",
    "title": "Simple Linear Regression",
    "section": "Recap",
    "text": "Recap\n\nUsed simple linear regression to describe the relationship between a quantitative predictor and quantitative outcome variable.\nUsed the least squares method to estimate the slope and intercept.å\nWe interpreted the slope and intercept.\n\nSlope: For every one unit increase in \\(x\\), we expect y to be higher/lower by \\(\\hat{\\beta}_1\\) units, on average.\nIntercept: If \\(x\\) is 0, then we expect \\(y\\) to be \\(\\hat{\\beta}_0\\) units.\n\nPredicted the response given a value of the predictor variable.\nDefined extrapolation and why we should avoid it."
  },
  {
    "objectID": "slides/lab-1.html#what-to-expect-in-lab",
    "href": "slides/lab-1.html#what-to-expect-in-lab",
    "title": "Lab 1 - Meet the toolkit",
    "section": "What to expect in lab",
    "text": "What to expect in lab\n\nIntroduction to the lab assignment (~ 5 - 10 minutes)\nWork on the lab assignment (individual at first, but in teams for the rest of the semester)\nLab instructions posted on the course website.\nStart each lab by finding your assignment repo in the course GitHub organization\n\nThis is where you will find the Quarto document and data to get started"
  },
  {
    "objectID": "slides/lab-1.html#tips",
    "href": "slides/lab-1.html#tips",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Tips",
    "text": "Tips\n\nYou do not have to finish the lab in class, they will always be due the following Friday at 5:00 pm. One work strategy is to get through portions that you think will be most challenging (which initially might be the coding component) during lab when a TA can help you on the spot and leave the narrative writing until later.\nWhen working in teams (later in the semester) do not pressure each other to finish early; use the time wisely to really learn the material and produce a quality report."
  },
  {
    "objectID": "slides/lab-1.html#check-do-you-have-the-lab-1-repo",
    "href": "slides/lab-1.html#check-do-you-have-the-lab-1-repo",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Check: Do you have the lab-1 repo?",
    "text": "Check: Do you have the lab-1 repo?\n\nGo to the GitHub course organization: https://github.com/sta210-s22\nYou should see a repo with the prefix lab-1- followed by your GitHub username\nIf you do not have this repo, please let your TAs know!"
  },
  {
    "objectID": "slides/lab-1.html#demo",
    "href": "slides/lab-1.html#demo",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Demo",
    "text": "Demo\nFollow along as your TA demonstrates the following:\n\nConfigure Git using SSH\nClone RStudio repo and start new project\nRender document and produce PDF\nUpdate name in YAML\n\nRender, commit, push changes to GitHub\nSee updates in your GitHub repo"
  },
  {
    "objectID": "slides/lab-1.html#when-youre-done-with-lab",
    "href": "slides/lab-1.html#when-youre-done-with-lab",
    "title": "Lab 1 - Meet the toolkit",
    "section": "When you’re done with lab",
    "text": "When you’re done with lab\n\nMake sure all your final changes have been pushed to your GitHub repo\nSubmit the PDF of your responses to Gradescope\n\nYou can access Gradescope through Sakai or the course website\nLogin using your Duke NetID credentials"
  },
  {
    "objectID": "slides/lab-1.html#youre-now-ready-to-complete-the-rest-of-lab",
    "href": "slides/lab-1.html#youre-now-ready-to-complete-the-rest-of-lab",
    "title": "Lab 1 - Meet the toolkit",
    "section": "You’re now ready to complete the rest of lab!",
    "text": "You’re now ready to complete the rest of lab!\nPlease “raise your hand” if you need help as you work on the lab"
  },
  {
    "objectID": "notes/notes_8.html",
    "href": "notes/notes_8.html",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Welcome!\nFlat-File Database\nRelational Databases\nSELECT\nINSERT\nDELETE\nUPDATE\nIMDb\nJOINs\nIndexes\nUsing SQL in Python\nRace Conditions\nSQL Injection Attacks\nSumming Up\n\n\n\n\nIn previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. However, we introduced this new language not for the purpose of learning “just another language.” Instead, we do so because some tools are better for some jobs and not so great for others!\nThis week, we will be continuing more syntax related to Python.\nFurther, we will be integrating this knowledge with data.\nFinally, we will be discussing SQL or Structured Query Language, a domain-specific way by which we can interact with and modify data.\nOverall, one of the goals of this course is to learn to program generally – not simply how to program in the languages described in this course.\n\n\n\n\n\nAs you have likely seen before, data can often be described in patterns of columns and rows.\nSpreadsheets like those created in Microsoft Excel and Google Sheets can be outputted to a csv or comma-separated values file.\nIf you look at a csv file, you’ll notice that the file is flat in that all of our data is stored in a single table represented by a text file. We call this form of data a flat-file database.\nAll data is stored row by row. Each column is separated by a comma or another value.\nPython comes with native support for csv files.\nFirst, download favorites.csv and upload it to your file explorer inside cs50.dev. Second, examining this data, notice that the first row is special in that it defines each column. Then, each record is stored row by row.\nIn your terminal window, type code favorites.py and write code as follows:\n# Prints all favorites in CSV using csv.reader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[1])\n\nNotice that the csv library is imported. Further, we created a reader that will hold the result of csv.reader(file). The csv.reader function reads each row from the file, and in our code, we store the results in reader. print(row[1]), therefore, will print the language from the favorites.csv file.\nYou can improve your code as follows:\n# Stores favorite in a variable\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[1]\n        print(favorite)\n\nNotice that favorite is stored and then printed. Also, notice that we use the next function to skip to the next line of our reader.\nOne of the disadvantages of the above approach is that we are trusting that row[1] is always the favorite. However, what would happen if the columns had been moved around?\nWe can fix this potential issue. Python also allows you to index by the keys of a list. Modify your code as follows:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[\"language\"]\n        print(favorite)\n\nNotice that this example directly utilizes the language key in the print statement. favorite indexes into the reader dictionary of row[\"language\"].\nThis could be further simplified to:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[\"language\"])\n\nTo count the number of favorite languages expressed in the csv file, we can do the following:\n# Counts favorites using variables\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    scratch, c, python = 0, 0, 0\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite == \"Scratch\":\n            scratch += 1\n        elif favorite == \"C\":\n            c += 1\n        elif favorite == \"Python\":\n            python += 1\n\n# Print counts\nprint(f\"Scratch: {scratch}\")\nprint(f\"C: {c}\")\nprint(f\"Python: {python}\")\n\nNotice that each language is counted using if statements. Further, notice the double equal == signs in those if statements.\nPython allows us to use a dictionary to count the counts of each language. Consider the following improvement upon our code:\n# Counts favorites using dictionary\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in counts:\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice that the value in counts with the key favorite is incremented when it exists already. If it does not exist, we define counts[favorite] and set it to 1. Further, the formatted string has been improved to present the counts[favorite].\nPython also allows sorting counts. Improve your code as follows:\n# Sorts favorites by key\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the sorted(counts) at the bottom of the code.\nIf you look at the parameters for the sorted function in the Python documentation, you will find it has many built-in parameters. You can leverage some of these built-in parameters as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=counts.get, reverse=True):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the arguments passed to sorted. The key argument allows you to tell Python the method you wish to use to sort items. In this case counts.get is used to sort by the values. reverse=True tells sorted to sort from largest to smallest.\nPython has numerous libraries that we can utilize in our code. One of these libraries is collections, from which we can import Counter. Counter will allow you to access the counts of each language without the headaches of all the if statements seen in our previous code. You can implement as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\nfrom collections import Counter\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = Counter()\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        counts[favorite] += 1\n\n# Print counts\nfor favorite, count in counts.most_common():\n    print(f\"{favorite}: {count}\")\n\nNotice how counts = Counter() enables the use of this imported Counter class from collections.\nYou can learn more about sorted in the Python Documentation.\n\n\n\n\n\nGoogle, X, and Meta all use relational databases to store their information at scale.\nRelational databases store data in rows and columns in structures called tables.\nSQL allows for four types of commands:\n  Create\n  Read\n  Update\n  Delete\n\nThese four operations are affectionately called CRUD.\nWe can create a database with the SQL syntax CREATE TABLE table (column type, ...);. But where do you run this command?\nsqlite3 is a type of SQL database that has the core features required for this course.\nWe can create a SQL database at the terminal by typing sqlite3 favorites.db. Upon being prompted, we will agree that we want to create favorites.db by pressing y.\nYou will notice a different prompt as we are now using a program called sqlite.\nWe can put sqlite into csv mode by typing .mode csv. Then, we can import our data from our csv file by typing .import favorites.csv favorites. It seems that nothing has happened!\nWe can type .schema to see the structure of the database.\nYou can read items from a table using the syntax SELECT columns FROM table.\nFor example, you can type SELECT * FROM favorites; which will print every row in favorites.\nYou can get a subset of the data using the command SELECT language FROM favorites;.\nSQL supports many commands to access data, including:\n  AVG\n  COUNT\n  DISTINCT\n  LOWER\n  MAX\n  MIN\n  UPPER\n\nFor example, you can type SELECT COUNT(*) FROM favorites;. Further, you can type SELECT DISTINCT language FROM favorites; to get a list of the individual languages within the database. You could even type SELECT COUNT(DISTINCT language) FROM favorites; to get a count of those.\nSQL offers additional commands we can utilize in our queries:\n  WHERE       -- adding a Boolean expression to filter our data\n  LIKE        -- filtering responses more loosely\n  ORDER BY    -- ordering responses\n  LIMIT       -- limiting the number of responses\n  GROUP BY    -- grouping responses together\n\nNotice that we use -- to write a comment in SQL.\n\n\n\n\n\nFor example, we can execute SELECT COUNT(*) FROM favorites WHERE language = 'C';. A count is presented.\nFurther, we could type SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Hello, World';. Notice how the AND is utilized to narrow our results.\nSimilarly, we could execute SELECT language, COUNT(*) FROM favorites GROUP BY language;. This would offer a temporary table that would show the language and count.\nWe could improve this by typing SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);. This will order the resulting table by the count.\nLikewise, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND (problem = 'Hello, World' OR problem = 'Hello, It''s Me');. Do notice that there are two '' marks as to allow the use of single quotes in a way that does not confuse SQL.\nFurther, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem LIKE 'Hello, %'; to find any problems that start with Hello, (including a space).\nWe can also group the values of each language by executing SELECT language, COUNT(*) FROM favorites GROUP BY language;.\nWe can order the output as follows: SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC;.\nWe can even create aliases, like variables in our queries: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC;.\nFinally, we can limit our output to 1 or more values: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC LIMIT 1;.\n\n\n\n\n\nWe can also INSERT into a SQL database utilizing the form INSERT INTO table (column...) VALUES(value, ...);.\nWe can execute INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');.\nYou can verify the addition of this favorite by executing SELECT * FROM favorites;.\n\n\n\n\n\nDELETE allows you to delete parts of your data. For example, you could DELETE FROM favorites WHERE Timestamp IS NULL;. This deletes any record where the Timestamp is NULL.\n\n\n\n\n\nWe can also utilize the UPDATE command to update your data.\nFor example, you can execute UPDATE favorites SET language = 'SQL', problem = 'Fiftyville';. This will result in overwriting all previous statements where C and Scratch were the favorite programming language.\nNotice that these queries have immense power. Accordingly, in the real-world setting, you should consider who has permissions to execute certain commands and if you have backups available!\n\n\n\n\n\nWe can imagine a database that we might want to create to catalog various TV shows. We could create a spreadsheet with columns like title, star, star, star, star, and more stars. A problem with this approach is that it has a lot of wasted space. Some shows may have one star. Others may have dozens.\nWe could separate our database into multiple sheets. We could have a shows sheet, a stars sheet, and a people sheet. On the people sheet, each person could have a unique id. On the shows sheet, each show could have a unique id too. On a third sheet called stars we could relate how each show has people for each show by having a show_id and person_id. While this is an improvement, this is not an ideal database.\nIMDb offers a database of people, shows, writers, stars, genres, and ratings. Each of these tables is related to one another as follows:\n\n\n\nsix boxes that represent various sql tables arrows are drawn to each showing their many relationships with one another\n\n\nAfter downloading shows.db, you can execute sqlite3 shows.db in your terminal window.\nLet’s zero in on the relationship between two tables within the database called shows and ratings. The relationship between these two tables can be illustrated as follows:\n\n\n\ntwo boxes one called shows and the other called ratings\n\n\nTo illustrate the relationship between these tables, we could execute the following command: SELECT * FROM ratings LIMIT 10;. Examining the output, we could execute SELECT * FROM shows LIMIT 10;.\nExamining shows and rating, we can see these have a one-to-one relationship: One show has one rating.\nTo understand the database, upon executing .schema you will find not only each of the tables but the individual fields inside each of these fields.\nMore specifically, you could execute .schema shows to understand the fields inside shows. You can also execute .schema ratings to see the fields inside ratings.\nAs you can see, show_id exists in all of the tables. In the shows table, it is simply called id. This common field between all the fields is called a key. Primary keys are used to identify a unique record in a table. Foreign keys are used to build relationships between tables by pointing to the primary key in another table. You can see in the schema of ratings that show_id is a foreign key that references id in shows.\nBy storing data in a relational database, as above, data can be more efficiently stored.\nIn sqlite, we have five data types, including:\n  BLOB       -- binary large objects that are groups of ones and zeros\n  INTEGER    -- an integer\n  NUMERIC    -- for numbers that are formatted specially like dates\n  REAL       -- like a float\n  TEXT       -- for strings and the like\n\nAdditionally, columns can be set to add special constraints:\n  NOT NULL\n  UNIQUE\n\nWe can further play with this data to understand these relationships. Execute SELECT * FROM ratings;. There are a lot of ratings!\nWe can further limit this data down by executing SELECT show_id FROM ratings WHERE rating &gt;= 6.0 LIMIT 10;. From this query, you can see that there are 10 shows presented. However, we don’t know what show each show_id represents.\nYou can discover what shows these are by executing SELECT * FROM shows WHERE id = 626124;\nWe can further our query to be more efficient by executing:\nSELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM ratings\n    WHERE rating &gt;= 6.0\n    LIMIT 10\n)\n\nNotice that this query nests together two queries. An inner query is used by an outer query.\n\n\n\n\n\nWe are pulling data from shows and ratings. Notice how both shows and ratings have an id in common.\nHow could we combine tables temporarily? Tables could be joined together using the JOIN command.\nExecute the following command:\nSELECT * FROM shows\n  JOIN ratings on shows.id = ratings.show_id\n  WHERE rating &gt;= 6.0\n  LIMIT 10;\n\nNotice this results in a wider table than we have previously seen.\nWhere the previous queries have illustrated the one-to-one relationship between these keys, let’s examine some one-to-many relationships. Focusing on the genres table, execute the following:\nSELECT * FROM genres\nLIMIT 10;\n\nNotice how this provides us a sense of the raw data. You might notice that one show has three values. This is a one-to-many relationship.\nWe can learn more about the genres table by typing .schema genres.\nExecute the following command to learn more about the various comedies in the database:\nSELECT title FROM shows\nWHERE id IN (\n  SELECT show_id FROM genres\n  WHERE genre = 'Comedy'\n  LIMIT 10\n);\n\nNotice how this produces a list of comedies, including Catweazle.\nTo learn more about Catweazle, by joining various tables through a join:\nSELECT * FROM shows\nJOIN genres\nON shows.id = genres.show_id\nWHERE id = 63881;\n\nNotice that this results in a temporary table. It is fine to have a duplicate table.\nIn contrast to one-to-one and one-to-many relationships, there may be many-to-many relationships.\nWe can learn more about the show The Office and the actors in that show by executing the following command:\nSELECT name FROM people WHERE id IN \n    (SELECT person_id FROM stars WHERE show_id = \n        (SELECT id FROM shows WHERE title = 'The Office' AND year = 2005));\n\nNotice that this results in a table that includes the names of various stars through nested queries.\nWe find all the shows in which Steve Carell starred:\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nThis results in a list of titles of shows wherein Steve Carell starred.\nThis could also be expressed in this way:\nSELECT title FROM shows, stars, people \nWHERE shows.id = stars.show_id\nAND people.id = stars.person_id\nAND name = 'Steve Carell';\n\nThe wildcard % operator can be used to find all people whose names start with Steve C one could employ the syntax SELECT * FROM people WHERE name LIKE 'Steve C%';.\n\n\n\n\n\nWhile relational databases have the ability to be faster and more robust than utilizing a CSV file, data can be optimized within a table using indexes.\nIndexes can be utilized to speed up our queries.\nWe can track the speed of our queries by executing .timer on in sqlite3.\nTo understand how indexes can speed up our queries, run the following: SELECT * FROM shows WHERE title = 'The Office'; Notice the time that displays after the query executes.\nThen, we can create an index with the syntax CREATE INDEX title_index ON shows (title);. This tells sqlite3 to create an index and perform some special under-the-hood optimization relating to this column title.\nThis will create a data structure called a B Tree, a data structure that looks similar to a binary tree. However, unlike a binary tree, there can be more than two child nodes.\n\n\n\none node at the top from which come four children and below that there are three children coming from one of the nodes and two from another two from another and three from another\n\n\nFurther, we can create indexes as follows:\nCREATE INDEX name_index ON people (name);\nCREATE INDEX person_index ON stars (person_id);\n\nRunning the query and you will notice that the query runs much more quickly!\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nUnfortunately, indexing all columns would result in utilizing more storage space. Therefore, there is a tradeoff for enhanced speed.\n\n\n\n\n\nTo assist in working with SQL in this course, the CS50 Library can be utilized as follows in your code:\nfrom cs50 import SQL\n\nSimilar to previous uses of the CS50 Library, this library will assist with the complicated steps of utilizing SQL within your Python code.\nYou can read more about the CS50 Library’s SQL functionality in the documentation.\nUsing our new knowledge of SQL, we can now leverage Python alongside.\nModify your code for favorites.py as follows:\n# Searches database popularity of a problem\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL(\"sqlite:///favorites.db\")\n\n# Prompt user for favorite\nfavorite = input(\"Favorite: \")\n\n# Search for title\nrows = db.execute(\"SELECT COUNT(*) AS n FROM favorites WHERE language = ?\", favorite)\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row[\"n\"])\n\nNotice that db = SQL(\"sqlite:///favorites.db\") provides Python the location of the database file. Then, the line that begins with rows executes SQL commands utilizing db.execute. Indeed, this command passes the syntax within the quotation marks to the db.execute function. We can issue any SQL command using this syntax. Further, notice that rows is returned as a list of dictionaries. In this case, there is only one result, one row, returned to the rows list as a dictionary.\n\n\n\n\n\nUtilization of SQL can sometimes result in some problems.\nYou can imagine a case where multiple users could be accessing the same database and executing commands at the same time.\nThis could result in glitches where code is interrupted by other people’s actions. This could result in a loss of data.\nBuilt-in SQL features such as BEGIN TRANSACTION, COMMIT, and ROLLBACK help avoid some of these race condition problems.\n\n\n\n\n\nNow, still considering the code above, you might be wondering what the ? question marks do above. One of the problems that can arise in real-world applications of SQL is what is called an injection attack. An injection attack is where a malicious actor could input malicious SQL code.\nFor example, consider a login screen as follows:\n\n\n\nharvard key login screen with username and password fields\n\n\nWithout the proper protections in our own code, a bad actor could run malicious code. Consider the following:\nrows = db.execute(\"SELECT COUNT(*) FROM users WHERE username = ? AND password = ?\", username, password)\n\nNotice that because the ? is in place, validation can be run on favorite before it is blindly accepted by the query.\nYou never want to utilize formatted strings in queries as above or blindly trust the user’s input.\nUtilizing the CS50 Library, the library will sanitize and remove any potentially malicious characters.\n\n\n\n\nIn this lesson, you learned more syntax related to Python. Further, you learned how to integrate this knowledge with data in the form of flat-file and relational databases. Finally, you learned about SQL. Specifically, we discussed…\n\nFlat-file databases\nRelational databases\nSQL commands such as SELECT, CREATE, INSERT, DELETE, and UPDATE.\nPrimary and foreign keys\nJOINs\nIndexes\nUsing SQL in Python\nRace conditions\nSQL injection attacks\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_8.html#welcome",
    "href": "notes/notes_8.html#welcome",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "In previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. However, we introduced this new language not for the purpose of learning “just another language.” Instead, we do so because some tools are better for some jobs and not so great for others!\nThis week, we will be continuing more syntax related to Python.\nFurther, we will be integrating this knowledge with data.\nFinally, we will be discussing SQL or Structured Query Language, a domain-specific way by which we can interact with and modify data.\nOverall, one of the goals of this course is to learn to program generally – not simply how to program in the languages described in this course."
  },
  {
    "objectID": "notes/notes_8.html#flat-file-database",
    "href": "notes/notes_8.html#flat-file-database",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "As you have likely seen before, data can often be described in patterns of columns and rows.\nSpreadsheets like those created in Microsoft Excel and Google Sheets can be outputted to a csv or comma-separated values file.\nIf you look at a csv file, you’ll notice that the file is flat in that all of our data is stored in a single table represented by a text file. We call this form of data a flat-file database.\nAll data is stored row by row. Each column is separated by a comma or another value.\nPython comes with native support for csv files.\nFirst, download favorites.csv and upload it to your file explorer inside cs50.dev. Second, examining this data, notice that the first row is special in that it defines each column. Then, each record is stored row by row.\nIn your terminal window, type code favorites.py and write code as follows:\n# Prints all favorites in CSV using csv.reader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[1])\n\nNotice that the csv library is imported. Further, we created a reader that will hold the result of csv.reader(file). The csv.reader function reads each row from the file, and in our code, we store the results in reader. print(row[1]), therefore, will print the language from the favorites.csv file.\nYou can improve your code as follows:\n# Stores favorite in a variable\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create reader\n    reader = csv.reader(file)\n\n    # Skip header row\n    next(reader)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[1]\n        print(favorite)\n\nNotice that favorite is stored and then printed. Also, notice that we use the next function to skip to the next line of our reader.\nOne of the disadvantages of the above approach is that we are trusting that row[1] is always the favorite. However, what would happen if the columns had been moved around?\nWe can fix this potential issue. Python also allows you to index by the keys of a list. Modify your code as follows:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        favorite = row[\"language\"]\n        print(favorite)\n\nNotice that this example directly utilizes the language key in the print statement. favorite indexes into the reader dictionary of row[\"language\"].\nThis could be further simplified to:\n# Prints all favorites in CSV using csv.DictReader\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Iterate over CSV file, printing each favorite\n    for row in reader:\n        print(row[\"language\"])\n\nTo count the number of favorite languages expressed in the csv file, we can do the following:\n# Counts favorites using variables\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    scratch, c, python = 0, 0, 0\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite == \"Scratch\":\n            scratch += 1\n        elif favorite == \"C\":\n            c += 1\n        elif favorite == \"Python\":\n            python += 1\n\n# Print counts\nprint(f\"Scratch: {scratch}\")\nprint(f\"C: {c}\")\nprint(f\"Python: {python}\")\n\nNotice that each language is counted using if statements. Further, notice the double equal == signs in those if statements.\nPython allows us to use a dictionary to count the counts of each language. Consider the following improvement upon our code:\n# Counts favorites using dictionary\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in counts:\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice that the value in counts with the key favorite is incremented when it exists already. If it does not exist, we define counts[favorite] and set it to 1. Further, the formatted string has been improved to present the counts[favorite].\nPython also allows sorting counts. Improve your code as follows:\n# Sorts favorites by key\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the sorted(counts) at the bottom of the code.\nIf you look at the parameters for the sorted function in the Python documentation, you will find it has many built-in parameters. You can leverage some of these built-in parameters as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = {}\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        if favorite in counts:\n            counts[favorite] += 1\n        else:\n            counts[favorite] = 1\n\n# Print counts\nfor favorite in sorted(counts, key=counts.get, reverse=True):\n    print(f\"{favorite}: {counts[favorite]}\")\n\nNotice the arguments passed to sorted. The key argument allows you to tell Python the method you wish to use to sort items. In this case counts.get is used to sort by the values. reverse=True tells sorted to sort from largest to smallest.\nPython has numerous libraries that we can utilize in our code. One of these libraries is collections, from which we can import Counter. Counter will allow you to access the counts of each language without the headaches of all the if statements seen in our previous code. You can implement as follows:\n# Sorts favorites by value using .get\n\nimport csv\n\nfrom collections import Counter\n\n# Open CSV file\nwith open(\"favorites.csv\", \"r\") as file:\n\n    # Create DictReader\n    reader = csv.DictReader(file)\n\n    # Counts\n    counts = Counter()\n\n    # Iterate over CSV file, counting favorites\n    for row in reader:\n        favorite = row[\"language\"]\n        counts[favorite] += 1\n\n# Print counts\nfor favorite, count in counts.most_common():\n    print(f\"{favorite}: {count}\")\n\nNotice how counts = Counter() enables the use of this imported Counter class from collections.\nYou can learn more about sorted in the Python Documentation."
  },
  {
    "objectID": "notes/notes_8.html#relational-databases",
    "href": "notes/notes_8.html#relational-databases",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Google, X, and Meta all use relational databases to store their information at scale.\nRelational databases store data in rows and columns in structures called tables.\nSQL allows for four types of commands:\n  Create\n  Read\n  Update\n  Delete\n\nThese four operations are affectionately called CRUD.\nWe can create a database with the SQL syntax CREATE TABLE table (column type, ...);. But where do you run this command?\nsqlite3 is a type of SQL database that has the core features required for this course.\nWe can create a SQL database at the terminal by typing sqlite3 favorites.db. Upon being prompted, we will agree that we want to create favorites.db by pressing y.\nYou will notice a different prompt as we are now using a program called sqlite.\nWe can put sqlite into csv mode by typing .mode csv. Then, we can import our data from our csv file by typing .import favorites.csv favorites. It seems that nothing has happened!\nWe can type .schema to see the structure of the database.\nYou can read items from a table using the syntax SELECT columns FROM table.\nFor example, you can type SELECT * FROM favorites; which will print every row in favorites.\nYou can get a subset of the data using the command SELECT language FROM favorites;.\nSQL supports many commands to access data, including:\n  AVG\n  COUNT\n  DISTINCT\n  LOWER\n  MAX\n  MIN\n  UPPER\n\nFor example, you can type SELECT COUNT(*) FROM favorites;. Further, you can type SELECT DISTINCT language FROM favorites; to get a list of the individual languages within the database. You could even type SELECT COUNT(DISTINCT language) FROM favorites; to get a count of those.\nSQL offers additional commands we can utilize in our queries:\n  WHERE       -- adding a Boolean expression to filter our data\n  LIKE        -- filtering responses more loosely\n  ORDER BY    -- ordering responses\n  LIMIT       -- limiting the number of responses\n  GROUP BY    -- grouping responses together\n\nNotice that we use -- to write a comment in SQL."
  },
  {
    "objectID": "notes/notes_8.html#select",
    "href": "notes/notes_8.html#select",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "For example, we can execute SELECT COUNT(*) FROM favorites WHERE language = 'C';. A count is presented.\nFurther, we could type SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem = 'Hello, World';. Notice how the AND is utilized to narrow our results.\nSimilarly, we could execute SELECT language, COUNT(*) FROM favorites GROUP BY language;. This would offer a temporary table that would show the language and count.\nWe could improve this by typing SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*);. This will order the resulting table by the count.\nLikewise, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND (problem = 'Hello, World' OR problem = 'Hello, It''s Me');. Do notice that there are two '' marks as to allow the use of single quotes in a way that does not confuse SQL.\nFurther, we could execute SELECT COUNT(*) FROM favorites WHERE language = 'C' AND problem LIKE 'Hello, %'; to find any problems that start with Hello, (including a space).\nWe can also group the values of each language by executing SELECT language, COUNT(*) FROM favorites GROUP BY language;.\nWe can order the output as follows: SELECT language, COUNT(*) FROM favorites GROUP BY language ORDER BY COUNT(*) DESC;.\nWe can even create aliases, like variables in our queries: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC;.\nFinally, we can limit our output to 1 or more values: SELECT language, COUNT(*) AS n FROM favorites GROUP BY language ORDER BY n DESC LIMIT 1;."
  },
  {
    "objectID": "notes/notes_8.html#insert",
    "href": "notes/notes_8.html#insert",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can also INSERT into a SQL database utilizing the form INSERT INTO table (column...) VALUES(value, ...);.\nWe can execute INSERT INTO favorites (language, problem) VALUES ('SQL', 'Fiftyville');.\nYou can verify the addition of this favorite by executing SELECT * FROM favorites;."
  },
  {
    "objectID": "notes/notes_8.html#delete",
    "href": "notes/notes_8.html#delete",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "DELETE allows you to delete parts of your data. For example, you could DELETE FROM favorites WHERE Timestamp IS NULL;. This deletes any record where the Timestamp is NULL."
  },
  {
    "objectID": "notes/notes_8.html#update",
    "href": "notes/notes_8.html#update",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can also utilize the UPDATE command to update your data.\nFor example, you can execute UPDATE favorites SET language = 'SQL', problem = 'Fiftyville';. This will result in overwriting all previous statements where C and Scratch were the favorite programming language.\nNotice that these queries have immense power. Accordingly, in the real-world setting, you should consider who has permissions to execute certain commands and if you have backups available!"
  },
  {
    "objectID": "notes/notes_8.html#imdb",
    "href": "notes/notes_8.html#imdb",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We can imagine a database that we might want to create to catalog various TV shows. We could create a spreadsheet with columns like title, star, star, star, star, and more stars. A problem with this approach is that it has a lot of wasted space. Some shows may have one star. Others may have dozens.\nWe could separate our database into multiple sheets. We could have a shows sheet, a stars sheet, and a people sheet. On the people sheet, each person could have a unique id. On the shows sheet, each show could have a unique id too. On a third sheet called stars we could relate how each show has people for each show by having a show_id and person_id. While this is an improvement, this is not an ideal database.\nIMDb offers a database of people, shows, writers, stars, genres, and ratings. Each of these tables is related to one another as follows:\n\n\n\nsix boxes that represent various sql tables arrows are drawn to each showing their many relationships with one another\n\n\nAfter downloading shows.db, you can execute sqlite3 shows.db in your terminal window.\nLet’s zero in on the relationship between two tables within the database called shows and ratings. The relationship between these two tables can be illustrated as follows:\n\n\n\ntwo boxes one called shows and the other called ratings\n\n\nTo illustrate the relationship between these tables, we could execute the following command: SELECT * FROM ratings LIMIT 10;. Examining the output, we could execute SELECT * FROM shows LIMIT 10;.\nExamining shows and rating, we can see these have a one-to-one relationship: One show has one rating.\nTo understand the database, upon executing .schema you will find not only each of the tables but the individual fields inside each of these fields.\nMore specifically, you could execute .schema shows to understand the fields inside shows. You can also execute .schema ratings to see the fields inside ratings.\nAs you can see, show_id exists in all of the tables. In the shows table, it is simply called id. This common field between all the fields is called a key. Primary keys are used to identify a unique record in a table. Foreign keys are used to build relationships between tables by pointing to the primary key in another table. You can see in the schema of ratings that show_id is a foreign key that references id in shows.\nBy storing data in a relational database, as above, data can be more efficiently stored.\nIn sqlite, we have five data types, including:\n  BLOB       -- binary large objects that are groups of ones and zeros\n  INTEGER    -- an integer\n  NUMERIC    -- for numbers that are formatted specially like dates\n  REAL       -- like a float\n  TEXT       -- for strings and the like\n\nAdditionally, columns can be set to add special constraints:\n  NOT NULL\n  UNIQUE\n\nWe can further play with this data to understand these relationships. Execute SELECT * FROM ratings;. There are a lot of ratings!\nWe can further limit this data down by executing SELECT show_id FROM ratings WHERE rating &gt;= 6.0 LIMIT 10;. From this query, you can see that there are 10 shows presented. However, we don’t know what show each show_id represents.\nYou can discover what shows these are by executing SELECT * FROM shows WHERE id = 626124;\nWe can further our query to be more efficient by executing:\nSELECT title\nFROM shows\nWHERE id IN (\n    SELECT show_id\n    FROM ratings\n    WHERE rating &gt;= 6.0\n    LIMIT 10\n)\n\nNotice that this query nests together two queries. An inner query is used by an outer query."
  },
  {
    "objectID": "notes/notes_8.html#joins",
    "href": "notes/notes_8.html#joins",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "We are pulling data from shows and ratings. Notice how both shows and ratings have an id in common.\nHow could we combine tables temporarily? Tables could be joined together using the JOIN command.\nExecute the following command:\nSELECT * FROM shows\n  JOIN ratings on shows.id = ratings.show_id\n  WHERE rating &gt;= 6.0\n  LIMIT 10;\n\nNotice this results in a wider table than we have previously seen.\nWhere the previous queries have illustrated the one-to-one relationship between these keys, let’s examine some one-to-many relationships. Focusing on the genres table, execute the following:\nSELECT * FROM genres\nLIMIT 10;\n\nNotice how this provides us a sense of the raw data. You might notice that one show has three values. This is a one-to-many relationship.\nWe can learn more about the genres table by typing .schema genres.\nExecute the following command to learn more about the various comedies in the database:\nSELECT title FROM shows\nWHERE id IN (\n  SELECT show_id FROM genres\n  WHERE genre = 'Comedy'\n  LIMIT 10\n);\n\nNotice how this produces a list of comedies, including Catweazle.\nTo learn more about Catweazle, by joining various tables through a join:\nSELECT * FROM shows\nJOIN genres\nON shows.id = genres.show_id\nWHERE id = 63881;\n\nNotice that this results in a temporary table. It is fine to have a duplicate table.\nIn contrast to one-to-one and one-to-many relationships, there may be many-to-many relationships.\nWe can learn more about the show The Office and the actors in that show by executing the following command:\nSELECT name FROM people WHERE id IN \n    (SELECT person_id FROM stars WHERE show_id = \n        (SELECT id FROM shows WHERE title = 'The Office' AND year = 2005));\n\nNotice that this results in a table that includes the names of various stars through nested queries.\nWe find all the shows in which Steve Carell starred:\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nThis results in a list of titles of shows wherein Steve Carell starred.\nThis could also be expressed in this way:\nSELECT title FROM shows, stars, people \nWHERE shows.id = stars.show_id\nAND people.id = stars.person_id\nAND name = 'Steve Carell';\n\nThe wildcard % operator can be used to find all people whose names start with Steve C one could employ the syntax SELECT * FROM people WHERE name LIKE 'Steve C%';."
  },
  {
    "objectID": "notes/notes_8.html#indexes",
    "href": "notes/notes_8.html#indexes",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "While relational databases have the ability to be faster and more robust than utilizing a CSV file, data can be optimized within a table using indexes.\nIndexes can be utilized to speed up our queries.\nWe can track the speed of our queries by executing .timer on in sqlite3.\nTo understand how indexes can speed up our queries, run the following: SELECT * FROM shows WHERE title = 'The Office'; Notice the time that displays after the query executes.\nThen, we can create an index with the syntax CREATE INDEX title_index ON shows (title);. This tells sqlite3 to create an index and perform some special under-the-hood optimization relating to this column title.\nThis will create a data structure called a B Tree, a data structure that looks similar to a binary tree. However, unlike a binary tree, there can be more than two child nodes.\n\n\n\none node at the top from which come four children and below that there are three children coming from one of the nodes and two from another two from another and three from another\n\n\nFurther, we can create indexes as follows:\nCREATE INDEX name_index ON people (name);\nCREATE INDEX person_index ON stars (person_id);\n\nRunning the query and you will notice that the query runs much more quickly!\nSELECT title FROM shows WHERE id IN \n    (SELECT show_id FROM stars WHERE person_id = \n        (SELECT id FROM people WHERE name = 'Steve Carell'));\n\nUnfortunately, indexing all columns would result in utilizing more storage space. Therefore, there is a tradeoff for enhanced speed."
  },
  {
    "objectID": "notes/notes_8.html#using-sql-in-python",
    "href": "notes/notes_8.html#using-sql-in-python",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "To assist in working with SQL in this course, the CS50 Library can be utilized as follows in your code:\nfrom cs50 import SQL\n\nSimilar to previous uses of the CS50 Library, this library will assist with the complicated steps of utilizing SQL within your Python code.\nYou can read more about the CS50 Library’s SQL functionality in the documentation.\nUsing our new knowledge of SQL, we can now leverage Python alongside.\nModify your code for favorites.py as follows:\n# Searches database popularity of a problem\n\nfrom cs50 import SQL\n\n# Open database\ndb = SQL(\"sqlite:///favorites.db\")\n\n# Prompt user for favorite\nfavorite = input(\"Favorite: \")\n\n# Search for title\nrows = db.execute(\"SELECT COUNT(*) AS n FROM favorites WHERE language = ?\", favorite)\n\n# Get first (and only) row\nrow = rows[0]\n\n# Print popularity\nprint(row[\"n\"])\n\nNotice that db = SQL(\"sqlite:///favorites.db\") provides Python the location of the database file. Then, the line that begins with rows executes SQL commands utilizing db.execute. Indeed, this command passes the syntax within the quotation marks to the db.execute function. We can issue any SQL command using this syntax. Further, notice that rows is returned as a list of dictionaries. In this case, there is only one result, one row, returned to the rows list as a dictionary."
  },
  {
    "objectID": "notes/notes_8.html#race-conditions",
    "href": "notes/notes_8.html#race-conditions",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Utilization of SQL can sometimes result in some problems.\nYou can imagine a case where multiple users could be accessing the same database and executing commands at the same time.\nThis could result in glitches where code is interrupted by other people’s actions. This could result in a loss of data.\nBuilt-in SQL features such as BEGIN TRANSACTION, COMMIT, and ROLLBACK help avoid some of these race condition problems."
  },
  {
    "objectID": "notes/notes_8.html#sql-injection-attacks",
    "href": "notes/notes_8.html#sql-injection-attacks",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "Now, still considering the code above, you might be wondering what the ? question marks do above. One of the problems that can arise in real-world applications of SQL is what is called an injection attack. An injection attack is where a malicious actor could input malicious SQL code.\nFor example, consider a login screen as follows:\n\n\n\nharvard key login screen with username and password fields\n\n\nWithout the proper protections in our own code, a bad actor could run malicious code. Consider the following:\nrows = db.execute(\"SELECT COUNT(*) FROM users WHERE username = ? AND password = ?\", username, password)\n\nNotice that because the ? is in place, validation can be run on favorite before it is blindly accepted by the query.\nYou never want to utilize formatted strings in queries as above or blindly trust the user’s input.\nUtilizing the CS50 Library, the library will sanitize and remove any potentially malicious characters."
  },
  {
    "objectID": "notes/notes_8.html#summing-up",
    "href": "notes/notes_8.html#summing-up",
    "title": "Lecture 8 Notes",
    "section": "",
    "text": "In this lesson, you learned more syntax related to Python. Further, you learned how to integrate this knowledge with data in the form of flat-file and relational databases. Finally, you learned about SQL. Specifically, we discussed…\n\nFlat-file databases\nRelational databases\nSQL commands such as SELECT, CREATE, INSERT, DELETE, and UPDATE.\nPrimary and foreign keys\nJOINs\nIndexes\nUsing SQL in Python\nRace conditions\nSQL injection attacks\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_6.html",
    "href": "notes/notes_6.html",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Welcome!\nData Structures\nQueues\nStacks\nJack Learns the Facts\nResizing Arrays\nArrays\nLinked Lists\nTrees\nDictionaries\nHashing and Hash Tables\nTries\nSumming Up\n\n\n\n\nAll the prior weeks have presented you with the fundamental building blocks of programming.\nAll you have learned in C will enable you to implement these building blocks in higher-level programming languages such as Python.\nEach week, concepts have become more and more challenging, like a hill becoming more and more steep. This week, the challenge evens off as we explore data structures.\nTo date, you have learned about how an array can organize data in memory.\nToday, we are going to talk about organizing data in memory and design possibilities that emerge from your growing knowledge.\n\n\n\n\n\nData structures essentially are forms of organization in memory.\nThere are many ways to organize data in memory.\nAbstract data types are those that we can conceptually imagine. When learning about computer science, it’s often useful to begin with these conceptual data structures. Learning these will make it easier later to understand how to implement more concrete data structures.\n\n\n\n\n\nQueues are one form of abstract data structure.\nQueues have specific properties. Namely, they are FIFO or “first in first out.” You can imagine yourself in a line for a ride at an amusement park. The first person in the line gets to go on the ride first. The last person gets to go on the ride last.\nQueues have specific actions associated with them. For example, an item can be enqueued; that is, the item can join the line or queue. Further, an item can be dequeued or leave the queue once it reaches the front of the line.\nIn code, you can imagine a queue as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nqueue;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the queue actually is, regardless of how much it can hold.\n\n\n\n\n\nQueues contrast a stack. Fundamentally, the properties of a stack are different than those of a queue. Specifically, it is LIFO or “last in first out.” Just like stacking trays in a dining hall, a tray that is placed in a stack last is the first that may be picked up.\nStacks have specific actions associated with them. For example, push places something on top of a stack. Pop is removing something from the top of the stack.\nIn code, you might imagine a stack as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nstack;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the stack actually is, regardless of how much it could hold. Notice that this code is the same as the code from the queue.\nYou might imagine that the above code has a limitation. Since the capacity of the array is always predetermined in this code. Therefore, the stack may always be oversized. You might imagine only using one place in the stack out of 5000.\nIt would be nice for our stack to be dynamic – able to grow as items are added to it.\n\n\n\n\n\nWe watched a video called Jack Learns the Facts by Professor Shannon Duvall of Elon University.\n\n\n\n\n\nRewinding to Week 2, we introduced you to your first data structure.\nAn array is a block of contiguous memory.\nYou might imagine an array as follows:\n\n\n\nthree boxes with 1 2 3\n\n\nIn memory, there are other values being stored by other programs, functions, and variables. Many of these may be unused garbage values that were utilized at one point but are available now for use.\n\n\n\nthree boxes with 1 2 3 among lots of other memory elements\n\n\nImagine you wanted to store a fourth value 4 in our array. What would be needed is to allocate a new area of memory and move the old array to a new one? Initially, this new area of memory would be populated with garbage values.\n\n\n\nThree boxes with 1 2 3 above four boxes with garbage values\n\n\nAs values are added to this new area of memory, old garbage values would be overwritten.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 and a garbage value\n\n\nEventually, all old garbage values would be overwritten with our new data.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 4\n\n\nOne of the drawbacks of this approach is that it’s bad design: Every time we add a number, we have to copy the array item by item.\n\n\n\n\n\nWouldn’t it be nice if we were able to put the 4 somewhere else in memory? By definition, this would no longer be an array because 4 would no longer be in contiguous memory. How could we connect different locations in memory?\nIn your terminal, type code list.c and write code as follows:\n// Implements a list of numbers with an array of fixed size\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int list[3];\n\n    // Initialize list with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Print list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n}\n\nNotice that the above is very much like what we learned earlier in this course. Memory is preallocated for three items.\nBuilding upon our knowledge obtained more recently, we can leverage our understanding of pointers to create a better design in this code. Modify your code as follows:\n// Implements a list of numbers with an array of dynamic size\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // List of size 4\n    int *tmp = malloc(4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    // Copy list of size 3 into list of size 4\n    for (int i = 0; i &lt; 3; i++)\n    {\n        tmp[i] = list[i];\n    }\n\n    // Add number to list of size 4\n    tmp[3] = 4;\n\n    // Free list of size 3\n    free(list);\n\n    // Remember list of size 4\n    list = tmp;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that a list of size three integers is created. Then, three memory addresses can be assigned the values 1, 2, and 3. Then, a list of size four is created. Next, the list is copied from the first to the second. The value for the 4 is added to the tmp list. Since the block of memory that list points to is no longer used, it is freed using the command free(list). Finally, the compiler is told to point list pointer now to the block of memory that tmp points to. The contents of list are printed and then freed. Further, notice the inclusion of stdlib.h.\nIt’s useful to think about list and tmp as both signs that point to a chunk of memory. As in the example above, list at one point pointed to an array of size 3. By the end, list was told to point to a chunk of memory of size 4. Technically, by the end of the above code, tmp and list both pointed to the same block of memory.\nOne way by which we can copy the array without a for loop is by using realloc:\n// Implements a list of numbers with an array of dynamic size using realloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Resize list to be of size 4\n    int *tmp = realloc(list, 4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n    list = tmp;\n\n    // Add number to list\n    list[3] = 4;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that the list is reallocated to a new array via realloc.\nOne may be tempted to allocate way more memory than required for the list, such as 30 items instead of the required 3 or 4. However, this is bad design as it taxes system resources when they are not potentially needed. Further, there is little guarantee that memory for more than 30 items will be needed eventually.\n\n\n\n\n\nIn recent weeks, you have learned about three useful primitives. A struct is a data type that you can define yourself. A . in dot notation allows you to access variables inside that structure. The * operator is used to declare a pointer or dereference a variable.\nToday, you are introduced to the -&gt; operator. It is an arrow. This operator goes to an address and looks inside a structure.\nA linked list is one of the most powerful data structures within C. A linked list allows you to include values that are located in varying areas of memory. Further, they allow you to dynamically grow and shrink the list as you desire.\nYou might imagine three values stored in three different areas of memory as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory\n\n\nHow could one stitch together these values in a list?\nWe could imagine the data pictured above as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached\n\n\nWe could utilize more memory to keep track of where the next item using a pointer.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes\n\n\nNotice that NULL is utilized to indicate that nothing else is next in the list.\nBy convention, we would keep one more element in memory, a pointer, that keeps track of the first item in the list, called the head of the list.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes now with a final box with the memory address of the first box\n\n\nAbstracting away the memory addresses, the list would appear as follows:\n\n\n\nThree boxes with in separate areas of memory with smaller boxes with a final box where the one box points to another and another until the end of the boxes\n\n\nThese boxes are called nodes. A node contains both an item and a pointer called next. In code, you can imagine a node as follows:\ntypedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nNotice that the item contained within this node is an integer called number. Second, a pointer to a node called next is included, which will point to another node somewhere in memory.\nWe can recreate list.c to utilize a linked list:\n// Start to build a linked list by prepending nodes\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n    return 0;\n}\n\nFirst, a node is defined as a struct. For each element of the list, memory for a node is allocated via malloc to the size of a node. n-&gt;number (or n’s number field) is assigned an integer. n-&gt;next (or n’s next field) is assigned null. Then, the node is placed at the start of the list at memory location list.\nConceptually, we can imagine the process of creating a linked list. First, node *list is declared, but it is of a garbage value.\n\n\n\nOne garbage value\n\n\nNext, a node called n is allocated in memory.\n\n\n\nOne garbage value called n with another pointer called list\n\n\nNext, the number of node is assigned the value 1.\n\n\n\nn pointing to a node with 1 as the number and garbage value as the next\n\n\nNext, the node’s next field is assigned NULL.\n\n\n\nn pointing to a node with 1 as the number and null as the value of next\n\n\nNext, list is pointed at the memory location to where n points. n and list now point to the same place.\n\n\n\nn and list both pointing to a node with 1 as the number and null as the value of next\n\n\nA new node is then created. Both the number and next field are filled with garbage values.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with garbage values\n\n\nThe number value of n’s node (the new node) is updated to 2.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and garbage as the next\n\n\nAlso, the next field is updated as well.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nMost importantly, we do not want to lose our connection to any of these nodes lest they be lost forever. Accordingly, n’s next field is pointed to the same memory location as list.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nFinally, list is updated to point at n. We now have a linked list of two items.\n\n\n\nlist pointing to a node with 1 as the number and next pointing to a node with an n pointing the same place the node with one points to a node with 2 as the number and null as the next\n\n\nLooking at our diagram of the list, we can see that the last number added is the first number that appears in the list. Accordingly, if we print the list in order, starting with the first node, the list will appear out of order.\nWe can print the list in the correct order as follows:\n// Print nodes in a linked list with a while loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n\n    // Print numbers\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n        ptr = ptr-&gt;next;\n    }\n    return 0;\n}\n\nNotice that node *ptr = list creates a temporary variable that points at the same spot that list points to. The while prints what at the node ptr points to, and then updates ptr to point to the next node in the list.\nIn this example, inserting into the list is always in the order of (O(1)), as it only takes a very small number of steps to insert at the front of a list.\nConsidering the amount of time required to search this list, it is in the order of (O(n)), because in the worst case the entire list must always be searched to find an item. The time complexity for adding a new element to the list will depend on where that element is added. This is illustrated in the examples below.\nLinked lists are not stored in a contiguous block of memory. They can grow as large as you wish, provided that enough system resources exist. The downside, however, is that more memory is required to keep track of the list instead of an array. For each element you must store not just the value of the element, but also a pointer to the next node. Further, linked lists cannot be indexed into like is possible in an array because we need to pass through the first (n - 1) elements to find the location of the (n)th element. Because of this, the list pictured above must be linearly searched. Binary search, therefore, is not possible in a list constructed as above.\nFurther, you could place numbers at the end of the list as illustrated in this code:\n// Appends numbers to a linked list\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            // This node is the whole list\n            list = n;\n        }\n\n        // If list has numbers already\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this code walks down this list to find the end. When appending an element (adding to the end of the list) our code will run in (O(n)), as we have to go through our entire list before we can add the final element. Further, notice that a temporary variable called next is used to track ptr-&gt;next.\nFurther, you could sort your list as items are added:\n// Implements a sorted linked list of numbers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            list = n;\n        }\n\n        // If number belongs at beginning of list\n        else if (n-&gt;number &lt; list-&gt;number)\n        {\n            n-&gt;next = list;\n            list = n; \n        }\n\n        // If number belongs later in list\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n\n                // If in middle of list\n                if (n-&gt;number &lt; ptr-&gt;next-&gt;number)\n                {\n                    n-&gt;next = ptr-&gt;next;\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this list is sorted as it is built. To insert an element in this specific order, our code will still run in (O(n)) for each insertion, as in the worst case we will have to look through all current elements.\nThis code may seem complicated. However, notice that with pointers and the syntax above, we can stitch data together in different places in memory.\n\n\n\n\n\nArrays offer contiguous memory that can be searched quickly. Arrays also offered the opportunity to engage in binary search.\nCould we combine the best of both arrays and linked lists?\nBinary search trees are another data structure that can be used to store data more efficiently so that it can be searched and retrieved.\nYou can imagine a sorted sequence of numbers.\n\n\n\n1 2 3 4 5 6 7 in boxes next to each other\n\n\nImagine then that the center value becomes the top of a tree. Those that are less than this value are placed to the left. Those values that are more than this value are to the right.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those\n\n\nPointers can then be used to point to the correct location of each area of memory such that each of these nodes can be connected.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those arrows connect them in a tree formation\n\n\nIn code, this can be implemented as follows.\n// Implements a list of numbers as a binary search tree\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Represents a node\ntypedef struct node\n{\n    int number;\n    struct node *left;\n    struct node *right;\n}\nnode;\n\nvoid free_tree(node *root);\nvoid print_tree(node *root);\n\nint main(void)\n{\n    // Tree of size 0\n    node *tree = NULL;\n\n    // Add number to list\n    node *n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 1;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;left = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 3;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;right = n;\n\n    // Print tree\n    print_tree(tree);\n\n    // Free tree\n    free_tree(tree);\n    return 0;\n}\n\nvoid free_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    free_tree(root-&gt;left);\n    free_tree(root-&gt;right);\n    free(root);\n}\n\nvoid print_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    print_tree(root-&gt;left);\n    printf(\"%i\\n\", root-&gt;number);\n    print_tree(root-&gt;right);\n}\n\nNotice this search function begins by going to the location of tree. Then, it uses recursion to search for number. The free_tree function recursively frees the tree. print_tree recursively prints the tree.\nA tree like the above offers dynamism that an array does not offer. It can grow and shrink as we wish.\nFurther, this structure offers a search time of (O(log n)) when the tree is balanced.\n\n\n\n\n\nDictionaries are another data structure.\nDictionaries, like actual book-form dictionaries that have a word and a definition, have a key and a value.\nThe holy grail of algorithmic time complexity is (O(1)) or constant time. That is, the ultimate is for access to be instantaneous.\n\n\n\na graph of various time complexities where O of log n is second best and O of 1 is best\n\n\nDictionaries can offer this speed of access through hashing.\n\n\n\n\n\nHashing is the idea of taking a value and being able to output a value that becomes a shortcut to it later.\nFor example, hashing apple may hash as a value of 1, and berry may be hashed as 2. Therefore, finding apple is as easy as asking the hash algorithm where apple is stored. While not ideal in terms of design, ultimately, putting all a’s in one bucket and b’s in another, this concept of bucketizing hashed values illustrates how you can use this concept: a hashed value can be used to shortcut finding such a value.\nA hash function is an algorithm that reduces a larger value to something small and predictable. Generally, this function takes in an item you wish to add to your hash table, and returns an integer representing the array index in which the item should be placed.\nA hash table is a fantastic combination of both arrays and linked lists. When implemented in code, a hash table is an array of pointers to nodes.\nA hash table could be imagined as follows:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet\n\n\nNotice that this is an array that is assigned each value of the alphabet.\nThen, at each location of the array, a linked list is used to track each value being stored there:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet with various names from the mario universe emerging to the right luigi is with l and mario is with m\n\n\nCollisions are when you add values to the hash table, and something already exists at the hashed location. In the above, collisions are simply appended to the end of the list.\nCollisions can be reduced by better programming your hash table and hash algorithm. You can imagine an improvement upon the above as follows:\n\n\n\na vertical column of various boxes arranged by L A K and L I N with Lakitu emerging from L A K and link emerging from L I N\n\n\nConsider the following example of a hash algorithm:\n\n\n\nluigi being given to a hash algorithm outputting 11\n\n\nThis could be implemented in code as follows:\n#include &lt;ctype.h&gt;\n\nunsigned int hash(const char *word)\n{\n    return toupper(word[0]) - 'A';\n}\n\n\nNotice how the hash function returns the value of toupper(word[0]) - 'A'.\nYou, as the programmer, have to make a decision about the advantages of using more memory to have a large hash table and potentially reducing search time or using less memory and potentially increasing search time.\nThis structure offers a search time of (O(n)).\n\n\n\n\n\nTries are another form of data structure. Tries are trees of arrays.\nTries are always searchable in constant time.\nOne downside to Tries is that they tend to take up a large amount of memory. Notice that we need (26 = 104) nodes just to store Toad!\nToad would be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on\n\n\nTom would then be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on and tom being spelled similarly where toad and tom share a two common letters T and O\n\n\nThis structure offers a search time of (O(1)).\nThe downside of this structure is how many resources are required to use it.\n\n\n\n\nIn this lesson, you learned about using pointers to build new data structures. Specifically, we delved into…\n\nData structures\nStacks and queues\nResizing arrays\nLinked lists\nDictionaries\nTries\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_6.html#welcome",
    "href": "notes/notes_6.html#welcome",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "All the prior weeks have presented you with the fundamental building blocks of programming.\nAll you have learned in C will enable you to implement these building blocks in higher-level programming languages such as Python.\nEach week, concepts have become more and more challenging, like a hill becoming more and more steep. This week, the challenge evens off as we explore data structures.\nTo date, you have learned about how an array can organize data in memory.\nToday, we are going to talk about organizing data in memory and design possibilities that emerge from your growing knowledge."
  },
  {
    "objectID": "notes/notes_6.html#data-structures",
    "href": "notes/notes_6.html#data-structures",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Data structures essentially are forms of organization in memory.\nThere are many ways to organize data in memory.\nAbstract data types are those that we can conceptually imagine. When learning about computer science, it’s often useful to begin with these conceptual data structures. Learning these will make it easier later to understand how to implement more concrete data structures."
  },
  {
    "objectID": "notes/notes_6.html#queues",
    "href": "notes/notes_6.html#queues",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Queues are one form of abstract data structure.\nQueues have specific properties. Namely, they are FIFO or “first in first out.” You can imagine yourself in a line for a ride at an amusement park. The first person in the line gets to go on the ride first. The last person gets to go on the ride last.\nQueues have specific actions associated with them. For example, an item can be enqueued; that is, the item can join the line or queue. Further, an item can be dequeued or leave the queue once it reaches the front of the line.\nIn code, you can imagine a queue as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nqueue;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the queue actually is, regardless of how much it can hold."
  },
  {
    "objectID": "notes/notes_6.html#stacks",
    "href": "notes/notes_6.html#stacks",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Queues contrast a stack. Fundamentally, the properties of a stack are different than those of a queue. Specifically, it is LIFO or “last in first out.” Just like stacking trays in a dining hall, a tray that is placed in a stack last is the first that may be picked up.\nStacks have specific actions associated with them. For example, push places something on top of a stack. Pop is removing something from the top of the stack.\nIn code, you might imagine a stack as follows:\nconst int CAPACITY = 50;\n\ntypedef struct\n{\n    person people[CAPACITY];\n    int size;\n}\nstack;\n\nNotice that an array called people is of type person. The CAPACITY is how high the stack could be. The integer size is how full the stack actually is, regardless of how much it could hold. Notice that this code is the same as the code from the queue.\nYou might imagine that the above code has a limitation. Since the capacity of the array is always predetermined in this code. Therefore, the stack may always be oversized. You might imagine only using one place in the stack out of 5000.\nIt would be nice for our stack to be dynamic – able to grow as items are added to it."
  },
  {
    "objectID": "notes/notes_6.html#jack-learns-the-facts",
    "href": "notes/notes_6.html#jack-learns-the-facts",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "We watched a video called Jack Learns the Facts by Professor Shannon Duvall of Elon University."
  },
  {
    "objectID": "notes/notes_6.html#resizing-arrays",
    "href": "notes/notes_6.html#resizing-arrays",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Rewinding to Week 2, we introduced you to your first data structure.\nAn array is a block of contiguous memory.\nYou might imagine an array as follows:\n\n\n\nthree boxes with 1 2 3\n\n\nIn memory, there are other values being stored by other programs, functions, and variables. Many of these may be unused garbage values that were utilized at one point but are available now for use.\n\n\n\nthree boxes with 1 2 3 among lots of other memory elements\n\n\nImagine you wanted to store a fourth value 4 in our array. What would be needed is to allocate a new area of memory and move the old array to a new one? Initially, this new area of memory would be populated with garbage values.\n\n\n\nThree boxes with 1 2 3 above four boxes with garbage values\n\n\nAs values are added to this new area of memory, old garbage values would be overwritten.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 and a garbage value\n\n\nEventually, all old garbage values would be overwritten with our new data.\n\n\n\nThree boxes with 1 2 3 above four boxes with 1 2 3 4\n\n\nOne of the drawbacks of this approach is that it’s bad design: Every time we add a number, we have to copy the array item by item."
  },
  {
    "objectID": "notes/notes_6.html#arrays",
    "href": "notes/notes_6.html#arrays",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Wouldn’t it be nice if we were able to put the 4 somewhere else in memory? By definition, this would no longer be an array because 4 would no longer be in contiguous memory. How could we connect different locations in memory?\nIn your terminal, type code list.c and write code as follows:\n// Implements a list of numbers with an array of fixed size\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int list[3];\n\n    // Initialize list with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Print list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n}\n\nNotice that the above is very much like what we learned earlier in this course. Memory is preallocated for three items.\nBuilding upon our knowledge obtained more recently, we can leverage our understanding of pointers to create a better design in this code. Modify your code as follows:\n// Implements a list of numbers with an array of dynamic size\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // List of size 4\n    int *tmp = malloc(4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n\n    // Copy list of size 3 into list of size 4\n    for (int i = 0; i &lt; 3; i++)\n    {\n        tmp[i] = list[i];\n    }\n\n    // Add number to list of size 4\n    tmp[3] = 4;\n\n    // Free list of size 3\n    free(list);\n\n    // Remember list of size 4\n    list = tmp;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that a list of size three integers is created. Then, three memory addresses can be assigned the values 1, 2, and 3. Then, a list of size four is created. Next, the list is copied from the first to the second. The value for the 4 is added to the tmp list. Since the block of memory that list points to is no longer used, it is freed using the command free(list). Finally, the compiler is told to point list pointer now to the block of memory that tmp points to. The contents of list are printed and then freed. Further, notice the inclusion of stdlib.h.\nIt’s useful to think about list and tmp as both signs that point to a chunk of memory. As in the example above, list at one point pointed to an array of size 3. By the end, list was told to point to a chunk of memory of size 4. Technically, by the end of the above code, tmp and list both pointed to the same block of memory.\nOne way by which we can copy the array without a for loop is by using realloc:\n// Implements a list of numbers with an array of dynamic size using realloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    // List of size 3\n    int *list = malloc(3 * sizeof(int));\n    if (list == NULL)\n    {\n        return 1;\n    }\n\n    // Initialize list of size 3 with numbers\n    list[0] = 1;\n    list[1] = 2;\n    list[2] = 3;\n\n    // Resize list to be of size 4\n    int *tmp = realloc(list, 4 * sizeof(int));\n    if (tmp == NULL)\n    {\n        free(list);\n        return 1;\n    }\n    list = tmp;\n\n    // Add number to list\n    list[3] = 4;\n\n    // Print list\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"%i\\n\", list[i]);\n    }\n\n    // Free list\n    free(list);\n    return 0;\n}\n\nNotice that the list is reallocated to a new array via realloc.\nOne may be tempted to allocate way more memory than required for the list, such as 30 items instead of the required 3 or 4. However, this is bad design as it taxes system resources when they are not potentially needed. Further, there is little guarantee that memory for more than 30 items will be needed eventually."
  },
  {
    "objectID": "notes/notes_6.html#linked-lists",
    "href": "notes/notes_6.html#linked-lists",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "In recent weeks, you have learned about three useful primitives. A struct is a data type that you can define yourself. A . in dot notation allows you to access variables inside that structure. The * operator is used to declare a pointer or dereference a variable.\nToday, you are introduced to the -&gt; operator. It is an arrow. This operator goes to an address and looks inside a structure.\nA linked list is one of the most powerful data structures within C. A linked list allows you to include values that are located in varying areas of memory. Further, they allow you to dynamically grow and shrink the list as you desire.\nYou might imagine three values stored in three different areas of memory as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory\n\n\nHow could one stitch together these values in a list?\nWe could imagine the data pictured above as follows:\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached\n\n\nWe could utilize more memory to keep track of where the next item using a pointer.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes\n\n\nNotice that NULL is utilized to indicate that nothing else is next in the list.\nBy convention, we would keep one more element in memory, a pointer, that keeps track of the first item in the list, called the head of the list.\n\n\n\nThree boxes with 1 2 3 in separate areas of memory with smaller boxes attached where memory addresses are in those attached boxes now with a final box with the memory address of the first box\n\n\nAbstracting away the memory addresses, the list would appear as follows:\n\n\n\nThree boxes with in separate areas of memory with smaller boxes with a final box where the one box points to another and another until the end of the boxes\n\n\nThese boxes are called nodes. A node contains both an item and a pointer called next. In code, you can imagine a node as follows:\ntypedef struct node\n{\n    int number;\n    struct node *next;\n}\nnode;\n\nNotice that the item contained within this node is an integer called number. Second, a pointer to a node called next is included, which will point to another node somewhere in memory.\nWe can recreate list.c to utilize a linked list:\n// Start to build a linked list by prepending nodes\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n    return 0;\n}\n\nFirst, a node is defined as a struct. For each element of the list, memory for a node is allocated via malloc to the size of a node. n-&gt;number (or n’s number field) is assigned an integer. n-&gt;next (or n’s next field) is assigned null. Then, the node is placed at the start of the list at memory location list.\nConceptually, we can imagine the process of creating a linked list. First, node *list is declared, but it is of a garbage value.\n\n\n\nOne garbage value\n\n\nNext, a node called n is allocated in memory.\n\n\n\nOne garbage value called n with another pointer called list\n\n\nNext, the number of node is assigned the value 1.\n\n\n\nn pointing to a node with 1 as the number and garbage value as the next\n\n\nNext, the node’s next field is assigned NULL.\n\n\n\nn pointing to a node with 1 as the number and null as the value of next\n\n\nNext, list is pointed at the memory location to where n points. n and list now point to the same place.\n\n\n\nn and list both pointing to a node with 1 as the number and null as the value of next\n\n\nA new node is then created. Both the number and next field are filled with garbage values.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with garbage values\n\n\nThe number value of n’s node (the new node) is updated to 2.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and garbage as the next\n\n\nAlso, the next field is updated as well.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nMost importantly, we do not want to lose our connection to any of these nodes lest they be lost forever. Accordingly, n’s next field is pointed to the same memory location as list.\n\n\n\nlist pointing to a node with 1 as the number and null as the value of next and n pointing to a new node with 2 as the number and null as the next\n\n\nFinally, list is updated to point at n. We now have a linked list of two items.\n\n\n\nlist pointing to a node with 1 as the number and next pointing to a node with an n pointing the same place the node with one points to a node with 2 as the number and null as the next\n\n\nLooking at our diagram of the list, we can see that the last number added is the first number that appears in the list. Accordingly, if we print the list in order, starting with the first node, the list will appear out of order.\nWe can print the list in the correct order as follows:\n// Print nodes in a linked list with a while loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // Prepend node to list\n        n-&gt;next = list;\n        list = n;\n    }\n\n    // Print numbers\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n        ptr = ptr-&gt;next;\n    }\n    return 0;\n}\n\nNotice that node *ptr = list creates a temporary variable that points at the same spot that list points to. The while prints what at the node ptr points to, and then updates ptr to point to the next node in the list.\nIn this example, inserting into the list is always in the order of (O(1)), as it only takes a very small number of steps to insert at the front of a list.\nConsidering the amount of time required to search this list, it is in the order of (O(n)), because in the worst case the entire list must always be searched to find an item. The time complexity for adding a new element to the list will depend on where that element is added. This is illustrated in the examples below.\nLinked lists are not stored in a contiguous block of memory. They can grow as large as you wish, provided that enough system resources exist. The downside, however, is that more memory is required to keep track of the list instead of an array. For each element you must store not just the value of the element, but also a pointer to the next node. Further, linked lists cannot be indexed into like is possible in an array because we need to pass through the first (n - 1) elements to find the location of the (n)th element. Because of this, the list pictured above must be linearly searched. Binary search, therefore, is not possible in a list constructed as above.\nFurther, you could place numbers at the end of the list as illustrated in this code:\n// Appends numbers to a linked list\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            // This node is the whole list\n            list = n;\n        }\n\n        // If list has numbers already\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this code walks down this list to find the end. When appending an element (adding to the end of the list) our code will run in (O(n)), as we have to go through our entire list before we can add the final element. Further, notice that a temporary variable called next is used to track ptr-&gt;next.\nFurther, you could sort your list as items are added:\n// Implements a sorted linked list of numbers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef struct node\n{\n    int number;\n    struct node *next;\n} node;\n\nint main(void)\n{\n    // Memory for numbers\n    node *list = NULL;\n\n    // Build list\n    for (int i = 0; i &lt; 3; i++)\n    {\n        // Allocate node for number\n        node *n = malloc(sizeof(node));\n        if (n == NULL)\n        {\n            return 1;\n        }\n        n-&gt;number = get_int(\"Number: \");\n        n-&gt;next = NULL;\n\n        // If list is empty\n        if (list == NULL)\n        {\n            list = n;\n        }\n\n        // If number belongs at beginning of list\n        else if (n-&gt;number &lt; list-&gt;number)\n        {\n            n-&gt;next = list;\n            list = n; \n        }\n\n        // If number belongs later in list\n        else\n        {\n            // Iterate over nodes in list\n            for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n            {\n                // If at end of list\n                if (ptr-&gt;next == NULL)\n                {\n                    // Append node\n                    ptr-&gt;next = n;\n                    break;\n                }\n\n                // If in middle of list\n                if (n-&gt;number &lt; ptr-&gt;next-&gt;number)\n                {\n                    n-&gt;next = ptr-&gt;next;\n                    ptr-&gt;next = n;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Print numbers\n    for (node *ptr = list; ptr != NULL; ptr = ptr-&gt;next)\n    {\n        printf(\"%i\\n\", ptr-&gt;number);\n    }\n\n    // Free memory\n    node *ptr = list;\n    while (ptr != NULL)\n    {\n        node *next = ptr-&gt;next;\n        free(ptr);\n        ptr = next;\n    }\n    return 0;\n}\n\nNotice how this list is sorted as it is built. To insert an element in this specific order, our code will still run in (O(n)) for each insertion, as in the worst case we will have to look through all current elements.\nThis code may seem complicated. However, notice that with pointers and the syntax above, we can stitch data together in different places in memory."
  },
  {
    "objectID": "notes/notes_6.html#trees",
    "href": "notes/notes_6.html#trees",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Arrays offer contiguous memory that can be searched quickly. Arrays also offered the opportunity to engage in binary search.\nCould we combine the best of both arrays and linked lists?\nBinary search trees are another data structure that can be used to store data more efficiently so that it can be searched and retrieved.\nYou can imagine a sorted sequence of numbers.\n\n\n\n1 2 3 4 5 6 7 in boxes next to each other\n\n\nImagine then that the center value becomes the top of a tree. Those that are less than this value are placed to the left. Those values that are more than this value are to the right.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those\n\n\nPointers can then be used to point to the correct location of each area of memory such that each of these nodes can be connected.\n\n\n\n1 2 3 4 5 6 7 in boxes arranged in a hierarchy 4 is at the top 3 and 5 are below that and 1 2 6 7 are below those arrows connect them in a tree formation\n\n\nIn code, this can be implemented as follows.\n// Implements a list of numbers as a binary search tree\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// Represents a node\ntypedef struct node\n{\n    int number;\n    struct node *left;\n    struct node *right;\n}\nnode;\n\nvoid free_tree(node *root);\nvoid print_tree(node *root);\n\nint main(void)\n{\n    // Tree of size 0\n    node *tree = NULL;\n\n    // Add number to list\n    node *n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        return 1;\n    }\n    n-&gt;number = 2;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 1;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;left = n;\n\n    // Add number to list\n    n = malloc(sizeof(node));\n    if (n == NULL)\n    {\n        free_tree(tree);\n        return 1;\n    }\n    n-&gt;number = 3;\n    n-&gt;left = NULL;\n    n-&gt;right = NULL;\n    tree-&gt;right = n;\n\n    // Print tree\n    print_tree(tree);\n\n    // Free tree\n    free_tree(tree);\n    return 0;\n}\n\nvoid free_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    free_tree(root-&gt;left);\n    free_tree(root-&gt;right);\n    free(root);\n}\n\nvoid print_tree(node *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    print_tree(root-&gt;left);\n    printf(\"%i\\n\", root-&gt;number);\n    print_tree(root-&gt;right);\n}\n\nNotice this search function begins by going to the location of tree. Then, it uses recursion to search for number. The free_tree function recursively frees the tree. print_tree recursively prints the tree.\nA tree like the above offers dynamism that an array does not offer. It can grow and shrink as we wish.\nFurther, this structure offers a search time of (O(log n)) when the tree is balanced."
  },
  {
    "objectID": "notes/notes_6.html#dictionaries",
    "href": "notes/notes_6.html#dictionaries",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Dictionaries are another data structure.\nDictionaries, like actual book-form dictionaries that have a word and a definition, have a key and a value.\nThe holy grail of algorithmic time complexity is (O(1)) or constant time. That is, the ultimate is for access to be instantaneous.\n\n\n\na graph of various time complexities where O of log n is second best and O of 1 is best\n\n\nDictionaries can offer this speed of access through hashing."
  },
  {
    "objectID": "notes/notes_6.html#hashing-and-hash-tables",
    "href": "notes/notes_6.html#hashing-and-hash-tables",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Hashing is the idea of taking a value and being able to output a value that becomes a shortcut to it later.\nFor example, hashing apple may hash as a value of 1, and berry may be hashed as 2. Therefore, finding apple is as easy as asking the hash algorithm where apple is stored. While not ideal in terms of design, ultimately, putting all a’s in one bucket and b’s in another, this concept of bucketizing hashed values illustrates how you can use this concept: a hashed value can be used to shortcut finding such a value.\nA hash function is an algorithm that reduces a larger value to something small and predictable. Generally, this function takes in an item you wish to add to your hash table, and returns an integer representing the array index in which the item should be placed.\nA hash table is a fantastic combination of both arrays and linked lists. When implemented in code, a hash table is an array of pointers to nodes.\nA hash table could be imagined as follows:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet\n\n\nNotice that this is an array that is assigned each value of the alphabet.\nThen, at each location of the array, a linked list is used to track each value being stored there:\n\n\n\na vertical column of 26 boxes one for each letter of the alphabet with various names from the mario universe emerging to the right luigi is with l and mario is with m\n\n\nCollisions are when you add values to the hash table, and something already exists at the hashed location. In the above, collisions are simply appended to the end of the list.\nCollisions can be reduced by better programming your hash table and hash algorithm. You can imagine an improvement upon the above as follows:\n\n\n\na vertical column of various boxes arranged by L A K and L I N with Lakitu emerging from L A K and link emerging from L I N\n\n\nConsider the following example of a hash algorithm:\n\n\n\nluigi being given to a hash algorithm outputting 11\n\n\nThis could be implemented in code as follows:\n#include &lt;ctype.h&gt;\n\nunsigned int hash(const char *word)\n{\n    return toupper(word[0]) - 'A';\n}\n\n\nNotice how the hash function returns the value of toupper(word[0]) - 'A'.\nYou, as the programmer, have to make a decision about the advantages of using more memory to have a large hash table and potentially reducing search time or using less memory and potentially increasing search time.\nThis structure offers a search time of (O(n))."
  },
  {
    "objectID": "notes/notes_6.html#tries",
    "href": "notes/notes_6.html#tries",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "Tries are another form of data structure. Tries are trees of arrays.\nTries are always searchable in constant time.\nOne downside to Tries is that they tend to take up a large amount of memory. Notice that we need (26 = 104) nodes just to store Toad!\nToad would be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on\n\n\nTom would then be stored as follows:\n\n\n\ntoad being spelled with one letter at a time where one letter is associated with one list T from one list O from another and so on and tom being spelled similarly where toad and tom share a two common letters T and O\n\n\nThis structure offers a search time of (O(1)).\nThe downside of this structure is how many resources are required to use it."
  },
  {
    "objectID": "notes/notes_6.html#summing-up",
    "href": "notes/notes_6.html#summing-up",
    "title": "Lecture 6 Notes",
    "section": "",
    "text": "In this lesson, you learned about using pointers to build new data structures. Specifically, we delved into…\n\nData structures\nStacks and queues\nResizing arrays\nLinked lists\nDictionaries\nTries\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_4.html",
    "href": "notes/notes_4.html",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Welcome!\nLinear Search\nBinary Search\nRunning Time\nsearch.c\nphonebook.c\nStructs\nSorting\nBubble Sort\nRecursion\nMerge Sort\nSumming Up\n\n\n\n\nIn week zero, we introduced the idea of an algorithm: a black box that may take an input and create an output.\nThis week, we are going to expand upon our understanding of algorithms through pseudocode and into code itself.\nAlso, we are going to consider the efficiency of these algorithms. Indeed, we are going to be building upon our understanding of how to use some of the concepts we discussed last week in building algorithms.\nRecall back to earlier in the course when we introduced the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “n”; green, curved line that gets less and less steep from origin to right of graph, labeled “log n”\n\n\nAs we step into this week, you should consider how the way an algorithm works with a problem may determine the time it takes to solve a problem! Algorithms can be designed to be more and more efficient to a limit.\nToday, we will focus on the design of algorithms and how to measure their efficiency.\n\n\n\n\n\nRecall that last week, you were introduced to the idea of an array, blocks of memory that are consecutive: side-by-side with one another.\nYou can metaphorically imagine an array like a series of seven red lockers as follows:\n\n\n\nSeven red lockers side by side\n\n\nThe far-left position is called location 0 or the beginning of the array. The far-right position is location 7 or the end of the array.\nWe can imagine that we have an essential problem of wanting to know, “Is the number 50 inside an array?” A computer must look at each locker to be able to see if the number 50 is inside. We call this process of finding such a number, character, string, or other item searching.\nWe can potentially hand our array to an algorithm, wherein our algorithm will search through our lockers to see if the number 50 is behind one of the doors, returning the value true or false.\n\n\n\nseven red lockers pointing to an empty box. Out of the empty box comes an output of bool\n\n\nWe can imagine various instructions we might provide our algorithm to undertake this task as follows:\nFor each door from left to right\n    If 50 is behind door\n        Return true\nReturn false\n\nNotice that the above instructions are called pseudocode: A human-readable version of the instructions that we could provide the computer.\nA computer scientist could translate that pseudocode as follows:\nFor i from 0 to n-1\n    If 50 is behind doors[i]\n        Return true\nReturn false\n\nNotice that the above is still not code, but it is a pretty close approximation of what the final code might look like.\n\n\n\n\n\nBinary search is another search algorithm that could be employed in our task of finding the 50.\nAssuming that the values within the lockers have been arranged from smallest to largest, the pseudocode for binary search would appear as follows:\nIf no doors left\n    Return false\nIf 50 is behind middle door\n    Return true\nElse if 50 &lt; middle door\n    Search left half\nElse if 50 &gt; middle door\n    Search right half\n\nUsing the nomenclature of code, we can further modify our algorithm as follows:\nIf no doors left\n    Return false\nIf 50 is behind doors[middle]\n    Return true\nElse if 50 &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if 50 &gt; doors[middle]\n    Search doors[middle + 1] through doors[n - 1]\n\nNotice that by looking at this approximation of code, you can nearly imagine what this might look like in actual code.\n\n\n\n\n\nYou can consider how much time it takes an algorithm to solve a problem.\nrunning time involves an analysis using big O notation. Take a look at the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “O(n)”; green, curved line that gets less and less steep from origin to right of graph, labeled “O(log n”\n\n\nRather than being ultra-specific about the mathematical efficiency of an algorithm, computer scientists discuss efficiency in terms of the order of various running times.\nIn the above graph, the first algorithm is (O(n)) or in the order of n. The second is in (O(n)) as well. The third is in (O(n)).\nIt’s the shape of the curve that shows the efficiency of an algorithm. Some common running times we may see are:\n\n(O(n^2))\n(O(n n))\n(O(n))\n(O(n))\n(O(1))\n\nOf the running times above, (O(n^2)) is considered the slowest running time. (O(1)) is the fastest.\nLinear search was of order (O(n)) because it could take n steps in the worst-case to run.\nBinary search was of order (O(n)) because it would take fewer and fewer steps to run, even in the worst-case.\nProgrammers are interested in both the worst-case, or upper bound, and the best-case, or lower bound.\nThe () symbol is used to denote the best-case of an algorithm, such as ((n)).\nThe () symbol is used to denote where the upper bound and lower bound are the same: Where the best-case and the worst-case running times are the same.\nAsymptotic notation is the measure of how well algorithms perform as the input gets larger and larger.\nAs you continue to develop your knowledge in computer science, you will explore these topics in more detail in future courses.\n\n\n\n\n\nYou can implement linear search by typing code search.c in your terminal window and by writing code as follows:\n// Implements linear search for integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // An array of integers\n    int numbers[] = {20, 500, 10, 5, 100, 1, 50};\n\n    // Search for number\n    int n = get_int(\"Number: \");\n    for (int i = 0; i &lt; 7; i++)\n    {\n        if (numbers[i] == n)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the line beginning with int numbers[] allows us to define the values of each element of the array as we create it. Then, in the for loop, we have an implementation of linear search. return 0 is used to indicate success and exit the program. return 1 is used to exit the program with an error (failure).\nWe have now implemented linear search ourselves in C!\nWhat if we wanted to search for a string within an array? Modify your code as follows:\n// Implements linear search for strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // An array of strings\n    string strings[] = {\"battleship\", \"boot\", \"cannon\", \"iron\", \"thimble\", \"top hat\"};\n\n    // Search for string\n    string s = get_string(\"String: \");\n    for (int i = 0; i &lt; 6; i++)\n    {\n        if (strcmp(strings[i], s) == 0)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that we cannot utilize == as in our previous iteration of this program. Instead, we use strcmp, which comes from the string.h library. strcmp will return 0 if the strings are the same. Also, notice that the string length of 6 is hard-coded, which is not good programming practice.\nIndeed, running this code allows us to iterate over this array of strings to see if a certain string is within it. However, if you see a segmentation fault, where a part of memory was touched by your program that it should not have access to, do make sure you have i &lt; 6 noted above instead of i &lt; 7.\nYou can learn more about strcmp at the CS50 Manual Pages.\n\n\n\n\n\nWe can combine these ideas of both numbers and strings into a single program. Type code phonebook.c into your terminal window and write code as follows:\n// Implements a phone book without structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Arrays of strings\n    string names[] = {\"Yuliia\", \"David\", \"John\"};\n    string numbers[] = {\"+1-617-495-1000\", \"+1-617-495-1000\", \"+1-949-468-2750\"};\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(names[i], name) == 0)\n        {\n            printf(\"Found %s\\n\", numbers[i]);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that Yuliia’s number begins with +1-617, David’s phone number starts with +1-617, and John’s number starts with +1-949. Therefore, names[0] is Yuliia, and numbers[0] is Yuliia’s number. This code will allow us to search the phonebook for a person’s specific number.\nWhile this code works, there are numerous inefficiencies. Indeed, there is a chance that names and phone numbers may not correspond to one another. Wouldn’t it be nice if we could create our own data type where we could associate a person with the phone number?\n\n\n\n\n\nIt turns out that C allows us to create our own data types via a struct.\nWould it not be useful to create our own data type called a person that has inside of it a name and number? Consider the following:\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nNotice how this represents our own datatype called a person that has a string called name and another string called number.\nWe can improve our prior code by modifying our phonebook program as follows:\n// Implements a phone book with structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nint main(void)\n{\n    person people[3];\n\n    people[0].name = \"Yuliia\";\n    people[0].number = \"+1-617-495-1000\";\n\n    people[1].name = \"David\";\n    people[1].number = \"+1-617-495-1000\";\n\n    people[2].name = \"John\";\n    people[2].number = \"+1-949-468-2750\";\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(people[i].name, name) == 0)\n        {\n            printf(\"Found %s\\n\", people[i].number);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the code begins with typedef struct where a new datatype called person is defined. Inside a person is a string called name and a string called number. In the main function, begin by creating an array called people that is of type person that is a size of 3. Then, we update the names and phone numbers of the two people in our people array. Most importantly, notice how the dot notation, such as people[0].name, allows us to access the person at the 0th location and assign that individual a name.\n\n\n\n\n\nSorting is the act of taking an unsorted list of values and transforming this list into a sorted one.\nWhen a list is sorted, searching that list is far less taxing on the computer. Recall that we can use binary search on a sorted list but not on an unsorted one.\nIt turns out that there are many different types of sorting algorithms.\nSelection sort is one such sorting algorithm.\nWe can represent an array as follows:\n\n\n\nSeven red lockers side by side with the last labeled as n-1\n\n\nThe algorithm for selection sort in pseudocode is:\nFor i from 0 to n–1\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n\nSummarizing those steps, the first time iterating through the list took n - 1 steps. The second time, it took n - 2 steps. Carrying this logic forward, the steps required could be represented as follows:\n(n - 1) + (n - 2) + (n - 3) + ... + 1\n\nThis could be simplified to n(n-1)/2 or, more simply, (O(n^2)). In the worst-case or upper-bound, selection sort is in the order of (O(n^2)). In the best-case, or lower-bound, selection sort is in the order of ((n^2)).\n\n\n\n\n\nBubble sort is another sorting algorithm that works by repeatedly swapping elements to “bubble” larger elements to the end.\nThe pseudocode for bubble sort is:\nRepeat n-1 times\n    For i from 0 to n–2\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n    If no swaps\n        Quit\n\nAs we further sort the array, we know more and more of it becomes sorted, so we only need to look at the pairs of numbers that haven’t been sorted yet.\nBubble sort can be analyzed as follows:\n  (n – 1) × (n – 1)\n  n2 – 1n – 1n + 1\n  n2 – 2n + 1\n\nor, more simply (O(n^2)).\nIn the worst-case, or upper-bound, bubble sort is in the order of (O(n^2)). In the best-case, or lower-bound, bubble sort is in the order of ((n)).\nYou can visualize a comparison of these algorithms.\n\n\n\n\n\nHow could we improve our efficiency in our sorting?\nRecursion is a concept within programming where a function calls itself. We saw this earlier when we saw…\nIf no doors left\n    Return false\nIf number behind middle door\n    Return true\nElse if number &lt; middle door\n    Search left half\nElse if number &gt; middle door\n    Search right half\n\nNotice that we are calling search on smaller and smaller iterations of this problem.\nSimilarly, in our pseudocode for Week 0, you can see where recursion was implemented:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n\nThis code could have been simplified to highlight its recursive properties as follows:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Search left half of book\n9  Else if person is later in book\n10     Search right half of book\n12 Else\n13     Quit\n\nConsider how in Week 1 we wanted to create a pyramid structure as follows:\n  #\n  ##\n  ###\n  ####\n\nType code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using iteration\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // Draw pyramid of height n\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; i + 1; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that this code builds the pyramid by looping.\nTo implement this using recursion, type code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using recursion\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // If nothing to draw\n    if (n &lt;= 0)\n    {\n        return;\n    }\n\n    // Draw pyramid of height n - 1\n    draw(n - 1);\n\n    // Draw one more row of width n\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice the base case will ensure the code does not run forever. The line if (n &lt;= 0) terminates the recursion because the problem has been solved. Every time, draw calls itself, it calls itself by n-1. At some point, n-1 will equal 0, resulting in the draw function returning, and the program will end.\n\n\n\n\n\nWe can now leverage recursion in our quest for a more efficient sort algorithm and implement what is called merge sort, a very efficient sort algorithm.\nThe pseudocode for merge sort is quite short:\nIf only one number\n    Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n\nConsider the following list of the numbers:\n  6341\n\nFirst, merge sort asks, “is this one number?” The answer is “no,” so the algorithm continues.\n  6341\n\nSecond, merge sort will now split the numbers down the middle (or as close as it can get) and sort the left half of numbers.\n  63|41\n\nThird, merge sort would look at these numbers on the left and ask, “is this one number?” Since the answer is no, it would then split the numbers on the left down the middle.\n  6|3\n\nFourth, merge sort will again ask, “is this one number?” The answer is yes this time! Therefore, it will quit this task and return to the last task it was running at this point:\n  63|41\n\nFifth, merge sort will sort the numbers on the left.\n  36|41\n\nNow, we return to where we left off in the pseudocode now that the left side has been sorted. A similar process of steps 3-5 will occur with the right-hand numbers. This will result in:\n  36|14\n\nBoth halves are now sorted. Finally, the algorithm will merge both sides. It will look at the first number on the left and the first number on the right. It will put the smaller number first, then the second smallest. The algorithm will repeat this for all numbers, resulting in:\n  1346\n\nMerge sort is complete, and the program quits.\nMerge sort is a very efficient sort algorithm with a worst-case of (O(n n)). The best-case is still ((n n)) because the algorithm still must visit each place in the list. Therefore, merge sort is also ((n n)) since the best-case and worst-case are the same.\nA final visualization was shared.\n\n\n\n\nIn this lesson, you learned about algorithmic thinking and building your own data types. Specifically, you learned…\n\nAlgorithms.\nBig O notation.\nBinary search and linear search.\nVarious sort algorithms, including bubble sort, selection sort, and merge sort.\nRecursion.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_4.html#welcome",
    "href": "notes/notes_4.html#welcome",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "In week zero, we introduced the idea of an algorithm: a black box that may take an input and create an output.\nThis week, we are going to expand upon our understanding of algorithms through pseudocode and into code itself.\nAlso, we are going to consider the efficiency of these algorithms. Indeed, we are going to be building upon our understanding of how to use some of the concepts we discussed last week in building algorithms.\nRecall back to earlier in the course when we introduced the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “n”; green, curved line that gets less and less steep from origin to right of graph, labeled “log n”\n\n\nAs we step into this week, you should consider how the way an algorithm works with a problem may determine the time it takes to solve a problem! Algorithms can be designed to be more and more efficient to a limit.\nToday, we will focus on the design of algorithms and how to measure their efficiency."
  },
  {
    "objectID": "notes/notes_4.html#linear-search",
    "href": "notes/notes_4.html#linear-search",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Recall that last week, you were introduced to the idea of an array, blocks of memory that are consecutive: side-by-side with one another.\nYou can metaphorically imagine an array like a series of seven red lockers as follows:\n\n\n\nSeven red lockers side by side\n\n\nThe far-left position is called location 0 or the beginning of the array. The far-right position is location 7 or the end of the array.\nWe can imagine that we have an essential problem of wanting to know, “Is the number 50 inside an array?” A computer must look at each locker to be able to see if the number 50 is inside. We call this process of finding such a number, character, string, or other item searching.\nWe can potentially hand our array to an algorithm, wherein our algorithm will search through our lockers to see if the number 50 is behind one of the doors, returning the value true or false.\n\n\n\nseven red lockers pointing to an empty box. Out of the empty box comes an output of bool\n\n\nWe can imagine various instructions we might provide our algorithm to undertake this task as follows:\nFor each door from left to right\n    If 50 is behind door\n        Return true\nReturn false\n\nNotice that the above instructions are called pseudocode: A human-readable version of the instructions that we could provide the computer.\nA computer scientist could translate that pseudocode as follows:\nFor i from 0 to n-1\n    If 50 is behind doors[i]\n        Return true\nReturn false\n\nNotice that the above is still not code, but it is a pretty close approximation of what the final code might look like."
  },
  {
    "objectID": "notes/notes_4.html#binary-search",
    "href": "notes/notes_4.html#binary-search",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Binary search is another search algorithm that could be employed in our task of finding the 50.\nAssuming that the values within the lockers have been arranged from smallest to largest, the pseudocode for binary search would appear as follows:\nIf no doors left\n    Return false\nIf 50 is behind middle door\n    Return true\nElse if 50 &lt; middle door\n    Search left half\nElse if 50 &gt; middle door\n    Search right half\n\nUsing the nomenclature of code, we can further modify our algorithm as follows:\nIf no doors left\n    Return false\nIf 50 is behind doors[middle]\n    Return true\nElse if 50 &lt; doors[middle]\n    Search doors[0] through doors[middle - 1]\nElse if 50 &gt; doors[middle]\n    Search doors[middle + 1] through doors[n - 1]\n\nNotice that by looking at this approximation of code, you can nearly imagine what this might look like in actual code."
  },
  {
    "objectID": "notes/notes_4.html#running-time",
    "href": "notes/notes_4.html#running-time",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "You can consider how much time it takes an algorithm to solve a problem.\nrunning time involves an analysis using big O notation. Take a look at the following graph:\n\n\n\nchart with: “size of problem” as x-axis; “time to solve” as y-axis; red, steep straight line from origin to top of graph close to yellow, less-steep straight line from origin to top of graph, both labeled “O(n)”; green, curved line that gets less and less steep from origin to right of graph, labeled “O(log n”\n\n\nRather than being ultra-specific about the mathematical efficiency of an algorithm, computer scientists discuss efficiency in terms of the order of various running times.\nIn the above graph, the first algorithm is (O(n)) or in the order of n. The second is in (O(n)) as well. The third is in (O(n)).\nIt’s the shape of the curve that shows the efficiency of an algorithm. Some common running times we may see are:\n\n(O(n^2))\n(O(n n))\n(O(n))\n(O(n))\n(O(1))\n\nOf the running times above, (O(n^2)) is considered the slowest running time. (O(1)) is the fastest.\nLinear search was of order (O(n)) because it could take n steps in the worst-case to run.\nBinary search was of order (O(n)) because it would take fewer and fewer steps to run, even in the worst-case.\nProgrammers are interested in both the worst-case, or upper bound, and the best-case, or lower bound.\nThe () symbol is used to denote the best-case of an algorithm, such as ((n)).\nThe () symbol is used to denote where the upper bound and lower bound are the same: Where the best-case and the worst-case running times are the same.\nAsymptotic notation is the measure of how well algorithms perform as the input gets larger and larger.\nAs you continue to develop your knowledge in computer science, you will explore these topics in more detail in future courses."
  },
  {
    "objectID": "notes/notes_4.html#search.c",
    "href": "notes/notes_4.html#search.c",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "You can implement linear search by typing code search.c in your terminal window and by writing code as follows:\n// Implements linear search for integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // An array of integers\n    int numbers[] = {20, 500, 10, 5, 100, 1, 50};\n\n    // Search for number\n    int n = get_int(\"Number: \");\n    for (int i = 0; i &lt; 7; i++)\n    {\n        if (numbers[i] == n)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the line beginning with int numbers[] allows us to define the values of each element of the array as we create it. Then, in the for loop, we have an implementation of linear search. return 0 is used to indicate success and exit the program. return 1 is used to exit the program with an error (failure).\nWe have now implemented linear search ourselves in C!\nWhat if we wanted to search for a string within an array? Modify your code as follows:\n// Implements linear search for strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // An array of strings\n    string strings[] = {\"battleship\", \"boot\", \"cannon\", \"iron\", \"thimble\", \"top hat\"};\n\n    // Search for string\n    string s = get_string(\"String: \");\n    for (int i = 0; i &lt; 6; i++)\n    {\n        if (strcmp(strings[i], s) == 0)\n        {\n            printf(\"Found\\n\");\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that we cannot utilize == as in our previous iteration of this program. Instead, we use strcmp, which comes from the string.h library. strcmp will return 0 if the strings are the same. Also, notice that the string length of 6 is hard-coded, which is not good programming practice.\nIndeed, running this code allows us to iterate over this array of strings to see if a certain string is within it. However, if you see a segmentation fault, where a part of memory was touched by your program that it should not have access to, do make sure you have i &lt; 6 noted above instead of i &lt; 7.\nYou can learn more about strcmp at the CS50 Manual Pages."
  },
  {
    "objectID": "notes/notes_4.html#phonebook.c",
    "href": "notes/notes_4.html#phonebook.c",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "We can combine these ideas of both numbers and strings into a single program. Type code phonebook.c into your terminal window and write code as follows:\n// Implements a phone book without structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Arrays of strings\n    string names[] = {\"Yuliia\", \"David\", \"John\"};\n    string numbers[] = {\"+1-617-495-1000\", \"+1-617-495-1000\", \"+1-949-468-2750\"};\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(names[i], name) == 0)\n        {\n            printf(\"Found %s\\n\", numbers[i]);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that Yuliia’s number begins with +1-617, David’s phone number starts with +1-617, and John’s number starts with +1-949. Therefore, names[0] is Yuliia, and numbers[0] is Yuliia’s number. This code will allow us to search the phonebook for a person’s specific number.\nWhile this code works, there are numerous inefficiencies. Indeed, there is a chance that names and phone numbers may not correspond to one another. Wouldn’t it be nice if we could create our own data type where we could associate a person with the phone number?"
  },
  {
    "objectID": "notes/notes_4.html#structs",
    "href": "notes/notes_4.html#structs",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "It turns out that C allows us to create our own data types via a struct.\nWould it not be useful to create our own data type called a person that has inside of it a name and number? Consider the following:\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nNotice how this represents our own datatype called a person that has a string called name and another string called number.\nWe can improve our prior code by modifying our phonebook program as follows:\n// Implements a phone book with structs\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\ntypedef struct\n{\n    string name;\n    string number;\n} person;\n\nint main(void)\n{\n    person people[3];\n\n    people[0].name = \"Yuliia\";\n    people[0].number = \"+1-617-495-1000\";\n\n    people[1].name = \"David\";\n    people[1].number = \"+1-617-495-1000\";\n\n    people[2].name = \"John\";\n    people[2].number = \"+1-949-468-2750\";\n\n    // Search for name\n    string name = get_string(\"Name: \");\n    for (int i = 0; i &lt; 3; i++)\n    {\n        if (strcmp(people[i].name, name) == 0)\n        {\n            printf(\"Found %s\\n\", people[i].number);\n            return 0;\n        }\n    }\n    printf(\"Not found\\n\");\n    return 1;\n}\n\nNotice that the code begins with typedef struct where a new datatype called person is defined. Inside a person is a string called name and a string called number. In the main function, begin by creating an array called people that is of type person that is a size of 3. Then, we update the names and phone numbers of the two people in our people array. Most importantly, notice how the dot notation, such as people[0].name, allows us to access the person at the 0th location and assign that individual a name."
  },
  {
    "objectID": "notes/notes_4.html#sorting",
    "href": "notes/notes_4.html#sorting",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Sorting is the act of taking an unsorted list of values and transforming this list into a sorted one.\nWhen a list is sorted, searching that list is far less taxing on the computer. Recall that we can use binary search on a sorted list but not on an unsorted one.\nIt turns out that there are many different types of sorting algorithms.\nSelection sort is one such sorting algorithm.\nWe can represent an array as follows:\n\n\n\nSeven red lockers side by side with the last labeled as n-1\n\n\nThe algorithm for selection sort in pseudocode is:\nFor i from 0 to n–1\n    Find smallest number between numbers[i] and numbers[n-1]\n    Swap smallest number with numbers[i]\n\nSummarizing those steps, the first time iterating through the list took n - 1 steps. The second time, it took n - 2 steps. Carrying this logic forward, the steps required could be represented as follows:\n(n - 1) + (n - 2) + (n - 3) + ... + 1\n\nThis could be simplified to n(n-1)/2 or, more simply, (O(n^2)). In the worst-case or upper-bound, selection sort is in the order of (O(n^2)). In the best-case, or lower-bound, selection sort is in the order of ((n^2))."
  },
  {
    "objectID": "notes/notes_4.html#bubble-sort",
    "href": "notes/notes_4.html#bubble-sort",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "Bubble sort is another sorting algorithm that works by repeatedly swapping elements to “bubble” larger elements to the end.\nThe pseudocode for bubble sort is:\nRepeat n-1 times\n    For i from 0 to n–2\n        If numbers[i] and numbers[i+1] out of order\n            Swap them\n    If no swaps\n        Quit\n\nAs we further sort the array, we know more and more of it becomes sorted, so we only need to look at the pairs of numbers that haven’t been sorted yet.\nBubble sort can be analyzed as follows:\n  (n – 1) × (n – 1)\n  n2 – 1n – 1n + 1\n  n2 – 2n + 1\n\nor, more simply (O(n^2)).\nIn the worst-case, or upper-bound, bubble sort is in the order of (O(n^2)). In the best-case, or lower-bound, bubble sort is in the order of ((n)).\nYou can visualize a comparison of these algorithms."
  },
  {
    "objectID": "notes/notes_4.html#recursion",
    "href": "notes/notes_4.html#recursion",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "How could we improve our efficiency in our sorting?\nRecursion is a concept within programming where a function calls itself. We saw this earlier when we saw…\nIf no doors left\n    Return false\nIf number behind middle door\n    Return true\nElse if number &lt; middle door\n    Search left half\nElse if number &gt; middle door\n    Search right half\n\nNotice that we are calling search on smaller and smaller iterations of this problem.\nSimilarly, in our pseudocode for Week 0, you can see where recursion was implemented:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n\nThis code could have been simplified to highlight its recursive properties as follows:\n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Search left half of book\n9  Else if person is later in book\n10     Search right half of book\n12 Else\n13     Quit\n\nConsider how in Week 1 we wanted to create a pyramid structure as follows:\n  #\n  ##\n  ###\n  ####\n\nType code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using iteration\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // Draw pyramid of height n\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; i + 1; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that this code builds the pyramid by looping.\nTo implement this using recursion, type code iteration.c into your terminal window and write code as follows:\n// Draws a pyramid using recursion\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid draw(int n);\n\nint main(void)\n{\n    // Get height of pyramid\n    int height = get_int(\"Height: \");\n\n    // Draw pyramid\n    draw(height);\n}\n\nvoid draw(int n)\n{\n    // If nothing to draw\n    if (n &lt;= 0)\n    {\n        return;\n    }\n\n    // Draw pyramid of height n - 1\n    draw(n - 1);\n\n    // Draw one more row of width n\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice the base case will ensure the code does not run forever. The line if (n &lt;= 0) terminates the recursion because the problem has been solved. Every time, draw calls itself, it calls itself by n-1. At some point, n-1 will equal 0, resulting in the draw function returning, and the program will end."
  },
  {
    "objectID": "notes/notes_4.html#merge-sort",
    "href": "notes/notes_4.html#merge-sort",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "We can now leverage recursion in our quest for a more efficient sort algorithm and implement what is called merge sort, a very efficient sort algorithm.\nThe pseudocode for merge sort is quite short:\nIf only one number\n    Quit\nElse\n    Sort left half of number\n    Sort right half of number\n    Merge sorted halves\n\nConsider the following list of the numbers:\n  6341\n\nFirst, merge sort asks, “is this one number?” The answer is “no,” so the algorithm continues.\n  6341\n\nSecond, merge sort will now split the numbers down the middle (or as close as it can get) and sort the left half of numbers.\n  63|41\n\nThird, merge sort would look at these numbers on the left and ask, “is this one number?” Since the answer is no, it would then split the numbers on the left down the middle.\n  6|3\n\nFourth, merge sort will again ask, “is this one number?” The answer is yes this time! Therefore, it will quit this task and return to the last task it was running at this point:\n  63|41\n\nFifth, merge sort will sort the numbers on the left.\n  36|41\n\nNow, we return to where we left off in the pseudocode now that the left side has been sorted. A similar process of steps 3-5 will occur with the right-hand numbers. This will result in:\n  36|14\n\nBoth halves are now sorted. Finally, the algorithm will merge both sides. It will look at the first number on the left and the first number on the right. It will put the smaller number first, then the second smallest. The algorithm will repeat this for all numbers, resulting in:\n  1346\n\nMerge sort is complete, and the program quits.\nMerge sort is a very efficient sort algorithm with a worst-case of (O(n n)). The best-case is still ((n n)) because the algorithm still must visit each place in the list. Therefore, merge sort is also ((n n)) since the best-case and worst-case are the same.\nA final visualization was shared."
  },
  {
    "objectID": "notes/notes_4.html#summing-up",
    "href": "notes/notes_4.html#summing-up",
    "title": "Lecture 4 Notes",
    "section": "",
    "text": "In this lesson, you learned about algorithmic thinking and building your own data types. Specifically, you learned…\n\nAlgorithms.\nBig O notation.\nBinary search and linear search.\nVarious sort algorithms, including bubble sort, selection sort, and merge sort.\nRecursion.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_2.html",
    "href": "notes/notes_2.html",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Welcome!\nVisual Studio Code for CS50\nHello World\nFrom Scratch to C\nHeader Files and CS50 Manual Pages\nHello, You\nTypes\nConditionals\nOperators\nVariables\ncompare.c\nagree.c\nLoops and meow.c\nFunctions\nCorrectness, Design, Style\nMario\nComments\nMore About Operators\nTruncation\nSumming Up\n\n\n\n\nIn our previous session, we learned about Scratch, a visual programming language.\nIndeed, all the essential programming concepts presented in Scratch will be utilized as you learn how to program any programming language. Functions, conditionals, loops, and variables found in Scratch are fundamental building blocks that you will find in any programming language.\nRecall that machines only understand binary. Where humans write source code, a list of instructions for the computer that is human readable, machines only understand what we can now call machine code. This machine code is a pattern of ones and zeros that produces a desired effect.\nIt turns out that we can convert source code into machine code using a very special piece of software called a compiler. Today, we will be introducing you to a compiler that will allow you to convert source code in the programming language C into machine code.\nToday, in addition to learning how to program, you will be learning how to write good code.\n\n\n\n\n\nThe text editor that is utilized for this course is Visual Studio Code, aka VS Code, affectionately referred to as cs50.dev, which can be accessed via that same URL.\nOne of the most important reasons we utilize VS Code is that it has all the software required for the course already pre-loaded on it. This course and the instructions herein were designed with VS Code in mind.\nManually installing the necessary software for the course on your own computer is a cumbersome headache. Best always to utilize VS Code for assignments in this course.\nYou can open VS Code at cs50.dev.\nThe compiler can be divided into a number of regions:\n Notice that there is a file explorer on the left side where you can find your files. Further, notice that there is a region in the middle called a text editor where you can edit your program. Finally, there is a command line interface, known as a CLI, command line, or terminal window, where we can send commands to the computer in the cloud.\nIn the terminal window, some common command-line arguments we may use include:\n\ncd, for changing our current directory (folder)\ncp, for copying files and directories\nls, for listing files in a directory\nmkdir, for making a directory\nmv, for moving (renaming) files and directories\nrm, for removing (deleting) files\nrmdir, for removing (deleting) directories\n\nThe most commonly used is ls which will list all the files in the current directory. Go ahead and type ls into the terminal window and hit enter. You’ll see all the files in the current folder.\nBecause this IDE is preconfigured with all the necessary software, you should use it to complete all assignments for this course.\n\n\n\n\n\nWe will be using three commands to write, compile, and run our first program:\ncode hello.c\n\nmake hello\n\n./hello\n\n\nThe first command, code hello.c creates a file and allows us to type instructions for this program. The second command, make hello, compiles the file from our instructions in C and creates an executable file called hello. The last command, ./hello, runs the program called hello.\nWe can build your first program in C by typing code hello.c into the terminal window. Notice that we deliberately lowercased the entire filename and included the .c extension. Then, in the text editor that appears, write code as follows:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNote that every single character above serves a purpose. If you type it incorrectly, the program will not run. printf is a function that can output a line of text. Notice the placement of the quotes and the semicolon. Further, notice that the \\n creates a new line after the words hello, world.\nClicking back in the terminal window, you can compile your code by executing make hello. Notice that we are omitting .c. make is a compiler that will look for our hello.c file and turn it into a program called hello. If executing this command results in no errors, you can proceed. If not, double-check your code to ensure it matches the above.\nNow, type ./hello and your program will execute saying hello, world.\nNow, open the file explorer on the left. You will notice that there is now both a file called hello.c and another file called hello. hello.c is able to be read by the compiler: It’s where your code is stored. hello is an executable file that you can run but cannot be read by the compiler.\n\n\n\n\n\nIn Scratch, we utilized the say block to display any text on the screen. Indeed, in C, we have a function called printf that does exactly this.\nNotice our code already invokes this function:\nprintf(\"hello, world\\n\");\n\nNotice that the printf function is called. The argument passed to printf is hello, world\\n. The statement of code is closed with a ;.\nErrors in code are common. Modify your code as follows:\n// \\n is missing\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\");\n}\n\nNotice the \\n is now gone.\nIn your terminal window, run make hello. Typing ./hello in the terminal window, how did your program change? This \\ character is called an escape character that tells the compiler that \\n is a special instruction to create a line break.\nThere are other escape characters you can use:\n\\n  create a new line\n\\r  return to the start of a line\n\\\"  print a double quote\n\\'  print a single quote\n\\\\  print a backslash\n\nRestore your program to the following:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNotice the semicolon and \\n have been restored.\n\n\n\n\n\nThe statement at the start of the code #include &lt;stdio.h&gt; is a very special command that tells the compile that you want to use the capabilities of a library called stdio.h, a header file. This allows you, among many other things, to utilize the printf function.\nA library is a collection of code created by someone. Libraries are collections of pre-written code and functions that others have written in the past that we can utilize in our code.\nYou can read about all the capabilities of this library on the Manual Pages. The Manual Pages provide a means by which to better understand what various commands do and how they function.\nIt turns out that CS50 has its own library called cs50.h. There are numerous functions that are included that provide training wheels while you get started in C:\nget_char\nget_double\nget_float\nget_int\nget_long\nget_string\n\nLet’s use this library in your program.\n\n\n\n\n\nRecall that in Scratch we had the ability to ask the user, “What’s your name?” and say “hello” with that name appended to it.\nIn C, we can do the same. Modify your code as follows:\n// get_string and printf with incorrect placeholder\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, answer\\n\");\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function.\nRunning make hello again in the terminal window, notice that numerous errors appear.\nLooking at the errors, string and get_string are not recognized by the compiler. We have to teach the compiler these features by adding a library called cs50.h. Also, we notice that answer is not provided as we intended. Modify your code as follows:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function. %s tells the printf function to prepare itself to receive a string.\nNow, running make hello again in the terminal window, you can run your program by typing ./hello. The program now asks for your name and then says hello with your name attached, as intended.\nanswer is a special holding place we call a variable. answer is of type string and can hold any string within it. There are many data types, such as int, bool, char, and many others.\n%s is a placeholder called a format code that tells the printf function to prepare to receive a string. answer is the string being passed to %s.\n\n\n\n\n\nprintf allows for many format codes. Here is a non-comprehensive list of ones you may utilize in this course:\n%c\n%f\n%i\n%li\n%s\n\n%s is used for string variables. %i is used for int or integer variables. You can find out more about this on the Manual Pages\nThese format codes correspond to the many data types that are available within C:\nbool\nchar\nfloat\nint\nlong\nstring\n...\n\nWe will be using many of C’s available data types throughout this course.\n\n\n\n\n\nAnother building block you utilized within Scratch was conditionals. For example, you might want to do one thing if x is greater than y. Further, you might want to do something else if that condition is not met.\nWe look at a few examples from Scratch.\nIn C, you can compare two values as follows:\n// Conditionals that are mutually exclusive\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse\n{\n    printf(\"x is not less than y\\n\");\n}\n\nNotice how if x &lt; y, one outcome occurs. If x is not less than y, then another outcome occurs.\nSimilarly, we can plan for three possible outcomes:\n// Conditional that isn't necessary\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse if (x == y)\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice that not all these lines of code are required. How could we eliminate the unnecessary calculation above?\nYou may have guessed that we can improve this code as follows:\n// Compare integers\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice how the final statement is replaced with else.\n\n\n\n\n\nOperators refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:\n\n+ for addition\n- for subtraction\n* for multiplication\n/ for division\n% for remainder\n\nWe will use all of these operators in this course.\n\n\n\n\n\nIn C, you can assign a value to an int or integer as follows:\nint counter = 0;\n\nNotice how a variable called counter of type int is assigned the value 0.\nC can also be programmed to add one to counter as follows:\ncounter = counter + 1;\n\nNotice how 1 is added to the value of counter.\nThis can be also represented as:\ncounter += 1;\n\nThis can be further simplified to:\ncounter++;\n\nNotice how the ++ is used to add 1.\nYou can also subtract one from counter as follows:\ncounter--;\n\nNotice how 1 is removed from the value of counter.\n\n\n\n\n\nUsing this new knowledge about how to assign values to variables, you can program your first conditional statement.\nIn the terminal window, type code compare.c and write code as follows:\n// Conditional, Boolean expression, relational operator\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n}\n\nNotice that we create two variables, an int or integer called x and another called y. The values of these are populated using the get_int function.\nYou can run your code by executing make compare in the terminal window, followed by ./compare. If you get any error messages, check your code for errors.\nFlow charts are a way by which you can examine how a computer program functions. Such charts can be used to examine the efficiency of our code.\nLooking at a flow chart of the above code, we can notice numerous shortcomings.\nWe can improve your program by coding as follows:\n// Conditionals\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nNotice that all potential outcomes are now accounted for.\nYou can re-make and re-run your program and test it out.\nExamining this program on a flow chart, you can see the efficiency of our code design decisions.\n\n\n\n\n\nConsidering another data type called a char, we can start a new program by typing code agree.c into the terminal window.\nWhere a string is a series of characters, a char is a single character.\nIn the text editor, write code as follows:\n// Comparing against lowercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that single quotes are utilized for single characters. Further, notice that == ensures that something is equal to something else, where a single equal sign would have a very different function in C.\nYou can test your code by typing make agree into the terminal window, followed by ./agree.\nWe can also allow for the inputting of uppercase and lowercase characters:\n// Comparing against lowercase and uppercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'Y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n    else if (c == 'N')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that additional options are offered. However, this is not efficient code.\nWe can improve this code as follows:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that || effectively means or.\n\n\n\n\n\nWe can also utilize the loop building block from Scratch in our C programs.\nIn your terminal window, type code meow.c and write code as follows:\n// Opportunity for better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n}\n\nNotice this does as intended but has an opportunity for better design. Code is repeated over and over.\nWe can improve our program by modifying your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 3;\n    while (i &gt; 0)\n    {\n        printf(\"meow\\n\");\n        i--;\n    }\n}\n\nNotice that we create an int called i and assign it the value 3. Then, we create a while loop that will run as long as i &gt; 0. Then, the loop runs. Every time 1 is subtracted to i using the i-- statement.\nSimilarly, we can implement a count-up of sorts by modifying our code as follows:\n// Print values of i\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 1;\n    while (i &lt;= 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice how our counter i is started at 1. Each time the loop runs, it will increment the counter by 1. Once the counter is greater than 3, it will stop the loop.\nGenerally, in computer science, we count from zero. Best to revise your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 0;\n    while (i &lt; 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice we now count from zero.\nAnother tool in our toolbox for looping is a for loop.\nYou can further improve the design of our meow.c program using a for loop. Modify your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the for loop includes three arguments. The first argument int i = 0 starts our counter at zero. The second argument i &lt; 3 is the condition that is being checked. Finally, the argument i++ tells the loop to increment by one each time the loop runs.\nWe can even loop forever using the following code:\n// Infinite loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    while (true)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that true will always be the case. Therefore, the code will always run. You will lose control of your terminal window by running this code. You can break from an infinite loop by hitting control-C on your keyboard.\n\n\n\n\n\nWhile we will provide much more guidance later, you can create your own function within C as follows:\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nThe initial void means that the function does not return any values. The (void) means that no values are being provided to the function.\nThis function can be used in the main function as follows:\n// Abstraction\n\n#include &lt;stdio.h&gt;\n\nvoid meow(void);\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        meow();\n    }\n}\n\n// Meow once\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nNotice how the meow function is called with the meow() instruction. This is possible because the meow function is defined at the bottom of the code, and the prototype of the function is provided at the top of the code as void meow(void).\nYour meow function can be further modified to accept input:\n// Abstraction with parameterization\n\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    meow(3);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the prototype has changed to void meow(int n) to show that meow accepts an int as its input.\nAdditionally, we can get user input:\n// User input\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    meow(n);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that get_int is used to obtain a number from the user. n is passed to meow.\nWe can even test to ensure that the input we get provided by the user is correct:\n// Return value\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_positive_int(void);\nvoid meow(int n);\n\nint main(void)\n{\n    int n = get_positive_int();\n    meow(n);\n}\n\n// Get number of meows\nint get_positive_int(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    return n;\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that a new function called get_positive_int asks the user for an integer while n &lt; 1. After obtaining a positive integer, this function will return n back to the main function.\n\n\n\n\n\nCode can be evaluated upon three axes.\nFirst, correctness refers to “Does the code run as intended?” You can check the correctness of your code with check50.\nSecond, design refers to “How well is the code designed?” You can evaluate the design of your code using design50.\nFinally, style refers to “How aesthetically pleasing and consistent is the code?” You can evaluate the style of your code with style50.\n\n\n\n\n\nEverything we’ve discussed today has focused on various building blocks of your work as an emerging computer scientist.\nThe following will help you orient toward working on a problem set for this class in general: How does one approach a computer science-related problem?\nImagine we wanted to emulate the visual of the game Super Mario Bros. Considering the four question blocks pictured, how could we create code that roughly represents these four horizontal blocks?\n\n\n\nMario Question Marks\n\n\nIn the terminal window, type code mario.c and code as follows:\n// Prints a row of 4 question marks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"?\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how four question marks are printed here using a loop.\nSimilarly, we can apply this same logic to create three vertical blocks.\n\n\n\nMario Blocks\n\n\nTo accomplish this, modify your code as follows:\n// Prints a column of 3 bricks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice how three vertical bricks are printed using a loop.\nWhat if we wanted to combine these ideas to create a three-by-three group of blocks?\n\n\n\nMario Grid\n\n\nWe can follow the logic above, combining the same ideas. Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        for (int j = 0; j &lt; 3; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that one loop is inside another. The first loop defines what vertical row is being printed. For each row, three columns are printed. After each row, a new line is printed.\nWhat if we wanted to ensure that the number of blocks is constant, that is, unchangeable? Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops using a constant\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice how n is now a constant. It can never be changed.\nAs illustrated earlier in this lecture, we can abstract away functionality into functions. Consider the following code:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how printing a row is accomplished through a new function.\n\n\n\n\n\nComments are fundamental parts of a computer program, where you leave explanatory remarks to yourself and others who may be collaborating with you regarding your code.\nAll code you create for this course must include robust comments.\nTypically, each comment is a few words or more, providing the reader an opportunity to understand what is happening in a specific block of code. Further, such comments serve as a reminder for you later when you need to revise your code.\nComments involve placing // into your code, followed by a comment. Modify your code as follows to integrate comments:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n\n    // Print n rows\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how each comment begins with a //.\n\n\n\n\n\nYou can implement a calculator in C. In your terminal, type code calculator.c and write code as follows:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Add numbers\n    int z = x + y;\n\n    // Perform addition\n    printf(\"%i\\n\", z);\n}\n\nNotice how the get_int function is utilized to obtain an integer from the user twice. One integer is stored in the int variable called x. Another is stored in the int variable called y. The sum is stored in z. Then, the printf function prints the value of z, designated by the %i symbol.\nWe can also double a number:\n// int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%i. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%i.\\n\", dollars);\n}\n\nRunning this program, some seeming errors appear in dollars. Why is this?\nOne of C’s shortcomings is the ease by which it manages memory. While C provides you immense control over how memory is utilized, programmers have to be very aware of the potential pitfalls of memory management.\nTypes refer to the possible data that can be stored within a variable. For example, a char is designed to accommodate a single character like a or 2.\nTypes are very important because each type has specific limits. For example, because of the limits in memory, the highest value of an int can be 4294967295. If you attempt to count an int higher, an integer overflow will result where an incorrect value will be stored in this variable.\nThe number of bits limits how high and low we can count.\nThis can have catastrophic, real-world impacts.\nWe can correct this by using a data type called long.\n// long\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    long dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%li. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%li.\\n\", dollars);\n}\n\nNotice how running this code will allow for very high dollar amounts.\nTypes with which you might interact during this course include:\n\nbool, a Boolean expression of either true or false\nchar, a single character like a or 2\ndouble, a floating-point value with more digits than a float\nfloat, a floating-point value, or a real number with a decimal value\nint, integers up to a certain size, or number of bits\nlong, integers with more bits, so they can count higher than an int\nstring, a string of characters\n\n\n\n\n\n\nAnother issue that can arise when using data types includes truncation.\n// Division with ints, demonstrating truncation\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Divide x by y\n    printf(\"%i\\n\", x / y);\n}\n\nAn integer divided by an integer will always result in an integer in C. Accordingly, the above code will often result in any digits after the decimal being thrown away.\nThis can be solved by employing a float:\n// Floats\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    float x = get_float(\"x: \");\n\n    // Prompt user for y\n    float y = get_float(\"y: \");\n\n    // Divide x by y\n    printf(\"%.50f\\n\", x / y);\n}\n\nNotice that this solves some of our problems. However, we might notice imprecision in the answer provided by the program.\nFloating point imprecision illustrates that there are limits to how precise computers can calculate numbers.\nAs you are coding, pay special attention to the types of variables you are using to avoid problems within your code.\nWe examined some examples of disasters that can occur through type-related errors.\n\n\n\n\nIn this lesson, you learned how to apply the building blocks you learned in Scratch to the C programming language. You learned…\n\nHow to create your first program in C.\nHow to use the command line.\nAbout predefined functions that come natively with C.\nHow to use variables, conditionals, and loops.\nHow to create your own functions to simplify and improve your code.\nHow to evaluate your code on three axes: correctness, design, and style.\nHow to integrate comments into your code.\nHow to utilize types and operators and the implications of your choices.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_2.html#welcome",
    "href": "notes/notes_2.html#welcome",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In our previous session, we learned about Scratch, a visual programming language.\nIndeed, all the essential programming concepts presented in Scratch will be utilized as you learn how to program any programming language. Functions, conditionals, loops, and variables found in Scratch are fundamental building blocks that you will find in any programming language.\nRecall that machines only understand binary. Where humans write source code, a list of instructions for the computer that is human readable, machines only understand what we can now call machine code. This machine code is a pattern of ones and zeros that produces a desired effect.\nIt turns out that we can convert source code into machine code using a very special piece of software called a compiler. Today, we will be introducing you to a compiler that will allow you to convert source code in the programming language C into machine code.\nToday, in addition to learning how to program, you will be learning how to write good code."
  },
  {
    "objectID": "notes/notes_2.html#visual-studio-code-for-cs50",
    "href": "notes/notes_2.html#visual-studio-code-for-cs50",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "The text editor that is utilized for this course is Visual Studio Code, aka VS Code, affectionately referred to as cs50.dev, which can be accessed via that same URL.\nOne of the most important reasons we utilize VS Code is that it has all the software required for the course already pre-loaded on it. This course and the instructions herein were designed with VS Code in mind.\nManually installing the necessary software for the course on your own computer is a cumbersome headache. Best always to utilize VS Code for assignments in this course.\nYou can open VS Code at cs50.dev.\nThe compiler can be divided into a number of regions:\n Notice that there is a file explorer on the left side where you can find your files. Further, notice that there is a region in the middle called a text editor where you can edit your program. Finally, there is a command line interface, known as a CLI, command line, or terminal window, where we can send commands to the computer in the cloud.\nIn the terminal window, some common command-line arguments we may use include:\n\ncd, for changing our current directory (folder)\ncp, for copying files and directories\nls, for listing files in a directory\nmkdir, for making a directory\nmv, for moving (renaming) files and directories\nrm, for removing (deleting) files\nrmdir, for removing (deleting) directories\n\nThe most commonly used is ls which will list all the files in the current directory. Go ahead and type ls into the terminal window and hit enter. You’ll see all the files in the current folder.\nBecause this IDE is preconfigured with all the necessary software, you should use it to complete all assignments for this course."
  },
  {
    "objectID": "notes/notes_2.html#hello-world",
    "href": "notes/notes_2.html#hello-world",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "We will be using three commands to write, compile, and run our first program:\ncode hello.c\n\nmake hello\n\n./hello\n\n\nThe first command, code hello.c creates a file and allows us to type instructions for this program. The second command, make hello, compiles the file from our instructions in C and creates an executable file called hello. The last command, ./hello, runs the program called hello.\nWe can build your first program in C by typing code hello.c into the terminal window. Notice that we deliberately lowercased the entire filename and included the .c extension. Then, in the text editor that appears, write code as follows:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNote that every single character above serves a purpose. If you type it incorrectly, the program will not run. printf is a function that can output a line of text. Notice the placement of the quotes and the semicolon. Further, notice that the \\n creates a new line after the words hello, world.\nClicking back in the terminal window, you can compile your code by executing make hello. Notice that we are omitting .c. make is a compiler that will look for our hello.c file and turn it into a program called hello. If executing this command results in no errors, you can proceed. If not, double-check your code to ensure it matches the above.\nNow, type ./hello and your program will execute saying hello, world.\nNow, open the file explorer on the left. You will notice that there is now both a file called hello.c and another file called hello. hello.c is able to be read by the compiler: It’s where your code is stored. hello is an executable file that you can run but cannot be read by the compiler."
  },
  {
    "objectID": "notes/notes_2.html#from-scratch-to-c",
    "href": "notes/notes_2.html#from-scratch-to-c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In Scratch, we utilized the say block to display any text on the screen. Indeed, in C, we have a function called printf that does exactly this.\nNotice our code already invokes this function:\nprintf(\"hello, world\\n\");\n\nNotice that the printf function is called. The argument passed to printf is hello, world\\n. The statement of code is closed with a ;.\nErrors in code are common. Modify your code as follows:\n// \\n is missing\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\");\n}\n\nNotice the \\n is now gone.\nIn your terminal window, run make hello. Typing ./hello in the terminal window, how did your program change? This \\ character is called an escape character that tells the compiler that \\n is a special instruction to create a line break.\nThere are other escape characters you can use:\n\\n  create a new line\n\\r  return to the start of a line\n\\\"  print a double quote\n\\'  print a single quote\n\\\\  print a backslash\n\nRestore your program to the following:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nNotice the semicolon and \\n have been restored."
  },
  {
    "objectID": "notes/notes_2.html#header-files-and-cs50-manual-pages",
    "href": "notes/notes_2.html#header-files-and-cs50-manual-pages",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "The statement at the start of the code #include &lt;stdio.h&gt; is a very special command that tells the compile that you want to use the capabilities of a library called stdio.h, a header file. This allows you, among many other things, to utilize the printf function.\nA library is a collection of code created by someone. Libraries are collections of pre-written code and functions that others have written in the past that we can utilize in our code.\nYou can read about all the capabilities of this library on the Manual Pages. The Manual Pages provide a means by which to better understand what various commands do and how they function.\nIt turns out that CS50 has its own library called cs50.h. There are numerous functions that are included that provide training wheels while you get started in C:\nget_char\nget_double\nget_float\nget_int\nget_long\nget_string\n\nLet’s use this library in your program."
  },
  {
    "objectID": "notes/notes_2.html#hello-you",
    "href": "notes/notes_2.html#hello-you",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Recall that in Scratch we had the ability to ask the user, “What’s your name?” and say “hello” with that name appended to it.\nIn C, we can do the same. Modify your code as follows:\n// get_string and printf with incorrect placeholder\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, answer\\n\");\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function.\nRunning make hello again in the terminal window, notice that numerous errors appear.\nLooking at the errors, string and get_string are not recognized by the compiler. We have to teach the compiler these features by adding a library called cs50.h. Also, we notice that answer is not provided as we intended. Modify your code as follows:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThe get_string function is used to get a string from the user. Then, the variable answer is passed to the printf function. %s tells the printf function to prepare itself to receive a string.\nNow, running make hello again in the terminal window, you can run your program by typing ./hello. The program now asks for your name and then says hello with your name attached, as intended.\nanswer is a special holding place we call a variable. answer is of type string and can hold any string within it. There are many data types, such as int, bool, char, and many others.\n%s is a placeholder called a format code that tells the printf function to prepare to receive a string. answer is the string being passed to %s."
  },
  {
    "objectID": "notes/notes_2.html#types",
    "href": "notes/notes_2.html#types",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "printf allows for many format codes. Here is a non-comprehensive list of ones you may utilize in this course:\n%c\n%f\n%i\n%li\n%s\n\n%s is used for string variables. %i is used for int or integer variables. You can find out more about this on the Manual Pages\nThese format codes correspond to the many data types that are available within C:\nbool\nchar\nfloat\nint\nlong\nstring\n...\n\nWe will be using many of C’s available data types throughout this course."
  },
  {
    "objectID": "notes/notes_2.html#conditionals",
    "href": "notes/notes_2.html#conditionals",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Another building block you utilized within Scratch was conditionals. For example, you might want to do one thing if x is greater than y. Further, you might want to do something else if that condition is not met.\nWe look at a few examples from Scratch.\nIn C, you can compare two values as follows:\n// Conditionals that are mutually exclusive\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse\n{\n    printf(\"x is not less than y\\n\");\n}\n\nNotice how if x &lt; y, one outcome occurs. If x is not less than y, then another outcome occurs.\nSimilarly, we can plan for three possible outcomes:\n// Conditional that isn't necessary\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse if (x == y)\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice that not all these lines of code are required. How could we eliminate the unnecessary calculation above?\nYou may have guessed that we can improve this code as follows:\n// Compare integers\n\nif (x &lt; y)\n{\n    printf(\"x is less than y\\n\");\n}\nelse if (x &gt; y)\n{\n    printf(\"x is greater than y\\n\");\n}\nelse\n{\n    printf(\"x is equal to y\\n\");\n}\n\nNotice how the final statement is replaced with else."
  },
  {
    "objectID": "notes/notes_2.html#operators",
    "href": "notes/notes_2.html#operators",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Operators refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:\n\n+ for addition\n- for subtraction\n* for multiplication\n/ for division\n% for remainder\n\nWe will use all of these operators in this course."
  },
  {
    "objectID": "notes/notes_2.html#variables",
    "href": "notes/notes_2.html#variables",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In C, you can assign a value to an int or integer as follows:\nint counter = 0;\n\nNotice how a variable called counter of type int is assigned the value 0.\nC can also be programmed to add one to counter as follows:\ncounter = counter + 1;\n\nNotice how 1 is added to the value of counter.\nThis can be also represented as:\ncounter += 1;\n\nThis can be further simplified to:\ncounter++;\n\nNotice how the ++ is used to add 1.\nYou can also subtract one from counter as follows:\ncounter--;\n\nNotice how 1 is removed from the value of counter."
  },
  {
    "objectID": "notes/notes_2.html#compare.c",
    "href": "notes/notes_2.html#compare.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Using this new knowledge about how to assign values to variables, you can program your first conditional statement.\nIn the terminal window, type code compare.c and write code as follows:\n// Conditional, Boolean expression, relational operator\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n}\n\nNotice that we create two variables, an int or integer called x and another called y. The values of these are populated using the get_int function.\nYou can run your code by executing make compare in the terminal window, followed by ./compare. If you get any error messages, check your code for errors.\nFlow charts are a way by which you can examine how a computer program functions. Such charts can be used to examine the efficiency of our code.\nLooking at a flow chart of the above code, we can notice numerous shortcomings.\nWe can improve your program by coding as follows:\n// Conditionals\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nNotice that all potential outcomes are now accounted for.\nYou can re-make and re-run your program and test it out.\nExamining this program on a flow chart, you can see the efficiency of our code design decisions."
  },
  {
    "objectID": "notes/notes_2.html#agree.c",
    "href": "notes/notes_2.html#agree.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Considering another data type called a char, we can start a new program by typing code agree.c into the terminal window.\nWhere a string is a series of characters, a char is a single character.\nIn the text editor, write code as follows:\n// Comparing against lowercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that single quotes are utilized for single characters. Further, notice that == ensures that something is equal to something else, where a single equal sign would have a very different function in C.\nYou can test your code by typing make agree into the terminal window, followed by ./agree.\nWe can also allow for the inputting of uppercase and lowercase characters:\n// Comparing against lowercase and uppercase char\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'Y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n    else if (c == 'N')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that additional options are offered. However, this is not efficient code.\nWe can improve this code as follows:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nNotice that || effectively means or."
  },
  {
    "objectID": "notes/notes_2.html#loops-and-meow.c",
    "href": "notes/notes_2.html#loops-and-meow.c",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "We can also utilize the loop building block from Scratch in our C programs.\nIn your terminal window, type code meow.c and write code as follows:\n// Opportunity for better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n    printf(\"meow\\n\");\n}\n\nNotice this does as intended but has an opportunity for better design. Code is repeated over and over.\nWe can improve our program by modifying your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 3;\n    while (i &gt; 0)\n    {\n        printf(\"meow\\n\");\n        i--;\n    }\n}\n\nNotice that we create an int called i and assign it the value 3. Then, we create a while loop that will run as long as i &gt; 0. Then, the loop runs. Every time 1 is subtracted to i using the i-- statement.\nSimilarly, we can implement a count-up of sorts by modifying our code as follows:\n// Print values of i\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 1;\n    while (i &lt;= 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice how our counter i is started at 1. Each time the loop runs, it will increment the counter by 1. Once the counter is greater than 3, it will stop the loop.\nGenerally, in computer science, we count from zero. Best to revise your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int i = 0;\n    while (i &lt; 3)\n    {\n        printf(\"meow\\n\");\n        i++;\n    }\n}\n\nNotice we now count from zero.\nAnother tool in our toolbox for looping is a for loop.\nYou can further improve the design of our meow.c program using a for loop. Modify your code as follows:\n// Better design\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the for loop includes three arguments. The first argument int i = 0 starts our counter at zero. The second argument i &lt; 3 is the condition that is being checked. Finally, the argument i++ tells the loop to increment by one each time the loop runs.\nWe can even loop forever using the following code:\n// Infinite loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    while (true)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that true will always be the case. Therefore, the code will always run. You will lose control of your terminal window by running this code. You can break from an infinite loop by hitting control-C on your keyboard."
  },
  {
    "objectID": "notes/notes_2.html#functions",
    "href": "notes/notes_2.html#functions",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "While we will provide much more guidance later, you can create your own function within C as follows:\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nThe initial void means that the function does not return any values. The (void) means that no values are being provided to the function.\nThis function can be used in the main function as follows:\n// Abstraction\n\n#include &lt;stdio.h&gt;\n\nvoid meow(void);\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        meow();\n    }\n}\n\n// Meow once\nvoid meow(void)\n{\n    printf(\"meow\\n\");\n}\n\nNotice how the meow function is called with the meow() instruction. This is possible because the meow function is defined at the bottom of the code, and the prototype of the function is provided at the top of the code as void meow(void).\nYour meow function can be further modified to accept input:\n// Abstraction with parameterization\n\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    meow(3);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that the prototype has changed to void meow(int n) to show that meow accepts an int as its input.\nAdditionally, we can get user input:\n// User input\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid meow(int n);\n\nint main(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    meow(n);\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that get_int is used to obtain a number from the user. n is passed to meow.\nWe can even test to ensure that the input we get provided by the user is correct:\n// Return value\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint get_positive_int(void);\nvoid meow(int n);\n\nint main(void)\n{\n    int n = get_positive_int();\n    meow(n);\n}\n\n// Get number of meows\nint get_positive_int(void)\n{\n    int n;\n    do\n    {\n        n = get_int(\"Number: \");\n    }\n    while (n &lt; 1);\n    return n;\n}\n\n// Meow some number of times\nvoid meow(int n)\n{\n    for (int i = 0; i &lt; n; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nNotice that a new function called get_positive_int asks the user for an integer while n &lt; 1. After obtaining a positive integer, this function will return n back to the main function."
  },
  {
    "objectID": "notes/notes_2.html#correctness-design-style",
    "href": "notes/notes_2.html#correctness-design-style",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Code can be evaluated upon three axes.\nFirst, correctness refers to “Does the code run as intended?” You can check the correctness of your code with check50.\nSecond, design refers to “How well is the code designed?” You can evaluate the design of your code using design50.\nFinally, style refers to “How aesthetically pleasing and consistent is the code?” You can evaluate the style of your code with style50."
  },
  {
    "objectID": "notes/notes_2.html#mario",
    "href": "notes/notes_2.html#mario",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Everything we’ve discussed today has focused on various building blocks of your work as an emerging computer scientist.\nThe following will help you orient toward working on a problem set for this class in general: How does one approach a computer science-related problem?\nImagine we wanted to emulate the visual of the game Super Mario Bros. Considering the four question blocks pictured, how could we create code that roughly represents these four horizontal blocks?\n\n\n\nMario Question Marks\n\n\nIn the terminal window, type code mario.c and code as follows:\n// Prints a row of 4 question marks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 4; i++)\n    {\n        printf(\"?\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how four question marks are printed here using a loop.\nSimilarly, we can apply this same logic to create three vertical blocks.\n\n\n\nMario Blocks\n\n\nTo accomplish this, modify your code as follows:\n// Prints a column of 3 bricks with a loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice how three vertical bricks are printed using a loop.\nWhat if we wanted to combine these ideas to create a three-by-three group of blocks?\n\n\n\nMario Grid\n\n\nWe can follow the logic above, combining the same ideas. Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        for (int j = 0; j &lt; 3; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice that one loop is inside another. The first loop defines what vertical row is being printed. For each row, three columns are printed. After each row, a new line is printed.\nWhat if we wanted to ensure that the number of blocks is constant, that is, unchangeable? Modify your code as follows:\n// Prints a 3-by-3 grid of bricks with nested loops using a constant\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            printf(\"#\");\n        }\n        printf(\"\\n\");\n    }\n}\n\nNotice how n is now a constant. It can never be changed.\nAs illustrated earlier in this lecture, we can abstract away functionality into functions. Consider the following code:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how printing a row is accomplished through a new function."
  },
  {
    "objectID": "notes/notes_2.html#comments",
    "href": "notes/notes_2.html#comments",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Comments are fundamental parts of a computer program, where you leave explanatory remarks to yourself and others who may be collaborating with you regarding your code.\nAll code you create for this course must include robust comments.\nTypically, each comment is a few words or more, providing the reader an opportunity to understand what is happening in a specific block of code. Further, such comments serve as a reminder for you later when you need to revise your code.\nComments involve placing // into your code, followed by a comment. Modify your code as follows to integrate comments:\n// Helper function\n\n#include &lt;stdio.h&gt;\n\nvoid print_row(int width);\n\nint main(void)\n{\n    const int n = 3;\n\n    // Print n rows\n    for (int i = 0; i &lt; n; i++)\n    {\n        print_row(n);\n    }\n}\n\nvoid print_row(int width)\n{\n    for (int i = 0; i &lt; width; i++)\n    {\n        printf(\"#\");\n    }\n    printf(\"\\n\");\n}\n\nNotice how each comment begins with a //."
  },
  {
    "objectID": "notes/notes_2.html#more-about-operators",
    "href": "notes/notes_2.html#more-about-operators",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "You can implement a calculator in C. In your terminal, type code calculator.c and write code as follows:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Add numbers\n    int z = x + y;\n\n    // Perform addition\n    printf(\"%i\\n\", z);\n}\n\nNotice how the get_int function is utilized to obtain an integer from the user twice. One integer is stored in the int variable called x. Another is stored in the int variable called y. The sum is stored in z. Then, the printf function prints the value of z, designated by the %i symbol.\nWe can also double a number:\n// int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%i. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%i.\\n\", dollars);\n}\n\nRunning this program, some seeming errors appear in dollars. Why is this?\nOne of C’s shortcomings is the ease by which it manages memory. While C provides you immense control over how memory is utilized, programmers have to be very aware of the potential pitfalls of memory management.\nTypes refer to the possible data that can be stored within a variable. For example, a char is designed to accommodate a single character like a or 2.\nTypes are very important because each type has specific limits. For example, because of the limits in memory, the highest value of an int can be 4294967295. If you attempt to count an int higher, an integer overflow will result where an incorrect value will be stored in this variable.\nThe number of bits limits how high and low we can count.\nThis can have catastrophic, real-world impacts.\nWe can correct this by using a data type called long.\n// long\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    long dollars = 1;\n    while (true)\n    {\n        char c = get_char(\"Here's $%li. Double it and give to next person? \", dollars);\n        if (c == 'y')\n        {\n            dollars *= 2;\n        }\n        else\n        {\n            break;\n        }\n    }\n    printf(\"Here's $%li.\\n\", dollars);\n}\n\nNotice how running this code will allow for very high dollar amounts.\nTypes with which you might interact during this course include:\n\nbool, a Boolean expression of either true or false\nchar, a single character like a or 2\ndouble, a floating-point value with more digits than a float\nfloat, a floating-point value, or a real number with a decimal value\nint, integers up to a certain size, or number of bits\nlong, integers with more bits, so they can count higher than an int\nstring, a string of characters"
  },
  {
    "objectID": "notes/notes_2.html#truncation",
    "href": "notes/notes_2.html#truncation",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "Another issue that can arise when using data types includes truncation.\n// Division with ints, demonstrating truncation\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Divide x by y\n    printf(\"%i\\n\", x / y);\n}\n\nAn integer divided by an integer will always result in an integer in C. Accordingly, the above code will often result in any digits after the decimal being thrown away.\nThis can be solved by employing a float:\n// Floats\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    float x = get_float(\"x: \");\n\n    // Prompt user for y\n    float y = get_float(\"y: \");\n\n    // Divide x by y\n    printf(\"%.50f\\n\", x / y);\n}\n\nNotice that this solves some of our problems. However, we might notice imprecision in the answer provided by the program.\nFloating point imprecision illustrates that there are limits to how precise computers can calculate numbers.\nAs you are coding, pay special attention to the types of variables you are using to avoid problems within your code.\nWe examined some examples of disasters that can occur through type-related errors."
  },
  {
    "objectID": "notes/notes_2.html#summing-up",
    "href": "notes/notes_2.html#summing-up",
    "title": "Lecture 2 Notes",
    "section": "",
    "text": "In this lesson, you learned how to apply the building blocks you learned in Scratch to the C programming language. You learned…\n\nHow to create your first program in C.\nHow to use the command line.\nAbout predefined functions that come natively with C.\nHow to use variables, conditionals, and loops.\nHow to create your own functions to simplify and improve your code.\nHow to evaluate your code on three axes: correctness, design, and style.\nHow to integrate comments into your code.\nHow to utilize types and operators and the implications of your choices.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_10.html",
    "href": "notes/notes_10.html",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Welcome!\nhttp-server\nFlask\nForms\nTemplates\nRequest Methods\nFrosh IMs\nFlask and SQL\nCookies and Session\nShopping Cart\nShows\nAPIs\nJSON\nSumming Up\n\n\n\n\nIn previous weeks, you have learned numerous programming languages, techniques, and strategies.\nIndeed, this class has been far less of a C class or Python class and far more of a programming class, such that you can go on to follow future trends.\nIn these past several weeks, you have learned how to learn about programming.\nToday, we will be moving from HTML and CSS into combining HTML, CSS, SQL, Python, and JavaScript so you can create your own web applications.\nYou might consider using the skills you learn this week to create your final project.\n\n\n\n\n\nUp until this point, all HTML you saw was pre-written and static.\nIn the past, when you visited a page, the browser downloaded an HTML page, and you were able to view it. These are considered static pages, in that what is programmed in the HTML is exactly what the user sees and downloads client-side to their internet browser.\nDynamic pages refer to the ability of Python and similar languages to create HTML on-the-fly. Accordingly, you can have web pages that are generated server-side by code based upon the input or behavior of users.\nYou have used http-server in the past to serve your web pages. Today, we are going to utilize a new server that can parse out a web address and perform actions based on the URL provided.\nFurther, last week, you saw URLs as follows:\nhttps://www.example.com/folder/file.html\n\nNotice that file.html is an HTML file inside a folder called folder at example.com.\n\n\n\n\n\nThis week, we introduce the ability to engage with routes such as https://www.example.com/route?key=value, where specific functionality can be generated on the server via the keys and values provided in the URL.\nFlask is a third-party library that allows you to host web applications using the Flask framework, or a micro-framework, within Python.\nYou can run Flask by executing flask run in your terminal window in cs50.dev.\nTo do so, you will need a file called app.py and another called requirements.txt. app.py contains code the tells Flask how to run your web application. requirements.txt includes a list of the libraries that are required for your Flask application to run.\nHere is a sample of requirements.txt:\nFlask\n\nNotice only Flask appears in this file. This is because Flask is required to run the Flask application.\nHere is a very simple Flask application in app.py:\n# Says hello to world by returning a string of text\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return \"hello, world\"\n\nNotice that the / route simply returns the text hello, world.\nWe can also create code that implements HTML:\n# Says hello to world by returning a string of HTML\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return '&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello, world&lt;/body&gt;&lt;/html&gt;'\n\nNotice that rather than returning simple text, this provides HTML.\nImproving our application, we can also serve HTML based upon templates by creating a folder called templates and creating a file called index.html with the following code within that folder:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\n\nNotice the double { name } that is a placeholder for something that will be later provided by our Flask server.\nThen, in the same folder that the templates folder appears, create a file called app.py and add the following code:\n# Uses request.args.get\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    name = request.args.get(\"name\", \"world\")\n    return render_template(\"index.html\", name=name)\n\nNotice that this code defines app as the Flask application. Then, it defines the / route of app as returning the contents of index.html with the argument of name. By default, the request.args.get function will look for the name being provided by the user. If no name is provided, it will default to world. @app.route is otherwise known as a decorator.\nYou can run this web application by typing flask run in the terminal window. If Flask does not run, ensure that your syntax is correct in each of the files above. Further, if Flask will not run, make sure your files are organized as follows:\n/templates\n    index.html\napp.py\nrequirements.txt\n\nOnce you get it running, you will be prompted to click a link. Once you navigate to that webpage, try adding ?name=[Your Name] to the base URL in your browser’s URL bar.\n\n\n\n\n\nImproving upon our program, we know that most users will not type arguments into the address bar. Instead, programmers rely upon users to fill out forms on web pages. Accordingly, we can modify index.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form action=\"/greet\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that a form is now created that takes the user’s name and then passes it off to a route called /greet. autocomplete is turned off. Further, a placeholder with the text name is included. Further, notice how the meta tag is used to make the web page mobile-responsive.\nFurther, we can change app.py as follows:\n# Adds a form, second route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\")\ndef greet():\n    return render_template(\"greet.html\", name=request.args.get(\"name\", \"world\"))\n\nNotice that the default path will display a form for the user to input their name. The /greet route will pass the name to that web page.\nTo finalize this implementation, you will need another template for greet.html in the templates folder as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that this route will now render the greeting to the user, followed by their name.\n\n\n\n\n\nBoth of our web pages, index.html and greet.html, have much of the same data. Wouldn’t it be nice to allow the body to be unique but copy the same layout from page to page?\nFirst, create a new template called layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the {% block body %}{% endblock %} allows for the insertion of other code from other HTML files.\nThen, modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/greet\" method=\"get\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the line {% extends \"layout.html\" %} tells the server where to get the layout of this page. Then, the {% block body %}{% endblock %} tells what code to be inserted into layout.html.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    hello, {{ name }}\n{% endblock %}\n\nNotice how this code is shorter and more compact.\n\n\n\n\n\nYou can imagine scenarios where it is not safe to utilize get, as usernames and passwords would show up in the URL.\nWe can utilize the method post to help with this problem by modifying app.py as follows:\n# Switches to POST\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\", methods=[\"POST\"])\ndef greet():\n    return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n\nNotice that POST is added to the /greet route, and that we use request.form.get rather than request.args.get.\nThis tells the server to look deeper into the virtual envelope and not reveal the items in post in the URL.\nStill, this code can be advanced further by utilizing a single route for both get and post. To do this, modify app.py as follows:\n# Uses a single route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n    return render_template(\"index.html\")\n\nNotice that both get and post are done in a single routing. However, request.method is utilized to properly route based on the type of routing requested by the user.\nAccordingly, you can modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the form action is changed.\nStill, there is a bug still in this code. With our new implementation, when someone types in no name into the form, Hello, is displayed without a name. We can improve our code by editing app.py as follows:\n# Moves default value to template\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\"))\n    return render_template(\"index.html\")\n\nNotice that name=request.form.get(\"name\")) is changed.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    hello,\n    {% if name %}\n        {{ name }}\n    {% else %}\n        world\n    {% endif %}\n\n{% endblock %}\n\nNotice how hello, {{ name }} is changed to allow for a default output when no name is identified.\nAs we’ve been changing many files, you may wish to compare your final code with our final code.\n\n\n\n\n\nFrosh IMs or froshims is a web application that allows students to register for intramural sports.\nClose all your hello related windows and create a folder by typing mkdir froshims in the terminal window. Then, type cd froshims to browse to this folder. Within, create a directory called templates by typing mkdir templates.\nNext, in the froshims folder, type code requirements.txt and code as follows:\nFlask\n\nAs before, Flask is required to run a Flask application.\nFinally, type code app.py and write code as follows:\n# Implements a registration form using a select menu, validating sport server-side\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate submission\n    if not request.form.get(\"name\") or request.form.get(\"sport\") not in SPORTS:\n        return render_template(\"failure.html\")\n\n    # Confirm registration\n    return render_template(\"success.html\")\n\nNotice that a failure option is provided, such that a failure message will be displayed to the user if the name or sport field is not properly filled out.\nNext, create a file in the templates folder called index.html by typing code templates/index.html and write code as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;select name=\"sport\"&gt;\n            &lt;option disabled selected value=\"\"&gt;Sport&lt;/option&gt;\n            {% for sport in sports %}\n                &lt;option value=\"{{ sport }}\"&gt;{{ sport }}&lt;/option&gt;\n            {% endfor %}\n        &lt;/select&gt;\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNext, create a file called layout.html by typing code templates/layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nFourth, create a file in templates called success.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are registered!\n{% endblock %}\n\nFinally, create a file in templates called failure.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\nExecute flask run and check out the application at this stage.\nYou can imagine how we might want to see the various registration options using radio buttons. We can improve index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"radio\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNotice how type has been changed to radio.\nAgain, executing flask run you can see how the interface has now changed.\nYou can imagine how we might want to accept the registration of many different registrants. We can improve app.py as follows:\n# Implements a registration form, storing registrants in a dictionary, with error messages\n\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\nREGISTRANTS = {}\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sport\n    sport = request.form.get(\"sport\")\n    if not sport:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    if sport not in SPORTS:\n        return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    REGISTRANTS[name] = sport\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    return render_template(\"registrants.html\", registrants=REGISTRANTS)\n\nNotice that a dictionary called REGISTRANTS is used to log the sport selected by REGISTRANTS[name]. Also, notice that registrants=REGISTRANTS passes the dictionary on to this template.\nAdditionally, we can implement error.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nFurther, create a new template called registrants.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for name in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrants[name] }}&lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that {% for name in registrants %}...{% endfor %} will iterate through each of the registrants. Very powerful to be able to iterate on a dynamic web page!\nFinally, create a folder called static in the same folder as app.py. There, upload the following file of a cat.\nExecute flask run and play with the application.\nYou now have a web application! However, there are some security flaws! Because everything is client-side, an adversary could change the HTML and hack a website. Further, this data will not persist if the server is shut down. Could there be some way we could have our data persist even when the server restarts?\n\n\n\n\n\nJust as we have seen how Python can interface with a SQL database, we can combine the power of Flask, Python, and SQL to create a web application where data will persist!\nTo implement this, you will need to take a number of steps.\nFirst, download the following SQL database into your froshims folder.\nExecute in the terminal sqlite3 froshims.db and type .schema to see the contents of the database file. Further type SELECT * FROM registrants; to learn about the contents. You’ll notice that there are currently no registrations in the file.\nNext, modify requirements.txt as follows:\ncs50\nFlask\n\nModify index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"checkbox\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nModify layout.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nEnsure error.html appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nModify registrants.html to appear as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n                &lt;th&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for registrant in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ registrant.name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrant.sport }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;form action=\"/deregister\" method=\"post\"&gt;\n                            &lt;input name=\"id\" type=\"hidden\" value=\"{{ registrant.id }}\"&gt;\n                            &lt;button type=\"submit\"&gt;Deregister&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that a hidden value registrant.id is included such that it’s possible to use this id later in app.py\nFinally, modify app.py as follows:\n# Implements a registration form, storing registrants in a SQLite database, with support for deregistration\n\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///froshims.db\")\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/deregister\", methods=[\"POST\"])\ndef deregister():\n\n    # Forget registrant\n    id = request.form.get(\"id\")\n    if id:\n        db.execute(\"DELETE FROM registrants WHERE id = ?\", id)\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sports\n    sports = request.form.getlist(\"sport\")\n    if not sports:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    for sport in sports:\n        if sport not in SPORTS:\n            return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    for sport in sports:\n        db.execute(\"INSERT INTO registrants (name, sport) VALUES(?, ?)\", name, sport)\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    registrants = db.execute(\"SELECT * FROM registrants\")\n    return render_template(\"registrants.html\", registrants=registrants)\n\nNotice that the cs50 library is utilized. A route is included for register for the post method. This route will take the name and sport taken from the registration form and execute a SQL query to add the name and the sport to the registrants table. The deregister routes to a SQL query that will grab the user’s id and utilize that information to deregister this individual.\nYou can execute flask run and examine the result.\nIf you want to download our implementation of froshims you can do so here.\nYou can read more about Flask in the Flask documentation.\n\n\n\n\n\napp.py is considered a controller. A view is considered what the users see. A model is how data is stored and manipulated. Together, this is referred to as MVC (model, view, controller).\nWhile the prior implementation of froshims is useful from an administrative standpoint, where a back-office administrator could add and remove individuals from the database, one can imagine how this code is not safe to implement on a public server.\nFor one, bad actors could make decisions on behalf of other users by hitting the deregister button – effectively deleting their recorded answer from the server.\nWeb services like Google use login credentials to ensure users only have access to the right data.\nWe can actually implement this itself using cookies. Cookies are small files that are stored on your computer such that your computer can communicate with the server and effectively say, “I’m an authorized user that has already logged in.” This authorization through this cookie is called a session.\nCookies may be stored as follows:\nGET / HTTP/2\nHost: accounts.google.com\nCookie: session=value\n\nHere, a session id is stored with a particular value representing that session.\nIn the simplest form, we can implement this by creating a folder called login and then adding the following files.\nFirst, create a file called requirements.txt that reads as follows:\nFlask\nFlask-Session\n\nNotice that in addition to Flask, we also include Flask-Session, which is required to support login sessions.\nSecond, in a templates folder, create a file called layout.html that appears as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;login&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice this provides a very simple layout with a title and a body.\nThird, create a file in the templates folder called index.html that appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    {% if name %}\n        You are logged in as {{ name }}. &lt;a href=\"/logout\"&gt;Log out&lt;/a&gt;.\n    {% else %}\n        You are not logged in. &lt;a href=\"/login\"&gt;Log in&lt;/a&gt;.\n    {% endif %}\n\n{% endblock %}\n\nNotice that this file looks to see if session[\"name\"] exists (elaborated further in app.py below). If it does, it will display a welcome message. If not, it will recommend you browse to a page to log in.\nFourth, create a file called login.html and add the following code:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/login\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice this is the layout of a basic login page.\nFinally, create a file called app.py and write code as follows:\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", name=session.get(\"name\"))\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        session[\"name\"] = request.form.get(\"name\")\n        return redirect(\"/\")\n    return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(\"/\")\n\nNotice the modified imports at the top of the file, including session, which will allow you to support sessions. Most importantly, notice how session[\"name\"] is used in the login and logout routes. The login route will assign the login name provided and assign it to session[\"name\"]. However, in the logout route, the logging out is implemented by clearing the value of session.\nThe session abstraction allows you to ensure only a specific user has access to specific data and features in our application. It allows you to ensure that no one acts on behalf of another user, for good or bad!\nIf you wish, you can download our implementation of login.\nYou can read more about sessions in the Flask documentation.\n\n\n\n\n\nMoving on to a final example of utilizing Flask’s ability to enable a session.\nWe examined the following code for store in app.py. The following code was shown:\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Connect to database\ndb = SQL(\"sqlite:///store.db\")\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    books = db.execute(\"SELECT * FROM books\")\n    return render_template(\"books.html\", books=books)\n\n\n@app.route(\"/cart\", methods=[\"GET\", \"POST\"])\ndef cart():\n\n    # Ensure cart exists\n    if \"cart\" not in session:\n        session[\"cart\"] = []\n\n    # POST\n    if request.method == \"POST\":\n        book_id = request.form.get(\"id\")\n        if book_id:\n            session[\"cart\"].append(book_id)\n        return redirect(\"/cart\")\n\n    # GET\n    books = db.execute(\"SELECT * FROM books WHERE id IN (?)\", session[\"cart\"])\n    return render_template(\"cart.html\", books=books)\n\nNotice that cart is implemented using a list. Items can be added to this list using the Add to Cart buttons in books.html. When clicking such a button, the post method is invoked, where the id of the item is appended to the cart. When viewing the cart, invoking the get method, SQL is executed to display a list of the books in the cart.\nWe also saw the contents of books.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;h1&gt;Books&lt;/h1&gt;\n    {% for book in books %}\n        &lt;h2&gt;{{ book[\"title\"] }}&lt;/h2&gt;\n        &lt;form action=\"/cart\" method=\"post\"&gt;\n            &lt;input name=\"id\" type=\"hidden\" value=\"{{ book['id'] }}\"&gt;\n            &lt;button type=\"submit\"&gt;Add to Cart&lt;/button&gt;\n        &lt;/form&gt;\n    {% endfor %}\n\n{% endblock %}\n\nNotice how this creates the ability to Add to Cart for each book using for book in books.\nYou can see the rest of the files that power this flask implementation in the source code.\n\n\n\n\n\nWe looked at a pre-designed program called shows, in app.py:\n# Searches for shows using LIKE\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ?\", \"%\" + request.args.get(\"q\") + \"%\")\n    return render_template(\"search.html\", shows=shows)\n\nNotice how the search route allows for a way by which to search for a show. This search looks for titles LIKE the one provided by the user.\nWe also examined index.html:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the JavaScript script creates an implementation of autocomplete, where titles that match the input are displayed.\nYou can see the rest of the files of this implementation in the source code.\n\n\n\n\n\nAn application program interface or API is a series of specifications that allow you to interface with another service. For example, we could utilize IMDB’s API to interface with their database. We might even integrate APIs for handling specific types of data downloadable from a server.\nImproving upon shows, looking at an improvement of app.py, we saw the following:\n# Searches for shows using Ajax\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return render_template(\"search.html\", shows=shows)\n\nNotice that the search route executes a SQL query.\nLooking at search.html, you’ll notice that it is very simple:\n{% for show in shows %}\n    &lt;li&gt;{{ show[\"title\"] }}&lt;/li&gt;\n{% endfor %}\n\nNotice that it provides a bulleted list.\nFinally, looking at index.html, notice that AJAX code is utilized to power the search:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"search\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.text();\n                document.querySelector('ul').innerHTML = shows;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice an event listener is utilized to dynamically query the server to provide a list that matches the title provided. This will locate the ul tag in the HTML and modify the web page accordingly to include the list of the matches.\nYou can read more in the AJAX documentation.\n\n\n\n\n\nJavaScript Object Notation or JSON is a text file of dictionaries with keys and values. This is a raw, computer-friendly way to get lots of data.\nJSON is a very useful way of getting back data from the server.\nYou can see this in action in the index.html we examined together:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nWhile the above may be somewhat cryptic, it provides a starting point for you to research JSON on your own to see how it can be implemented in your own web applications.\nFurther, we examined app.py to see how the JSON response is obtained:\n# Searches for shows using Ajax with JSON\n\nfrom cs50 import SQL\nfrom flask import Flask, jsonify, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return jsonify(shows)\n\nNotice how jsonify is used to convert the result into a readable format acceptable by contemporary web applications.\nYou can read more in the JSON documentation.\nIn summary, you now have the ability to complete your own web applications using Python, Flask, HTML, and SQL.\n\n\n\n\nIn this lesson, you learned how to utilize Python, SQL, and Flask to create web applications. Specifically, we discussed…\n\nFlask\nForms\nTemplates\nRequest Methods\nFlask and SQL\nCookies and Session\nAPIs\nJSON\n\nSee you next time for our final lecture for this term at Sanders Theatre!"
  },
  {
    "objectID": "notes/notes_10.html#welcome",
    "href": "notes/notes_10.html#welcome",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "In previous weeks, you have learned numerous programming languages, techniques, and strategies.\nIndeed, this class has been far less of a C class or Python class and far more of a programming class, such that you can go on to follow future trends.\nIn these past several weeks, you have learned how to learn about programming.\nToday, we will be moving from HTML and CSS into combining HTML, CSS, SQL, Python, and JavaScript so you can create your own web applications.\nYou might consider using the skills you learn this week to create your final project."
  },
  {
    "objectID": "notes/notes_10.html#http-server",
    "href": "notes/notes_10.html#http-server",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Up until this point, all HTML you saw was pre-written and static.\nIn the past, when you visited a page, the browser downloaded an HTML page, and you were able to view it. These are considered static pages, in that what is programmed in the HTML is exactly what the user sees and downloads client-side to their internet browser.\nDynamic pages refer to the ability of Python and similar languages to create HTML on-the-fly. Accordingly, you can have web pages that are generated server-side by code based upon the input or behavior of users.\nYou have used http-server in the past to serve your web pages. Today, we are going to utilize a new server that can parse out a web address and perform actions based on the URL provided.\nFurther, last week, you saw URLs as follows:\nhttps://www.example.com/folder/file.html\n\nNotice that file.html is an HTML file inside a folder called folder at example.com."
  },
  {
    "objectID": "notes/notes_10.html#flask",
    "href": "notes/notes_10.html#flask",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "This week, we introduce the ability to engage with routes such as https://www.example.com/route?key=value, where specific functionality can be generated on the server via the keys and values provided in the URL.\nFlask is a third-party library that allows you to host web applications using the Flask framework, or a micro-framework, within Python.\nYou can run Flask by executing flask run in your terminal window in cs50.dev.\nTo do so, you will need a file called app.py and another called requirements.txt. app.py contains code the tells Flask how to run your web application. requirements.txt includes a list of the libraries that are required for your Flask application to run.\nHere is a sample of requirements.txt:\nFlask\n\nNotice only Flask appears in this file. This is because Flask is required to run the Flask application.\nHere is a very simple Flask application in app.py:\n# Says hello to world by returning a string of text\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return \"hello, world\"\n\nNotice that the / route simply returns the text hello, world.\nWe can also create code that implements HTML:\n# Says hello to world by returning a string of HTML\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return '&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;hello, world&lt;/body&gt;&lt;/html&gt;'\n\nNotice that rather than returning simple text, this provides HTML.\nImproving our application, we can also serve HTML based upon templates by creating a folder called templates and creating a file called index.html with the following code within that folder:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\n\nNotice the double { name } that is a placeholder for something that will be later provided by our Flask server.\nThen, in the same folder that the templates folder appears, create a file called app.py and add the following code:\n# Uses request.args.get\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    name = request.args.get(\"name\", \"world\")\n    return render_template(\"index.html\", name=name)\n\nNotice that this code defines app as the Flask application. Then, it defines the / route of app as returning the contents of index.html with the argument of name. By default, the request.args.get function will look for the name being provided by the user. If no name is provided, it will default to world. @app.route is otherwise known as a decorator.\nYou can run this web application by typing flask run in the terminal window. If Flask does not run, ensure that your syntax is correct in each of the files above. Further, if Flask will not run, make sure your files are organized as follows:\n/templates\n    index.html\napp.py\nrequirements.txt\n\nOnce you get it running, you will be prompted to click a link. Once you navigate to that webpage, try adding ?name=[Your Name] to the base URL in your browser’s URL bar."
  },
  {
    "objectID": "notes/notes_10.html#forms",
    "href": "notes/notes_10.html#forms",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Improving upon our program, we know that most users will not type arguments into the address bar. Instead, programmers rely upon users to fill out forms on web pages. Accordingly, we can modify index.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;form action=\"/greet\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that a form is now created that takes the user’s name and then passes it off to a route called /greet. autocomplete is turned off. Further, a placeholder with the text name is included. Further, notice how the meta tag is used to make the web page mobile-responsive.\nFurther, we can change app.py as follows:\n# Adds a form, second route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\")\ndef greet():\n    return render_template(\"greet.html\", name=request.args.get(\"name\", \"world\"))\n\nNotice that the default path will display a form for the user to input their name. The /greet route will pass the name to that web page.\nTo finalize this implementation, you will need another template for greet.html in the templates folder as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        hello, {{ name }}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that this route will now render the greeting to the user, followed by their name."
  },
  {
    "objectID": "notes/notes_10.html#templates",
    "href": "notes/notes_10.html#templates",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Both of our web pages, index.html and greet.html, have much of the same data. Wouldn’t it be nice to allow the body to be unique but copy the same layout from page to page?\nFirst, create a new template called layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the {% block body %}{% endblock %} allows for the insertion of other code from other HTML files.\nThen, modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/greet\" method=\"get\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the line {% extends \"layout.html\" %} tells the server where to get the layout of this page. Then, the {% block body %}{% endblock %} tells what code to be inserted into layout.html.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    hello, {{ name }}\n{% endblock %}\n\nNotice how this code is shorter and more compact."
  },
  {
    "objectID": "notes/notes_10.html#request-methods",
    "href": "notes/notes_10.html#request-methods",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "You can imagine scenarios where it is not safe to utilize get, as usernames and passwords would show up in the URL.\nWe can utilize the method post to help with this problem by modifying app.py as follows:\n# Switches to POST\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/greet\", methods=[\"POST\"])\ndef greet():\n    return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n\nNotice that POST is added to the /greet route, and that we use request.form.get rather than request.args.get.\nThis tells the server to look deeper into the virtual envelope and not reveal the items in post in the URL.\nStill, this code can be advanced further by utilizing a single route for both get and post. To do this, modify app.py as follows:\n# Uses a single route\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\", \"world\"))\n    return render_template(\"index.html\")\n\nNotice that both get and post are done in a single routing. However, request.method is utilized to properly route based on the type of routing requested by the user.\nAccordingly, you can modify your index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Greet&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice that the form action is changed.\nStill, there is a bug still in this code. With our new implementation, when someone types in no name into the form, Hello, is displayed without a name. We can improve our code by editing app.py as follows:\n# Moves default value to template\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        return render_template(\"greet.html\", name=request.form.get(\"name\"))\n    return render_template(\"index.html\")\n\nNotice that name=request.form.get(\"name\")) is changed.\nFinally, change greet.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    hello,\n    {% if name %}\n        {{ name }}\n    {% else %}\n        world\n    {% endif %}\n\n{% endblock %}\n\nNotice how hello, {{ name }} is changed to allow for a default output when no name is identified.\nAs we’ve been changing many files, you may wish to compare your final code with our final code."
  },
  {
    "objectID": "notes/notes_10.html#frosh-ims",
    "href": "notes/notes_10.html#frosh-ims",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Frosh IMs or froshims is a web application that allows students to register for intramural sports.\nClose all your hello related windows and create a folder by typing mkdir froshims in the terminal window. Then, type cd froshims to browse to this folder. Within, create a directory called templates by typing mkdir templates.\nNext, in the froshims folder, type code requirements.txt and code as follows:\nFlask\n\nAs before, Flask is required to run a Flask application.\nFinally, type code app.py and write code as follows:\n# Implements a registration form using a select menu, validating sport server-side\n\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate submission\n    if not request.form.get(\"name\") or request.form.get(\"sport\") not in SPORTS:\n        return render_template(\"failure.html\")\n\n    # Confirm registration\n    return render_template(\"success.html\")\n\nNotice that a failure option is provided, such that a failure message will be displayed to the user if the name or sport field is not properly filled out.\nNext, create a file in the templates folder called index.html by typing code templates/index.html and write code as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;select name=\"sport\"&gt;\n            &lt;option disabled selected value=\"\"&gt;Sport&lt;/option&gt;\n            {% for sport in sports %}\n                &lt;option value=\"{{ sport }}\"&gt;{{ sport }}&lt;/option&gt;\n            {% endfor %}\n        &lt;/select&gt;\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNext, create a file called layout.html by typing code templates/layout.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nFourth, create a file in templates called success.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are registered!\n{% endblock %}\n\nFinally, create a file in templates called failure.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    You are not registered!\n{% endblock %}\n\nExecute flask run and check out the application at this stage.\nYou can imagine how we might want to see the various registration options using radio buttons. We can improve index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"radio\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nNotice how type has been changed to radio.\nAgain, executing flask run you can see how the interface has now changed.\nYou can imagine how we might want to accept the registration of many different registrants. We can improve app.py as follows:\n# Implements a registration form, storing registrants in a dictionary, with error messages\n\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\nREGISTRANTS = {}\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sport\n    sport = request.form.get(\"sport\")\n    if not sport:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    if sport not in SPORTS:\n        return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    REGISTRANTS[name] = sport\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    return render_template(\"registrants.html\", registrants=REGISTRANTS)\n\nNotice that a dictionary called REGISTRANTS is used to log the sport selected by REGISTRANTS[name]. Also, notice that registrants=REGISTRANTS passes the dictionary on to this template.\nAdditionally, we can implement error.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nFurther, create a new template called registrants.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for name in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrants[name] }}&lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that {% for name in registrants %}...{% endfor %} will iterate through each of the registrants. Very powerful to be able to iterate on a dynamic web page!\nFinally, create a folder called static in the same folder as app.py. There, upload the following file of a cat.\nExecute flask run and play with the application.\nYou now have a web application! However, there are some security flaws! Because everything is client-side, an adversary could change the HTML and hack a website. Further, this data will not persist if the server is shut down. Could there be some way we could have our data persist even when the server restarts?"
  },
  {
    "objectID": "notes/notes_10.html#flask-and-sql",
    "href": "notes/notes_10.html#flask-and-sql",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Just as we have seen how Python can interface with a SQL database, we can combine the power of Flask, Python, and SQL to create a web application where data will persist!\nTo implement this, you will need to take a number of steps.\nFirst, download the following SQL database into your froshims folder.\nExecute in the terminal sqlite3 froshims.db and type .schema to see the contents of the database file. Further type SELECT * FROM registrants; to learn about the contents. You’ll notice that there are currently no registrations in the file.\nNext, modify requirements.txt as follows:\ncs50\nFlask\n\nModify index.html as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Register&lt;/h1&gt;\n    &lt;form action=\"/register\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        {% for sport in sports %}\n            &lt;input name=\"sport\" type=\"checkbox\" value=\"{{ sport }}\"&gt; {{ sport }}\n        {% endfor %}\n        &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n    &lt;/form&gt;\n{% endblock %}\n\nModify layout.html as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;froshims&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nEnsure error.html appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Error&lt;/h1&gt;\n    &lt;p&gt;{{ message }}&lt;/p&gt;\n    &lt;img alt=\"Grumpy Cat\" src=\"/static/cat.jpg\"&gt;\n{% endblock %}\n\nModify registrants.html to appear as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n    &lt;h1&gt;Registrants&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n                &lt;th&gt;Sport&lt;/th&gt;\n                &lt;th&gt;&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            {% for registrant in registrants %}\n                &lt;tr&gt;\n                    &lt;td&gt;{{ registrant.name }}&lt;/td&gt;\n                    &lt;td&gt;{{ registrant.sport }}&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;form action=\"/deregister\" method=\"post\"&gt;\n                            &lt;input name=\"id\" type=\"hidden\" value=\"{{ registrant.id }}\"&gt;\n                            &lt;button type=\"submit\"&gt;Deregister&lt;/button&gt;\n                        &lt;/form&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            {% endfor %}\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n{% endblock %}\n\nNotice that a hidden value registrant.id is included such that it’s possible to use this id later in app.py\nFinally, modify app.py as follows:\n# Implements a registration form, storing registrants in a SQLite database, with support for deregistration\n\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///froshims.db\")\n\nSPORTS = [\n    \"Basketball\",\n    \"Soccer\",\n    \"Ultimate Frisbee\"\n]\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", sports=SPORTS)\n\n\n@app.route(\"/deregister\", methods=[\"POST\"])\ndef deregister():\n\n    # Forget registrant\n    id = request.form.get(\"id\")\n    if id:\n        db.execute(\"DELETE FROM registrants WHERE id = ?\", id)\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/register\", methods=[\"POST\"])\ndef register():\n\n    # Validate name\n    name = request.form.get(\"name\")\n    if not name:\n        return render_template(\"error.html\", message=\"Missing name\")\n\n    # Validate sports\n    sports = request.form.getlist(\"sport\")\n    if not sports:\n        return render_template(\"error.html\", message=\"Missing sport\")\n    for sport in sports:\n        if sport not in SPORTS:\n            return render_template(\"error.html\", message=\"Invalid sport\")\n\n    # Remember registrant\n    for sport in sports:\n        db.execute(\"INSERT INTO registrants (name, sport) VALUES(?, ?)\", name, sport)\n\n    # Confirm registration\n    return redirect(\"/registrants\")\n\n\n@app.route(\"/registrants\")\ndef registrants():\n    registrants = db.execute(\"SELECT * FROM registrants\")\n    return render_template(\"registrants.html\", registrants=registrants)\n\nNotice that the cs50 library is utilized. A route is included for register for the post method. This route will take the name and sport taken from the registration form and execute a SQL query to add the name and the sport to the registrants table. The deregister routes to a SQL query that will grab the user’s id and utilize that information to deregister this individual.\nYou can execute flask run and examine the result.\nIf you want to download our implementation of froshims you can do so here.\nYou can read more about Flask in the Flask documentation."
  },
  {
    "objectID": "notes/notes_10.html#cookies-and-session",
    "href": "notes/notes_10.html#cookies-and-session",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "app.py is considered a controller. A view is considered what the users see. A model is how data is stored and manipulated. Together, this is referred to as MVC (model, view, controller).\nWhile the prior implementation of froshims is useful from an administrative standpoint, where a back-office administrator could add and remove individuals from the database, one can imagine how this code is not safe to implement on a public server.\nFor one, bad actors could make decisions on behalf of other users by hitting the deregister button – effectively deleting their recorded answer from the server.\nWeb services like Google use login credentials to ensure users only have access to the right data.\nWe can actually implement this itself using cookies. Cookies are small files that are stored on your computer such that your computer can communicate with the server and effectively say, “I’m an authorized user that has already logged in.” This authorization through this cookie is called a session.\nCookies may be stored as follows:\nGET / HTTP/2\nHost: accounts.google.com\nCookie: session=value\n\nHere, a session id is stored with a particular value representing that session.\nIn the simplest form, we can implement this by creating a folder called login and then adding the following files.\nFirst, create a file called requirements.txt that reads as follows:\nFlask\nFlask-Session\n\nNotice that in addition to Flask, we also include Flask-Session, which is required to support login sessions.\nSecond, in a templates folder, create a file called layout.html that appears as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;login&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block body %}{% endblock %}\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice this provides a very simple layout with a title and a body.\nThird, create a file in the templates folder called index.html that appears as follows:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    {% if name %}\n        You are logged in as {{ name }}. &lt;a href=\"/logout\"&gt;Log out&lt;/a&gt;.\n    {% else %}\n        You are not logged in. &lt;a href=\"/login\"&gt;Log in&lt;/a&gt;.\n    {% endif %}\n\n{% endblock %}\n\nNotice that this file looks to see if session[\"name\"] exists (elaborated further in app.py below). If it does, it will display a welcome message. If not, it will recommend you browse to a page to log in.\nFourth, create a file called login.html and add the following code:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;form action=\"/login\" method=\"post\"&gt;\n        &lt;input autocomplete=\"off\" autofocus name=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n        &lt;button type=\"submit\"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n{% endblock %}\n\nNotice this is the layout of a basic login page.\nFinally, create a file called app.py and write code as follows:\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", name=session.get(\"name\"))\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        session[\"name\"] = request.form.get(\"name\")\n        return redirect(\"/\")\n    return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(\"/\")\n\nNotice the modified imports at the top of the file, including session, which will allow you to support sessions. Most importantly, notice how session[\"name\"] is used in the login and logout routes. The login route will assign the login name provided and assign it to session[\"name\"]. However, in the logout route, the logging out is implemented by clearing the value of session.\nThe session abstraction allows you to ensure only a specific user has access to specific data and features in our application. It allows you to ensure that no one acts on behalf of another user, for good or bad!\nIf you wish, you can download our implementation of login.\nYou can read more about sessions in the Flask documentation."
  },
  {
    "objectID": "notes/notes_10.html#shopping-cart",
    "href": "notes/notes_10.html#shopping-cart",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "Moving on to a final example of utilizing Flask’s ability to enable a session.\nWe examined the following code for store in app.py. The following code was shown:\nfrom cs50 import SQL\nfrom flask import Flask, redirect, render_template, request, session\nfrom flask_session import Session\n\n# Configure app\napp = Flask(__name__)\n\n# Connect to database\ndb = SQL(\"sqlite:///store.db\")\n\n# Configure session\napp.config[\"SESSION_PERMANENT\"] = False\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\nSession(app)\n\n\n@app.route(\"/\")\ndef index():\n    books = db.execute(\"SELECT * FROM books\")\n    return render_template(\"books.html\", books=books)\n\n\n@app.route(\"/cart\", methods=[\"GET\", \"POST\"])\ndef cart():\n\n    # Ensure cart exists\n    if \"cart\" not in session:\n        session[\"cart\"] = []\n\n    # POST\n    if request.method == \"POST\":\n        book_id = request.form.get(\"id\")\n        if book_id:\n            session[\"cart\"].append(book_id)\n        return redirect(\"/cart\")\n\n    # GET\n    books = db.execute(\"SELECT * FROM books WHERE id IN (?)\", session[\"cart\"])\n    return render_template(\"cart.html\", books=books)\n\nNotice that cart is implemented using a list. Items can be added to this list using the Add to Cart buttons in books.html. When clicking such a button, the post method is invoked, where the id of the item is appended to the cart. When viewing the cart, invoking the get method, SQL is executed to display a list of the books in the cart.\nWe also saw the contents of books.html:\n{% extends \"layout.html\" %}\n\n{% block body %}\n\n    &lt;h1&gt;Books&lt;/h1&gt;\n    {% for book in books %}\n        &lt;h2&gt;{{ book[\"title\"] }}&lt;/h2&gt;\n        &lt;form action=\"/cart\" method=\"post\"&gt;\n            &lt;input name=\"id\" type=\"hidden\" value=\"{{ book['id'] }}\"&gt;\n            &lt;button type=\"submit\"&gt;Add to Cart&lt;/button&gt;\n        &lt;/form&gt;\n    {% endfor %}\n\n{% endblock %}\n\nNotice how this creates the ability to Add to Cart for each book using for book in books.\nYou can see the rest of the files that power this flask implementation in the source code."
  },
  {
    "objectID": "notes/notes_10.html#shows",
    "href": "notes/notes_10.html#shows",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "We looked at a pre-designed program called shows, in app.py:\n# Searches for shows using LIKE\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ?\", \"%\" + request.args.get(\"q\") + \"%\")\n    return render_template(\"search.html\", shows=shows)\n\nNotice how the search route allows for a way by which to search for a show. This search looks for titles LIKE the one provided by the user.\nWe also examined index.html:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that the JavaScript script creates an implementation of autocomplete, where titles that match the input are displayed.\nYou can see the rest of the files of this implementation in the source code."
  },
  {
    "objectID": "notes/notes_10.html#apis",
    "href": "notes/notes_10.html#apis",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "An application program interface or API is a series of specifications that allow you to interface with another service. For example, we could utilize IMDB’s API to interface with their database. We might even integrate APIs for handling specific types of data downloadable from a server.\nImproving upon shows, looking at an improvement of app.py, we saw the following:\n# Searches for shows using Ajax\n\nfrom cs50 import SQL\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return render_template(\"search.html\", shows=shows)\n\nNotice that the search route executes a SQL query.\nLooking at search.html, you’ll notice that it is very simple:\n{% for show in shows %}\n    &lt;li&gt;{{ show[\"title\"] }}&lt;/li&gt;\n{% endfor %}\n\nNotice that it provides a bulleted list.\nFinally, looking at index.html, notice that AJAX code is utilized to power the search:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"search\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.text();\n                document.querySelector('ul').innerHTML = shows;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice an event listener is utilized to dynamically query the server to provide a list that matches the title provided. This will locate the ul tag in the HTML and modify the web page accordingly to include the list of the matches.\nYou can read more in the AJAX documentation."
  },
  {
    "objectID": "notes/notes_10.html#json",
    "href": "notes/notes_10.html#json",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "JavaScript Object Notation or JSON is a text file of dictionaries with keys and values. This is a raw, computer-friendly way to get lots of data.\nJSON is a very useful way of getting back data from the server.\nYou can see this in action in the index.html we examined together:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;meta name=\"viewport\" content=\"initial-scale=1, width=device-width\"&gt;\n        &lt;title&gt;shows&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script&gt;\n            let input = document.querySelector('input');\n            input.addEventListener('input', async function() {\n                let response = await fetch('/search?q=' + input.value);\n                let shows = await response.json();\n                let html = '';\n                for (let id in shows) {\n                    let title = shows[id].title.replace('&lt;', '&lt;').replace('&', '&amp;');\n                    html += '&lt;li&gt;' + title + '&lt;/li&gt;';\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nWhile the above may be somewhat cryptic, it provides a starting point for you to research JSON on your own to see how it can be implemented in your own web applications.\nFurther, we examined app.py to see how the JSON response is obtained:\n# Searches for shows using Ajax with JSON\n\nfrom cs50 import SQL\nfrom flask import Flask, jsonify, render_template, request\n\napp = Flask(__name__)\n\ndb = SQL(\"sqlite:///shows.db\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\n@app.route(\"/search\")\ndef search():\n    q = request.args.get(\"q\")\n    if q:\n        shows = db.execute(\"SELECT * FROM shows WHERE title LIKE ? LIMIT 50\", \"%\" + q + \"%\")\n    else:\n        shows = []\n    return jsonify(shows)\n\nNotice how jsonify is used to convert the result into a readable format acceptable by contemporary web applications.\nYou can read more in the JSON documentation.\nIn summary, you now have the ability to complete your own web applications using Python, Flask, HTML, and SQL."
  },
  {
    "objectID": "notes/notes_10.html#summing-up",
    "href": "notes/notes_10.html#summing-up",
    "title": "Lecture 10 Notes",
    "section": "",
    "text": "In this lesson, you learned how to utilize Python, SQL, and Flask to create web applications. Specifically, we discussed…\n\nFlask\nForms\nTemplates\nRequest Methods\nFlask and SQL\nCookies and Session\nAPIs\nJSON\n\nSee you next time for our final lecture for this term at Sanders Theatre!"
  },
  {
    "objectID": "module-syllabus.html",
    "href": "module-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Dr. Ed Harris",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#your-instructor",
    "href": "module-syllabus.html#your-instructor",
    "title": "Syllabus",
    "section": "",
    "text": "Dr. Ed Harris",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#learning-objectives",
    "href": "module-syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nAnalyse and solve problems using computational thinking, applying fundamental concepts of computer science\nDesign and implement algorithms in different programming languages\nEvaluate and improve the correctness, design, and style of code\nSynthesise knowledge of programming concepts to create apps\nApply the principles of data management for the storage and retrieval of information",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#meetings",
    "href": "module-syllabus.html#meetings",
    "title": "Syllabus",
    "section": "Meetings",
    "text": "Meetings\nScheduled meetings will be held in person in Telford, Station Quarter. Autumn 2025: Check your personal schedule for room, day, time.\nLectures will introduce the topic and sometimes involve live coding demonstration of key concepts. Lectures will be delivered in person, and will be recorded and made available on the module website.\nTutorials will demonstrate concepts discussed in lectures to various scenarios, with a focus on the problem solving. Tutorials will be demonstrated and should also be completed individually. That is, run the code yourself.\nMaterial may be livestreamed to the YouTube channel and recorded for later viewing.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#online-resources",
    "href": "module-syllabus.html#online-resources",
    "title": "Syllabus",
    "section": "Online resources",
    "text": "Online resources\nAll lecture notes, assignment instructions, an up-to-date schedule, and other course materials may be found on the module website.\nHarper Adams module website (university enrolled students only, requires login)\n\nDiscord - join the community - for live discussion and support\nGitHub - the module repository - for the module materials\nYouTube - The Statistics Lab channel - for live streams and recordings\nTwitch - the DataGiri channel - for live streams and recordings\nTwitter - Follow Ed’s account - for information, and memes",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#assessments",
    "href": "module-syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\n\nAssessment 1\nHomework: These homework problem sets will typically be distributed throughout the module and are designed to test the grasp and application of programming concepts ranging from basic syntax to topics like data structures and algorithms. Each set will consist of practical tasks involving various programming challenges.\n\n\nAssessment 2\nProject: This is an opportunity to apply programming skills in developing your own software solution. This project encourages creativity and innovation, allowing you to choose an appropriate programming language and build an application that is personally meaningful, solves real-world problems, or potentially impacts the community or world at large.\nFor the project you can opt to work individually or collaborate with up to two other classmates, with the expectation that each member contributes equally to the project design and implementation. The complexity of the project should reflect the size of the group, with group projects expected to be more intricate than individual ones. The final project is assessed based on the project complexity and scope, the effectiveness of the implemented solution, creativity, and the overall quality of the code. For group projects, the assessment also considers individual contributions and the collaborative effort. NB for group projects, the scope and ambition of the project should reflect the size of the group.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#readings-optional",
    "href": "module-syllabus.html#readings-optional",
    "title": "Syllabus",
    "section": "Readings (optional)",
    "text": "Readings (optional)\nWhile there is no textbook for the module, these may be of interest.\nBlogs\nJulia Silge’s Blog :: Andrew Gelman’s Blog :: Simply Statistics :: R bloggers :: Ethan Mollick’s Blog\nBooks\nBentley, J., 1988. More Programming Pearls: Confessions of a Coder: Confessions of a Coder. Addison-Wesley Professional, Reading, Mass.\nBhargava, A., 2024. Grokking Algorithms. Manning Publications, Shelter Island, NY.\nHermans, F., 2021. The Programmer’s Brain: What every programmer needs to know about cognition. Manning, Shelter Island, NY.\nHunt, A., Thomas, D., 1999. The Pragmatic Programmer: From Journeyman to Master. Addison-Wesley Professional.\nKenett, R.S., Redman, T.C., 2019. The Real Work of Data Science: Turning data into information, better decisions, and stronger organizations. Wiley, Hoboken$cChichester.\nMcConnell, S., 2004. Code Complete: A Practical Handbook of Software Construction, Second Edition. Microsoft Press, Redmond, Wash.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#five-tips-for-success",
    "href": "module-syllabus.html#five-tips-for-success",
    "title": "Syllabus",
    "section": "Five tips for success",
    "text": "Five tips for success\nYour success on this module depends very much on you and the effort you put into it. Like any learning, the burden of engaging with the material is on you. The module staff and I will help you be providing you with materials and answering questions and setting a pace, but for this to work you must do the following:\n\nComplete all the preparation work before class.\nAsk questions. As often as you can. In class, out of class. Ask me, ask the TAs, ask your friends, ask the person sitting next to you. This will help you more than anything else. If you get a question wrong on an assessment, ask us why. If you’re not sure about the homework, let’s talk about it. If you hear something on the news that sounds related to what we discussed, share it and let’s discuss. If the reading is confusing, ask.\nDo the readings.\nDo the homework and the tutorials. The earlier you start, the better. It’s not enough to just mechanically plow through the exercises. You should ask yourself how these exercises relate to earlier material, and imagine how they might be changed (to make questions for an exam, for example.)\nDon’t procrastinate. If something is confusing to you in Week 2, Week 3 will become more confusing, Week 4 even worse, and eventually you won’t know where to begin asking questions. Don’t let the week end with unanswered questions. But if you find yourself falling behind and not knowing where to begin asking, ask for help, and let us help you identify a good (re)starting point.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-syllabus.html#module-policies",
    "href": "module-syllabus.html#module-policies",
    "title": "Syllabus",
    "section": "Module policies",
    "text": "Module policies\nThe essence of all work that you submit to this course must be your own. Unless otherwise specified, collaboration on assessments (e.g., assignments, labs, problem sets, projects, quizzes, or tests) is not permitted except to the extent that you may ask classmates and others for help so long as that help does not reduce to another doing your work for you. Generally speaking, when asking for help, you may show your work to others, but you may not view theirs, so long as you and they respect this policy’s other constraints.\nReasonable\n\nCommunicating with classmates about assessments in English (or some other spoken language), and properly citing those discussions.\nDiscussing the course’s material with others in order to understand it better.\nHelping a classmate identify a bug in their code, as by viewing, compiling, or running their code after you have submitted that portion of the pset yourself.\nIncorporating a few lines of code that you find online or elsewhere into your own code, provided that those lines are not themselves solutions to assigned work and that you cite the lines’ origins.\nSending or showing code that you’ve written to someone, possibly a classmate, so that they might help you identify and fix a bug.\nSubmitting the same or similar work to this course that you have submitted previously to this course.\nTurning to the web or elsewhere for instruction beyond the course’s own, for references, and for solutions to technical difficulties, but not for outright solutions to assigned work.\nUsing AI-based software to ask questions, but not presenting its answers as your own.\nWhiteboarding solutions with others using diagrams or pseudocode but not actual code.\nWorking with (and even paying) a tutor to help you with the course, provided the tutor does not do your work for you.\n\nNot Reasonable\n\nAccessing a solution to some assessement prior to (re-)submitting your own.\nAccessing or attempting to access, without permission, an account not your own.\nAsking a classmate to see their solution to some assessment before submitting your own.\nFailing to cite (as with comments) the origins of code or techniques that you discover outside of the course’s own lessons and integrate into your own work, even while respecting this policy’s other constraints.\nGiving or showing to a classmate a solution to an assessment when it is they, and not you, who is struggling to solve it.\nPaying or offering to pay an individual for work that you may submit as (part of) your own.\nProviding or making available solutions to assessments to anyone, whether a past, present, or prospective future student.\nSearching for or soliciting outright solutions to assessments online or elsewhere.\nSplitting an assessment’s workload with another individual and combining your work.\nSubmitting (after possibly modifying) the work of another individual beyond the few lines allowed herein.\nSubmitting the same or similar work to this course that you have submitted or will submit to another course, unless explictly allowed.\nUsing AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) that suggests answers or lines of code.\nViewing another’s solution to an assessment and basing your own solution on it.",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "module-links.html",
    "href": "module-links.html",
    "title": "Useful links",
    "section": "",
    "text": "🔗 🔗 🔗 🔗 🔗",
    "crumbs": [
      "Useful links"
    ]
  },
  {
    "objectID": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "href": "LICENSE.html#creative-commons-attribution-sharealike-4.0-international-public-license",
    "title": "Attribution-ShareAlike 4.0 International",
    "section": "Creative Commons Attribution-ShareAlike 4.0 International Public License",
    "text": "Creative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nA. reproduce and Share the Licensed Material, in whole or in part; and\nB. produce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nA. Offer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nB. Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nC. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\nA. retain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nB. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nC. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\n\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter’s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter’s License You apply.\n\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "labs/lab-2.html",
    "href": "labs/lab-2.html",
    "title": "Lab 2 - College scorecard",
    "section": "",
    "text": "In today’s lab, you’ll use simple linear regression to analyze the relationship between the admissions rate and total cost for colleges and universities in the United States.\n\n\nBy the end of the lab you will…\n\nBe able to fit a simple linear regression model using R.\nBe able to interpret the slope and intercept for the model.\nBe able to use statistical inference to draw conclusions about the slope.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "labs/lab-2.html#introduction",
    "href": "labs/lab-2.html#introduction",
    "title": "Lab 2 - College scorecard",
    "section": "",
    "text": "In today’s lab, you’ll use simple linear regression to analyze the relationship between the admissions rate and total cost for colleges and universities in the United States.\n\n\nBy the end of the lab you will…\n\nBe able to fit a simple linear regression model using R.\nBe able to interpret the slope and intercept for the model.\nBe able to use statistical inference to draw conclusions about the slope.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "labs/lab-2.html#getting-started",
    "href": "labs/lab-2.html#getting-started",
    "title": "Lab 2 - College scorecard",
    "section": "Getting started",
    "text": "Getting started\n\nGo to the sta210-s22 organization on GitHub. Click on the repo with the prefix lab-2. It contains the starter documents you need to complete the lab.\nClone the repo and start a new project in RStudio. See the Lab 1 instructions for details on cloning a repo, starting a new R project and configuring git."
  },
  {
    "objectID": "labs/lab-2.html#packages",
    "href": "labs/lab-2.html#packages",
    "title": "Lab 2 - College scorecard",
    "section": "Packages",
    "text": "Packages\nWe will use the following package in today’s lab.\n\nlibrary(tidyverse)  # for data wrangling + visualization\nlibrary(tidymodels) # for modeling\nlibrary(knitr)      # for pretty printing of tables"
  },
  {
    "objectID": "labs/lab-2.html#data-college-scorecard",
    "href": "labs/lab-2.html#data-college-scorecard",
    "title": "Lab 2 - College scorecard",
    "section": "Data: College scorecard",
    "text": "Data: College scorecard\nThe data for this lab is from the scorecard data set in the rcfss R package. It includes information originally obtained from the U.S. Department of Education’s College Scorecard for 1753 colleges and universities during the 2018 - 2019 academic year.\nThe lab focuses on the following variables:\n\nadmrate: Undergraduate admissions rate (from 0-100%)\ncost: The average annual total cost of attendance, including tuition and fees, books and supplies, and living expenses\ntype: Type of college (Public; Private, nonprofit; Private, for-profit)\n\nClick here to see a full list of variables and definitions.\nUse the code below to load the data set.\n\nscorecard &lt;- read_csv(\"data/scorecard.csv\")"
  },
  {
    "objectID": "labs/lab-2.html#exercises",
    "href": "labs/lab-2.html#exercises",
    "title": "Lab 2 - College scorecard",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nNote\n\n\n\nInclude axis labels and an informative title for all plots. Use the kable() function to neatly print tables and regression output.\n\n\n\nExercise 1\nCreate a histogram to examine the distribution of admrate and calculate summary statistics for the center (mean and median) and the spread (standard deviation and IQR).\n\n\nExercise 2\nUse the results from the previous exercise to describe the distribution of admrate. Include the shape, center, spread, and if there are potential outliers.\n\n\nExercise 3\nPlot the distribution of cost and calculate the appropriate summary statistics. Describe the distribution of cost (shape, center, and spread, and outliers) using the plot and appropriate summary statistics.\n\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 4\nThe goal of this analysis is to fit a regression model that can be used to understand the variability in the cost of college based on the admission rate. Before fitting the model, let’s look at the relationship between the two variables. Create a scatterplot to display the relationship between cost and admissions rate. Describe the relationship between the two variables based on the plot.\n\n\nExercise 5\nDoes the relationship between cost and admissions rate differ by type of college? Modify the plot from the previous exercise visualize the relationship by type of college.\n\n\nExercise 6\nDescribe two new observations from the scatterplot in Exercise 5 that you didn’t see in the scatterplot from Exercise 4.\n\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 7\nFit the linear regression model. Use the kable function to neatly display the results with a reasonable number of decimals.\n\n\nExercise 8\nConsider the model from the previous exercise.\n\nInterpret the slope in the context of the problem.\nDoes the intercept have a meaningful interpretation? If so, write the interpretation in the context of the problem. Otherwise, explain why the interpretation is not meaningful.\n\n\n\nExercise 9\nConstruct a 95% confidence interval for the slope using bootstrapping. Follow these steps to accomplish this:\n\nFirst set a seed for simulating reproducibly.\nThen, simulate the bootstrap distribution of the slope using 1,000 bootstrap samples.\nThen, visually estimate the bounds of the bootstrap interval based on a histogram of the distribution of the bootstrapped slopes, using the percentile method.\nAnd then, use the get_confidence_interval() function to explicitly calculate the bounds of the confidence interval using the percentile method.\nFinally, interpret the confidence interval in the context of the data.\n\n\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 10\nFinally, we want to answer the question “Do the data provide sufficient evidence of a linear relationship between cost and admissions rate, i.e. \\(\\beta_1\\) is different from 0?”\nTo answer this question we will use a hypothesis test. We can conduct a hypothesis test via simulation (what we’ll do in this lab) or using mathematical models (what we’ll do in the next class).\nBefore we can conduct the hypothesis test, let’s first set our hypotheses. Remember that the null hypothesis represents the status quo (nothing going on, i.e. there is no relationship) and the alternative hypothesis represents our research question (there is something going on, i.e. there is a relationship).\n\n\\(H_0\\): There is no linear relationship between the admissions rate and cost of colleges in the United States, \\(\\beta_1 = 0\\)\n\\(H_A\\): There is a linear relationship between the admissions rate and cost of colleges in the United States, \\(\\beta_1 \\ne 0\\)\n\nTo test these hypotheses, we will use a permutation test, where we\n\nSimulate new samples from the original sample via permutation under the assumption that the null hypothesis is true\nFit models to each of the samples and estimate the slope\nUse features of the distribution of the permuted slopes to calculate the p-value for the hypothesis test\n\nThe major difference between constructing a confidence interval and conducting a hypothesis test is that for the hypothesis test we assume that the null hypothesis is true. This requires a simulation scheme that will allow us to measure the natural variability in the data due to sampling but not due to cost and admission rate being correlated by permuting permute one variable to eliminate any existing relationship between the variables. To do so, we randomly assign each admrate value to cost of a given university, i.e. cost and admrate are no longer matched for a given university.\nIn the following code chunk we\n\nFirst set a seed for simulating reproducibly.\nThen, we start with our data frame and specify our model as cost vs. admrate.\nThen, we set our null hypothesis (cost and admrate are independent)\nAnd then we generate 1000 replicates of our data where, for each replicate, we permute values of admrate to randomly assign them to values of cost\nFinally, we fit our model to each of our 1000 permuted datasets\n\n\nset.seed(1234)\n\nperm_fits &lt;- scorecard %&gt;%\n  specify(cost ~ admrate) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 1000, type = \"permute\") %&gt;%\n  fit()\n\nThe resulting dataset perm_fits has nrow(perm_fits) and ncol(perm_fits) columns. The first column, replicate indicates the replicate number of the dataset the models were fit to; the values in this column range between 1 and 1000. The second column, term, tells us which term (intercept of the model or slope of admrate) the estimate value in the third column is for.\n\nperm_fits\n\n# A tibble: 2,000 × 3\n# Groups:   replicate [1,000]\n   replicate term      estimate\n       &lt;int&gt; &lt;chr&gt;        &lt;dbl&gt;\n 1         1 intercept  36857. \n 2         1 admrate     -781. \n 3         2 intercept  35901. \n 4         2 admrate      643. \n 5         3 intercept  36608. \n 6         3 admrate     -411. \n 7         4 intercept  35831. \n 8         4 admrate      746. \n 9         5 intercept  36367. \n10         5 admrate      -51.7\n# ℹ 1,990 more rows\n\n\n\nCreate a histogram of the slope estimates in perm_fits. (Hint: Filter the dataset for just the slope values, term == \"admrate\".)\nEstimate the p-value of the hypothesis test based on this distribution.\nState your conclusion for the test in context.\nIndicate whether or not it is consistent with the results of the hypothesis test from the previous exercise. Briefly explain your response.\n\n\nThis is a good place to render, commit, and push changes to your remote lab repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message, and push. After you push the changes, the Git pane in RStudio should be empty."
  },
  {
    "objectID": "labs/lab-2.html#submission",
    "href": "labs/lab-2.html#submission",
    "title": "Lab 2 - College scorecard",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "labs/lab-2.html#grading",
    "href": "labs/lab-2.html#grading",
    "title": "Lab 2 - College scorecard",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 10\n45\n\n\nWorkflow & formatting\n51\n\n\n\n\n\n1 The “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computing Technology",
    "section": "",
    "text": "Use the computer well and it will be a great ally. Use it badly and it will be your master.\n\nWelcome!\nComputing Technology is an introduction to computer science through a range of programming languages, suitable for those with or without prior programming experience. The module demonstrates concepts using various programming languages, emphasizing problem-solving, correctness, design, and style.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "hw/hw-1.html",
    "href": "hw/hw-1.html",
    "title": "HW 1 - In-person voting trends",
    "section": "",
    "text": "In this assignment, you’ll use simple linear regression to explore the percent of votes cast in-person in the 2020 U.S. election based on the county’s political leanings.\n\n\nIn this assignment, you will…\n\nFit and interpret simple linear regression models\nAssess the conditions for simple linear regression.\nCreate and interpret spatial data visualizations using R.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "hw/hw-1.html#introduction",
    "href": "hw/hw-1.html#introduction",
    "title": "HW 1 - In-person voting trends",
    "section": "",
    "text": "In this assignment, you’ll use simple linear regression to explore the percent of votes cast in-person in the 2020 U.S. election based on the county’s political leanings.\n\n\nIn this assignment, you will…\n\nFit and interpret simple linear regression models\nAssess the conditions for simple linear regression.\nCreate and interpret spatial data visualizations using R.\nContinue developing a workflow for reproducible data analysis."
  },
  {
    "objectID": "hw/hw-1.html#getting-started",
    "href": "hw/hw-1.html#getting-started",
    "title": "HW 1 - In-person voting trends",
    "section": "Getting started",
    "text": "Getting started\n\nLog in to RStudio\n\nGo to https://vm-manage.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA210 to log into the Docker container. You should now see the RStudio environment.\n\n\n\nClone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta210-s22 organization on GitHub. Click on the repo with the prefix hw-1. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick hw-1-voting.qmd to open the template R Markdown file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "hw/hw-1.html#packages",
    "href": "hw/hw-1.html#packages",
    "title": "HW 1 - In-person voting trends",
    "section": "Packages",
    "text": "Packages\nThe following packages will be used in this assignment:\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(scales)"
  },
  {
    "objectID": "hw/hw-1.html#data-2020-election",
    "href": "hw/hw-1.html#data-2020-election",
    "title": "HW 1 - In-person voting trends",
    "section": "Data: 2020 Election",
    "text": "Data: 2020 Election\nThere are multiple data sets for this assignment. Use the code below to load the data.\n\nelection_nc &lt;- read_csv(\"data/nc-election-2020.csv\") %&gt;%\n  mutate(fips = as.integer(FIPS))\ncounty_map_data &lt;-  read_csv(\"data/nc-county-map-data.csv\")\nelection_sample &lt;- read_csv(\"data/us-election-2020-sample.csv\")\n\nThe county-level election data in election_nc and election_sample are from The Economist GitHub repo. The data were originally analyzed in the July 2021 article In-person voting really did accelerate covid-19’s spread in America. For this analysis, we will focus on the following variables:\n\ninperson_pct: The proportion of a county’s votes cast in-person in the 2020 election\npctTrump_2016: The proportion of a county’s votes cast for Donald Trump in the 2016 election\n\nThe data in county_map_data were obtained from the maps package in R. We will not analyze any of the variables in this data set but will use it to help create maps in the assignment. Click here to see the documentation for the maps package. Click here for code examples."
  },
  {
    "objectID": "hw/hw-1.html#exercises",
    "href": "hw/hw-1.html#exercises",
    "title": "HW 1 - In-person voting trends",
    "section": "Exercises",
    "text": "Exercises\nDue to COVID-19 pandemic, many states made alternatives in-person voting, such as voting by mail, more widely available for the 2020 U.S. election. The general consensus was that voters who were more Democratic leaning would be more likely to vote by mail, while more Republican leaning voters would largely vote in-person. This was supported by multiple surveys, including this survey conducted by Pew Research.\nThe goal of this analysis is to use regression analysis to explore the relationship between a county’s political leanings and the proportion of votes cast in-person in 2020. The ultimate question we want to answer is “Did counties with more Republican leanings have a larger proportion of votes cast in-person in the 2020 election?”\nWe will use the proportion of votes cast for Donald Trump in 2016 (pctTrump_2016) as a measure of a county’s political leaning. Counties with a higher proportion of votes for Trump in 2016 are considered to have more Republican leanings.\n\n\n\n\n\n\nNote\n\n\n\nAll narrative should be written in complete sentences, and all visualizations should have informative titles and axis labels.\n\n\n\nPart 1: Counties in North Carolina\nFor this part of the analysis, we will focus on counties in North Carolina. We will use the data sets election_nc and county_map_data.\n\nVisualize the distribution of the response variable inperson_pct and calculate appropriate summary statistics. Use the visualization and summary statistics to describe the distribution. Include an informative title and axis labels on the plot.\nLet’s view the data in another way. Use the code below to make a map of North Carolina with the color of each county filled in based on the percentage of votes cast in-person in the 2020 election. Fill in title and axis labels.\nThen use the plot answer the following:\n\nWhat are 2 - 3 observations you have from the plot?\nWhat is a feature that is apparent in the map that wasn’t apparent from the histogram in the previous exercise? What is a feature that is apparent in the histogram that is not apparent in the map?\n\n\n\nelection_map_data &lt;- left_join(election_nc, county_map_data)\n\nggplot() +\n  geom_polygon(data = county_map_data,\n    mapping = aes(x = long, y = lat, group = group),\n    fill = \"lightgray\", color = \"white\"\n    ) +\n  geom_polygon(data = election_map_data, \n    mapping = aes(x = long, y = lat, group = group,\n    fill = inperson_pct)\n    ) +\n  labs(\n    x = \"___\",\n    y = \"___\",\n    fill = \"___\",\n    title = \"___\"\n  ) +\n  scale_fill_viridis_c(labels = label_percent(scale = 1)) +\n  coord_quickmap()\n\n\nCreate a visualization of the relationship between inperson_pct and pctTrump_2016. Use the visualization to describe the relationship between the two variables.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven’t yet done so, now is a good time to render your document and commit (with a meaningful commit message) and push all updates.\n\n\n\nWe can use a linear regression model to better quantify the relationship between the variables.\n\nFit the linear model to understand variability in the percent of in-person votes based on the percent of votes for Trump in the 2016 election. Neatly display the model output with 3 digits.\nWrite the regression equation using mathematical notation.\n\nNow let’s use the model coefficients to describe the relationship.\n\nInterpret the slope. The interpretation should be written in a way that is meaningful in the context of the data.\nDoes it make sense to interpret the intercept? If so, write the interpretation in the context of the data. Otherwise, briefly explain why not.\n\nIf the linear model is a good fit to these data, there should be no structure left in the residuals and the residuals should have constant variance. Augment the data with the model to obtain the residuals and predicted values for each observation, and call the augmented data frame nc_election_aug (You will use this name in Exercise 8). Then, make a plot of the residuals vs. the fitted values, and based on this plot, and provide a brief explanation for whether these two conditions are met. Hint: Zoom out on the plot by extending the limits of the y-axis.\n\n\n\n\n\n\n\nWarning\n\n\n\nNow is a good time to render your document again if you haven’t done so recently and commit (with a meaningful commit message) and push all updates.\n\n\n\nWe might also be interested in our observations being independent, particularly if we are to use these data for inference. To evaluate whether the independence condition is met, we will examine a map of the counties in North Carolina with the color filled based on the value of the residuals.\n\nBriefly explain why we may want to view the residuals on a map to assess independence.\nBriefly explain what pattern (if any) we would expect to observe on the map if the independence condition is satisfied.\n\nFill in the name of your model in the code below to calculate the residuals and add them to election_map_data. Then, a map with the color of each county filled in based on the value of the residual. Hint: Start with the code from Exercise 2.\nIs the independence condition satisfied? Briefly explain based on what you observe from the plot.\n\nnc_election_aug &lt;- nc_election_aug %&gt;% \n  bind_cols(fips = election_nc$fips)\n\nelection_map_data &lt;- left_join(election_map_data, nc_election_aug)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore moving on to the next part, make sure you render your document and commit (with a meaningful commit message) and push all updates.\n\n\n\n\nPart 2: Inference for the U.S.\nTo get a better understanding of the trend across the entire United States, we analyze data from a random sample of 200 counties. This data is in the election_sample data frame. Because these counties were randomly selected out of the 3,006 counties in the United States, we can reasonably treat the counties as independent observations.\n\nFit the linear model to these sample data to understand variability in the percent of in-person votes based on the percent of votes for Trump in the 2016 election. Neatly display the model output with 3 digits.\nConduct a hypothesis test for the slope using a permutation test. In your response, state the null and alternative hypotheses in words, and state the conclusion in the context of the data.\nNext, construct a 95% confidence interval for the slope using bootstrapping. Interpret the confidence interval in the context of the data.\nComment on whether the hypothesis test and confidence interval support the general consensus that Republican voters were more likely to vote in-person in the 2020 election? A brief explanation is sufficient but it should be based on your conclusions from Exercises 10 and 11.\n\n\n\n\n\n\n\nWarning\n\n\n\nBefore submitting, make sure you render your document and commit (with a meaningful commit message) and push all updates."
  },
  {
    "objectID": "hw/hw-1.html#submission",
    "href": "hw/hw-1.html#submission",
    "title": "HW 1 - In-person voting trends",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "hw/hw-1.html#grading",
    "href": "hw/hw-1.html#grading",
    "title": "HW 1 - In-person voting trends",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 10\n45\n\n\nWorkflow & formatting\n51"
  },
  {
    "objectID": "hw/hw-1.html#footnotes",
    "href": "hw/hw-1.html#footnotes",
    "title": "HW 1 - In-person voting trends",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.↩︎"
  },
  {
    "objectID": "hw/hw-2.html",
    "href": "hw/hw-2.html",
    "title": "HW 2 - Multiple linear regression",
    "section": "",
    "text": "In this assignment, you’ll get to put into practice the multiple linear regression skills you’ve developed.\n\n\nIn this assignment, you will…\n\nFit and interpret multiple linear regression models with main and interaction effects.\nCompare multiple linear regression models.\nReason around multiple linear regression concepts.\nContinue developing a workflow for reproducible data analysis.\n\n\n\n\nYour repo for this assignment is at github.com/sta210-s22 and starts with the prefix hw-2. For more detailed instructions on getting started, see HW 1.\n\n\n\nThe following packages will be used in this assignment. You can add other packages as needed.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "hw/hw-2.html#introduction",
    "href": "hw/hw-2.html#introduction",
    "title": "HW 2 - Multiple linear regression",
    "section": "",
    "text": "In this assignment, you’ll get to put into practice the multiple linear regression skills you’ve developed.\n\n\nIn this assignment, you will…\n\nFit and interpret multiple linear regression models with main and interaction effects.\nCompare multiple linear regression models.\nReason around multiple linear regression concepts.\nContinue developing a workflow for reproducible data analysis.\n\n\n\n\nYour repo for this assignment is at github.com/sta210-s22 and starts with the prefix hw-2. For more detailed instructions on getting started, see HW 1.\n\n\n\nThe following packages will be used in this assignment. You can add other packages as needed.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "hw/hw-2.html#part-1---conceptual",
    "href": "hw/hw-2.html#part-1---conceptual",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 1 - Conceptual",
    "text": "Part 1 - Conceptual\n\nDealing with categorical predictors. Two friends, Elliott and Adrian, want to build a model predicting typing speed (average number of words typed per minute) from whether the person wears glasses or not. Before building the model they want to conduct some exploratory analysis to evaluate the strength of the association between these two variables, but they’re in disagreement about how to evaluate how strongly a categorical predictor is associated with a numerical outcome. Elliott claims that it is not possible to calculate a correlation coefficient to summarize the relationship between a categorical predictor and a numerical outcome, however they’re not sure what a better alternative is. Adrian claims that you can recode a binary predictor as a 0/1 variable (assign one level to be 0 and the other to be 1), thus converting it to a numerical variable. According to Adrian, you can then calculate the correlation coefficient between the predictor and the outcome. Who is right: Elliott or Adrian? If you pick Elliott, can you suggest a better alternative for evaluating the association between the categorical predictor and the numerical outcome?\nHigh correlation, good or bad? Two friends, Frances and Annika, are in disagreement about whether high correlation values are always good in the context of regression. Frances claims that it’s desirable for all variables in the dataset to be highly correlated to each other when building linear models. Annika claims that while it’s desirable for each of the predictors to be highly correlated with the outcome, it is not desirable for the predictors to be highly correlated with each other. Who is right: Frances, Annika, both, or neither? Explain your reasoning using appropriate terminology.\nTraining for the 5K. Nico signs up for a 5K (a 5,000 metre running race) 30 days prior to the race. They decide to run a 5K every day to train for it, and each day they record the following information: days_since_start (number of days since starting training), days_till_race (number of days left until the race), mood (poor, good, awesome), tiredness (1-not tired to 10-very tired), and time (time it takes to run 5K, recorded as mm:ss). Top few rows of the data they collect is shown below.\n\n\n\ndays_since_start\ndays_till_race\nmood\ntiredness\ntime\n\n\n\n\n1\n29\ngood\n3\n25:45\n\n\n2\n28\npoor\n5\n27:13\n\n\n3\n27\nawesome\n4\n24:13\n\n\n…\n…\n…\n…\n…\n\n\n\nUsing these data Nico wants to build a model predicting time from the other variables. Should they include all variables shown above in their model? Why or why not?\nMultiple regression fact checking. Determine which of the following statements are true and false. For each statement that is false, explain why it is false.\n\nIf predictors are colinear, then removing one variable will have no influence on the point estimate of another variable’s coefficient.\nSuppose a numerical predictor \\(x\\) has a coefficient of \\(\\hat{\\beta}_1 = 2.5\\) in a multiple regression model. Suppose also that the first observation has \\(x_{1,1} = 7.2\\), the second observation has a value of \\(x_{2,1} = 8.2\\), and these two observations have the same values for all other predictors. Then the predicted value of the second observation will be 2.5 higher than the prediction of the first observation based on the multiple regression model.\nIf a regression model’s first predictor has a coefficient of \\(\\hat{\\beta}_1 = 5.7\\) and if we are able to influence the data so that an observation will have its \\(x_1\\) be 1 larger than it would otherwise, the value \\(\\hat{y}_1\\) for this observation would increase by 5.7."
  },
  {
    "objectID": "hw/hw-2.html#part-2---palmer-penguins",
    "href": "hw/hw-2.html#part-2---palmer-penguins",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 2 - Palmer penguins",
    "text": "Part 2 - Palmer penguins\nData were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. (Gorman, Williams, and Fraser 2014)\n\n\n\nArtwork by @allison_horst\n\n\nThese data can be found in the palmerpenguins package. We’re going to be working with the penguins dataset from this package. The dataset contains data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.\n\nBody mass. Our first goal is to fit a model predicting body mass (which is more difficult to measure) from bill length, bill depth, flipper length, species, and sex.\n\nFit a model predicting body mass (which is more difficult to measure) from the other variables listed above.\nWrite the equation of the regression model.\nInterpret each one of the slopes in this context.\nCalculate the residual for a male Adelie penguin that weighs 3750 grams with the following body measurements: bill_length_mm = 39.1, bill_depth_mm = 18.7, flipper_length_mm = 181. Does the model overpredict or underpredict this penguin’s weight?\nFind the \\(R^2\\) of this model and interpret this value in context of the data and the model.\n\n\n\n\nBill depth. Next we’ll be focusing on bill depth and bill length and also considering species.\n\nFit a model predicting bill depth from bill length. Find the adjusted R-squared, AIC, and BIC for this model.\nThen, add a new predictor: species. Fit another model predicting bill depth from bill length and species. Find the adjusted R-squared, AIC, and BIC for this model.\nFinally, add one more predictor: the interaction between bill length and species. Find the adjusted R-squared, AIC, and BIC for this model.\nUsing the three criteria you recorded for these three models, and with the goal of parsimony, which model is the “best” for predicting bill depth from bill length and/or species. Explain your reasoning.\nCreate a visualization representing your model from part a. Hint: Make a scatterplot of bill depth vs. bill length and add the linear model.\nCreate a visualization representing your model from part b. Hint: Same as part (e), but think about how many lines to plot and whether their slopes should be the same or different.\nCreate a visualization representing your model from part c. Hint: Same as part (f), but think about how many lines to plot and whether their slopes should be the same or different.\nBased on your visualizations from parts e - g, and with the goal of parsimony, is your answer for which model is the “best” for predicting bill depth from bill length and/or species the same as your answer in part d? Explain your reasoning."
  },
  {
    "objectID": "hw/hw-2.html#part-3---perceived-threat-of-covid-19",
    "href": "hw/hw-2.html#part-3---perceived-threat-of-covid-19",
    "title": "HW 2 - Multiple linear regression",
    "section": "Part 3 - Perceived threat of Covid-19",
    "text": "Part 3 - Perceived threat of Covid-19\nGarbe, Rau, and Toppe (2020), published in June 2020, aims to examine the relationship between personality traits, perceived threat of Covid-19 and stockpiling toilet paper. For this study titled Influence of perceived threat of Covid-19 and HEXACO personality traits on toilet paper stockpiling, researchers conducted an online survey March 23 - 29, 2020 and used the results to fit multiple linear regression models to draw conclusions about their research questions. From their survey, they collected data on adults across 35 countries. Given the small number of responses from people outside of the United States, Canada, and Europe, only responses from people in these three locations were included in the regression analysis.\nLet’s consider their results for the model looking at the effect on perceived threat of Covid-19. The model can be found on page 6 of the paper. The perceived threat of Covid was quantified using the responses to the following survey question:\n\nHow threatened do you feel by Coronavirus? [Users select on a 10-point visual analogue scale (Not at all threatened to Extremely Threatened)]\n\n\nInterpret the coefficient of Age (0.072) in the context of the analysis.\nInterpret the coefficient of Place of residence in the context of the analysis.\nThe model includes an interaction between Place of residence and Emotionality (capturing differential tendencies in to worry and be anxious).\n\nWhat does the coefficient for the interaction (0.101) mean in the context of the data?\nInterpret the estimated effect of Emotionality for a person who lives in the US/Canada.\nInterpret the estimated effect of Emotionality for a person who lives in Europe."
  },
  {
    "objectID": "hw/hw-2.html#submission",
    "href": "hw/hw-2.html#submission",
    "title": "HW 2 - Multiple linear regression",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "hw/hw-2.html#grading",
    "href": "hw/hw-2.html#grading",
    "title": "HW 2 - Multiple linear regression",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 9\n45\n\n\nWorkflow & formatting\n51"
  },
  {
    "objectID": "hw/hw-2.html#footnotes",
    "href": "hw/hw-2.html#footnotes",
    "title": "HW 2 - Multiple linear regression",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.↩︎"
  },
  {
    "objectID": "labs/lab-1.html",
    "href": "labs/lab-1.html",
    "title": "Lab 1 - Meet the toolkit",
    "section": "",
    "text": "This lab will go through much of the same workflow we’ve demonstrated in class. The main goal is to reinforce our understanding of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n\n\n\n\n\nNote\n\n\n\nR is the name of the programming language itself and RStudio is a convenient interface.\n\n\nAn additional goal is to reinforce git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n\n\n\n\n\nNote\n\n\n\nGit is a version control system (like “Track Changes” features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\nTo make versioning simpler, this is a solo lab. In the future, you’ll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\n\nBy the end of the lab, you will…\n\nBe familiar with the workflow using R, RStudio, Git, and GitHub\nGain practice writing a reproducible report using RMarkdown\nPractice version control using GitHub\nBe able to create data visualizations using ggplot2\nBe able to describe variable distributions and the relationship between multiple variables"
  },
  {
    "objectID": "labs/lab-1.html#introduction",
    "href": "labs/lab-1.html#introduction",
    "title": "Lab 1 - Meet the toolkit",
    "section": "",
    "text": "This lab will go through much of the same workflow we’ve demonstrated in class. The main goal is to reinforce our understanding of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n\n\n\n\n\nNote\n\n\n\nR is the name of the programming language itself and RStudio is a convenient interface.\n\n\nAn additional goal is to reinforce git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n\n\n\n\n\nNote\n\n\n\nGit is a version control system (like “Track Changes” features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer. Before we get to that stage, however, you need to build some basic fluency in R. Today we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\nTo make versioning simpler, this is a solo lab. In the future, you’ll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\n\nBy the end of the lab, you will…\n\nBe familiar with the workflow using R, RStudio, Git, and GitHub\nGain practice writing a reproducible report using RMarkdown\nPractice version control using GitHub\nBe able to create data visualizations using ggplot2\nBe able to describe variable distributions and the relationship between multiple variables"
  },
  {
    "objectID": "labs/lab-1.html#getting-started",
    "href": "labs/lab-1.html#getting-started",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Getting started",
    "text": "Getting started\n\n\n\n\n\n\nImportant\n\n\n\nYour lab TA will lead you through the Getting Started section.\n\n\n\nLog in to RStudio\n\nGo to https://vm-manage.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA210 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven’t yet done so, you will need to reserve a container for STA210 first.\n\n\n\n\nSet up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask “No SSH key found. Generate one now?” You should click 1 for yes.\nYou will generate a key. It will begin with “ssh-rsa….” R will then ask “Would you like to open a browser now?” You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta210).\n\nYou can find more detailed instructions here if you’re interested.\n\n\nConfigure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package.\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\nusethis::use_git_config(\n  user.name = \"GitHub username\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\nusethis::use_git_config(\n  user.name = \"mine-cetinkaya-rundel\", \n  user.email = \"cetinkaya.mine@gmail.com\"\n  )\n\nYou are now ready interact with GitHub via RStudio!\n\n\nClone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta210-s22 organization on GitHub. Click on the repo with the prefix lab-1. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick lab-1-ikea.qmd to open the template R Markdown file. This is where you will write up your code and narrative for the lab.\n\n\n\nR and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file.\n\n\n\nYAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for “YAML Ain’t Markup Language”. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (`.qmd`) file in your project, change the author name to your name, and render the document. Examine the rendered document.\n\n\n\n\nCommitting changes\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\nIf you have made changes to your Rmd file, you should see it listed here. Click on it to select it in this list and then click on Diff. This shows you the difference between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\nIf you’re happy with these changes, we’ll prepare the changes to be pushed to your remote repository. First, stage your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, “updated author name”) in the Commit message box. Finally, click Commit. Note that every commit needs to have a commit message associated with it.\nYou don’t have to commit after every change, as this would get quite tedious. You should commit states that are meaningful to you for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\nNow let’s make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you’re good to go!\n\n\nPush changes\nNow that you have made an update and committed this change, it’s time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab-1.html#packages",
    "href": "labs/lab-1.html#packages",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Packages",
    "text": "Packages\nWe will use the following package in today’s lab.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe tidyverse is a meta-package. When you load it you get eight packages loaded for you:\n\nggplot2: for data visualization\ndplyr: for data wrangling\ntidyr: for data tidying and rectangling\nreadr: for reading and writing data\ntibble: for modern, tidy data frames\nstringr: for string manipulation\nforcats: for dealing with factors\npurrr: for iteration with functional programming\n\nThe message that’s printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the filter() function from dplyr has now masked (overwritten) the filter() function available in base R (and that’s ok, we’ll use dplyr::filter() anyway).\nWe’ll be using functionality from all of these packages throughout the semester, though we’ll always load them all at once with library(tidyverse). You can find out more about the tidyverse and each of the packages that make it up here."
  },
  {
    "objectID": "labs/lab-1.html#data-ikea-furniture",
    "href": "labs/lab-1.html#data-ikea-furniture",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Data: Ikea furniture",
    "text": "Data: Ikea furniture\nToday’s data is all about Ikea furniture. The data was obtained from the TidyTuesday data collection.\nUse the code below to read in the data.\n\nikea &lt;- read_csv(\"data/ikea.csv\")\n\n\nData dictionary\nThe variable definitions are as follows:\n\n\n\n\n\n\n\n\nvariable\nclass\ndescription\n\n\n\n\nitem_id\ndouble\nitem id which can be used later to merge with other IKEA data frames\n\n\nname\ncharacter\nthe commercial name of items\n\n\ncategory\ncharacter\nthe furniture category that the item belongs to (Sofas, beds, chairs, Trolleys,…)\n\n\nsellable_online\nlogical\nSellable online TRUE or FALSE\n\n\nlink\ncharacter\nthe web link of the item\n\n\nother_colors\ncharacter\nif other colors are available for the item, or just one color as displayed in the website (Boolean)\n\n\nshort_description\ncharacter\na brief description of the item\n\n\ndesigner\ncharacter\nThe name of the designer who designed the item. this is extracted from the full_description column.\n\n\ndepth\ndouble\nDepth of the item in Centimeter\n\n\nheight\ndouble\nHeight of the item in Centimeter\n\n\nwidth\ndouble\nWidth of the item in Centimeter\n\n\nprice_usd\ndouble\nthe current price in US dollars as it is shown in the website by 4/20/2020\n\n\n\n\n\nView the data\nBefore doing any analysis, you may want to get quick view of the data. This is useful when you’ve imported data to see if your data imported correctly. We can use the view() function to see the entire data set in RStudio. Type the code below in the Console to view the entire dataset.\n\nview(ikea)"
  },
  {
    "objectID": "labs/lab-1.html#exercises",
    "href": "labs/lab-1.html#exercises",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Exercises",
    "text": "Exercises\nWrite all code and narrative in your R Markdown file. Write all narrative in complete sentences. Throughout the assignment, you should periodically Render your Quarto document to produce the updated PDF, commit the changes in the Git pane, and push the updated files to GitHub.\n\n\n\n\n\n\nTip\n\n\n\nMake sure we can read all or your code in your PDF document. This means you will need to break up long lines of code. One way to help avoid long lines of code is is start a new line after every pipe (%&gt;%) and plus sign (+).\n\n\n\nExercise 1\nThe view() function helped us get a quick view of the dataset, but let’s get more detail about its structure. Viewing a summary of the data is a useful starting point for data analysis, especially if the dataset has a large number of observations (rows) or variables (columns). Run the code below to use the glimpse() function to see a summary of the ikea dataset.\nHow many observations are in the ikea dataset? How many variables?\n\nglimpse(ikea)\n\n\n\n\n\n\n\nNote\n\n\n\nIn your lab-1-ikea.qmd document you’ll see that we already added the code required for the exercise as well as a sentence where you can fill in the blanks to report the answer. Use this format for the remaining exercises.\nAlso note that the code chunk as a label: glimpse-data. It’s not required, but good practice and highly encouraged to label your code chunks in this way.\n\n\n\n\nExercise 2\nWe begin each regression analysis with exploratory data analysis (EDA) to help us “get to know” the data and examine the variable distributions and relationships between variables. We do this by visualizing the data and calculating summary statistics to describe the variables in our dataset. In this lab, we will focus on data visualizations.\nLet’s begin by looking at the price of Ikea furniture. Use the code below to visualize the distribution of price_usd, the price in US dollars.\n\nggplot(data = ikea, aes(x = price_usd)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nUse the visualization to describe the distribution of price. In your narrative, include description of the shape, approximate center, approximate spread, and any presence of outliers. Briefly explain why the median is more representative of the center of this distribution than the mean.\n\n\n\n\n\n\nTip\n\n\n\nWhen using the visual editor you can insert a code chunk using the Insert menu on top or by using the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. If you are at the beginning of a line you can also enter plain / to invoke the shortcut.\n\n\n\n\nExercise 3\nWhen we make visualizations, we want them to be clear and suitable for a professional audience. This means that, at a minimum, each visualization should have an informative title and informative axis labels. Let’s modify the plot from the previous question to make it suitable for a professional audience. Complete the code below to include an informative title and informative axis labels.\n\nggplot(data = ikea, aes(x = price_usd)) +\n  geom_histogram() +\n  labs(\n    x = \"_____\",\n    y = \"_____\",\n    title = \"_____\"\n  )\n\n\nThis is a good place to fender, commit, and push changes to your remote lab-1 repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message (e.g., “Completed exercises 1 - 3”), and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 4\nAnother way to visualize numeric data is using density plots. Make a density plot to visualize the distribution of price_usd. Be sure to include an informative title and informative axis labels.\nIn this course, we’ll be most interested in the relationship between two or more variables, so let’s begin by looking at the distribution of price by category. We’ll focus on the five categories in the code below, since these include commonly purchased types of furniture.\nUse the code below to create a new data frame that only includes the furniture categories of interest. We’re assigning this data frame to an object with a new name, so we don’t overwrite the original data.\nHow many observations are in the ikea_sub dataset? How many variables?\n\nikea_sub &lt;- ikea %&gt;%\n  filter(category %in% c(\n    \"Tables & desks\", \"Beds\",\n    \"Bookcases & shelving units\",\n    \"Sofas & armchairs\", \"Children's furniture\"\n  ))\n\n\n\n\n\n\n\nImportant\n\n\n\nYou will use this newly constructed data frame, ikea_sub, for the remainder of the lab.\n\n\n\n\nExercise 5\nLet’s make a new visualization with the density curves colored by category, so we can compare the distribution of price for each category.\n\nggplot(data = ikea_sub, aes(x = price_usd, fill = category)) +\n  geom_density()\n\n\n\n\n\n\n\n\nThe overlapping colors make it difficult to tell what’s happening with the distributions for the categories plotted first and hence covered by categories plotted over them. We can change the transparency level of the fill color to help with this. The alpha argument takes values between 0 and 1: 0 is completely transparent and 1 is completely opaque. There is no way to tell what value will work best, so it’s best to try a few.\nRecreate the density plot using a more suitable alpha level, so we can more easily see the distribution of all the categories. Include an informative title and informative axis labels.\n\nggplot(data = ikea_sub, aes(x = price_usd, fill = category)) +\n  geom_density(alpha = 0.8)\n\n\n\n\n\n\n\n\n\nThis is a good place to render, commit, and push changes to your remote lab-1 repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message (e.g., “Completed exercises 4 and 5”), and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 6\nBriefly describe why we defined the fill of the curves by mapping aesthetics of the plot (inside the aes function) but we defined the alpha level as a characteristic of the plotting geom.\n\n\nExercise 7\nOverlapping density plots are not the only way to visualize the relationship between a quantitative and categorical variable.\nUse a different type of plot to visualize the relationship between price_usd and category. Include an informative title and informative axis labels.\n\n\n\n\n\n\nTip\n\n\n\nYou can use the ggplot2 cheatsheet and from Data to Viz for inspiration.\n\n\n\n\nExercise 8\nCompare and contrast your plots from the previous exercise to the overlapping density plots from Exercise 5. What features are apparent in the plot from the previous exercise that aren’t in the overlapping density plots? What features are apparent in the overlapping density plots that aren’t in the plot from the previous exercise? What features are apparent in both?\n\nThis is a good place to render, commit, and push changes to your remote lab-1 repo on GitHub. Click the checkbox next to each file in the Git pane to stage the updates you’ve made, write an informative commit message (e.g., “Completed exercises 6 - 8”), and push. After you push the changes, the Git pane in RStudio should be empty.\n\n\n\nExercise 9\nNext, let’s look at the relationship between the price and width of Ikea furniture. Fill in the code below to visualize the relationship between the two variables using a scatterplot.\nThen, use your visualization to describe the relationship between the width and price of Ikea furniture.\n\nggplot(data = _____, aes(x = width, y = _____)) +\n  geom_point() + \n  labs(\n    x = \"_____\", \n    y = \"_____\", \n    title = \"_____\"\n    )\n\n\n\nExercise 10\nColor the points of the scatterplot by category. Describe how the relationship between price and width of Ikea furniture differs by category, if at all.\n\nYou’re done and ready to submit your work! Render, commit, and push all remaining changes. You can use the commit message “Done with Lab 1!” , and make sure you have committed and pushed all changed files to GitHub (your Git pane in RStudio should be empty) and that all documents are updated in your repo on GitHub. The PDF document you submit to Gradescope should be identical to the one in your GitHub repo."
  },
  {
    "objectID": "labs/lab-1.html#submission",
    "href": "labs/lab-1.html#submission",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Submission",
    "text": "Submission\nIn this class, we’ll be submitting PDF documents to Gradescope.\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”).\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section."
  },
  {
    "objectID": "labs/lab-1.html#grading",
    "href": "labs/lab-1.html#grading",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 10\n45\n\n\nWorkflow & formatting\n51\n\n\n\n1 The “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML."
  },
  {
    "objectID": "labs/lab-1.html#resources-for-additional-practice-optional",
    "href": "labs/lab-1.html#resources-for-additional-practice-optional",
    "title": "Lab 1 - Meet the toolkit",
    "section": "Resources for additional practice (optional)",
    "text": "Resources for additional practice (optional)\n\nChapter 2: Get Started Data Visualization by Kieran Healy\nChapter 3: Data visualization in R for Data Science by Hadley Wickham\nRStudio Cloud Primers\n\nVisualization Basics: https://rstudio.cloud/learn/primers/1.1\nWork with Data: https://rstudio.cloud/learn/primers/2\nVisualize Data: https://rstudio.cloud/learn/primers/3"
  },
  {
    "objectID": "labs/lab-3.html",
    "href": "labs/lab-3.html",
    "title": "Lab 3 - Coffee ratings",
    "section": "",
    "text": "In today’s lab you will analyze data from over 1,000 different coffees to explore the relationship between a coffee’s aroma and it’s overall quality. You will also begin working with your team and practicing a collaborative data analysis workflow.\n\n\nBy the end of the lab you will…\n\nCreate plots and calculate associated statistics to assess model diagnostics.\nPractice collaborating with others using a single Github repo."
  },
  {
    "objectID": "labs/lab-3.html#introduction",
    "href": "labs/lab-3.html#introduction",
    "title": "Lab 3 - Coffee ratings",
    "section": "",
    "text": "In today’s lab you will analyze data from over 1,000 different coffees to explore the relationship between a coffee’s aroma and it’s overall quality. You will also begin working with your team and practicing a collaborative data analysis workflow.\n\n\nBy the end of the lab you will…\n\nCreate plots and calculate associated statistics to assess model diagnostics.\nPractice collaborating with others using a single Github repo."
  },
  {
    "objectID": "labs/lab-3.html#meet-your-team",
    "href": "labs/lab-3.html#meet-your-team",
    "title": "Lab 3 - Coffee ratings",
    "section": "Meet your team!",
    "text": "Meet your team!\nClick here to see the team assignments for STA 210. This will be your team for labs and the final project.\nBefore you get started on the lab, your TA will walk you through the following:\n\nIcebreaker activity to get to know your teammates.\nCome up with a team name. You can’t use the same name as another team, so I encourage you to be creative! Your TA will get your team name by the end of lab.\nFill out the team agreement. This will help you figure out a plan for communication and working together during labs and outside of lab times. You can find the team agreement in the GitHub repo team-agreement-[github_team_name].\nHave one person from the team clone the repo and start a new RStudio project. This person will type the team’s responses as you discuss the sections of the agreement. No one else in the team should type at this point but should be contributing to the discussion.\nBe sure to push the completed agreement to GitHub. Each team member can refer to the document in this repo or download the PDF of the agreement for future reference. You do not need to submit the agreement on Gradescope."
  },
  {
    "objectID": "labs/lab-3.html#getting-started",
    "href": "labs/lab-3.html#getting-started",
    "title": "Lab 3 - Coffee ratings",
    "section": "Getting started",
    "text": "Getting started\n\nA repository has already been created for you and your teammates. Everyone in your team has access to the same repo.\nGo to the sta210-s22 organization on GitHub. Click on the repo with the prefix lab-3. It contains the starter documents you need to complete the lab.\nEach person on the team should clone the repository and open a new project in RStudio. Do not make any changes to the .qmd file until the instructions tell you do to so."
  },
  {
    "objectID": "labs/lab-3.html#workflow-using-git-and-github-as-a-team",
    "href": "labs/lab-3.html#workflow-using-git-and-github-as-a-team",
    "title": "Lab 3 - Coffee ratings",
    "section": "Workflow: Using Git and GitHub as a team",
    "text": "Workflow: Using Git and GitHub as a team\n\n\n\n\n\n\nImportant\n\n\n\nAssign each person on your team a number 1 through 4. For teams of three, Team Member 1 can take on the role of Team Member 4.\n\n\nThe following exercises must be done in order. Only one person should type in the .qmd file, commit, and push updates at a time. When it is not your turn to type, you should still share ideas and contribute to the team’s discussion.\n\n\n\n\n\n\n⌨️ Team Member 1: Hands on the keyboard.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!1\n\n\n\nChange the author to your team name and include each team member’s name in the author field of the YAML in the following format: Team Name: Member 1, Member 2, Member 3, Member 4.\n\nTeam Member 1: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub.\n\n\nTeam Members 2, 3, 4: Once Team Member 1 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the updated name in your .qmd file."
  },
  {
    "objectID": "labs/lab-3.html#packages",
    "href": "labs/lab-3.html#packages",
    "title": "Lab 3 - Coffee ratings",
    "section": "Packages",
    "text": "Packages\nThe following packages are used in the lab.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(knitr)\nlibrary(ggfortify)"
  },
  {
    "objectID": "labs/lab-3.html#data-coffee-ratings",
    "href": "labs/lab-3.html#data-coffee-ratings",
    "title": "Lab 3 - Coffee ratings",
    "section": "Data: Coffee ratings",
    "text": "Data: Coffee ratings\nThe dataset for this lab comes from the Coffee Quality Database and was obtained from the #TidyTuesday GitHub repo. It includes information about the origin, producer, measures of various characteristics, and the quality measure for over 1000 coffees.\nThis lab will focus on the following variables:\n\naroma: Aroma grade, 0 - 10 scale\ntotal_cup_points: Measure of quality, 0 - 100 scale\n\nYou can find the definitions for all variables in the data set here. Click here for more details about how these measures are obtained.\n\ncoffee_ratings &lt;- read_csv(\"data/coffee_ratings.csv\")"
  },
  {
    "objectID": "labs/lab-3.html#exercises",
    "href": "labs/lab-3.html#exercises",
    "title": "Lab 3 - Coffee ratings",
    "section": "Exercises",
    "text": "Exercises\n\n\n\n\n\n\nNote\n\n\n\n\nInclude axis labels and an informative title for all plots.\nUse the kable function to neatly print tables and regression output. Write all interpretations in the context of the data.\nDo the following exercises in order, following each step carefully.\nOnly one person at a time should type in the .qmd file and push updates.\nIf you are working on any portion of the lab virtually, the person working should share their screen and the others should follow along.\n\n\n\n\n\n\n\n\n\n⌨️ Team Member 1: Hands still on the keyboard. Write the answers to Exercises 1 and 2.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!\n\n\n\n\nExercise 1\nVisualize the relationship between aroma and the total cup points. What do you observe from the plot? Use the plot the describe the relationship between the two variables.\n\n\nExercise 2\nFit the linear model and neatly display the results using 3 digits. Interpret the slope in context of the data.\n\nTeam Member 1: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n\n\nTeam Members 2, 3, 4: Once Team Member 1 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the responses to Exercises 1 and 2 in your .qmd file.\n\n\nNow it’s time for a hand off…\n\n\n\n\n\n\n⌨️ Team Member 2: Hands on the keyboard. Write the answers to Exercises 3 and 4.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!\n\n\n\n\n\nExercise 3\nWould the members of your group drink a coffee represented by the intercept? Why or why not? Discuss as a group and write the group’s consensus.\n\n\nExercise 4\nLeverage is the measure of the distance between an observation’s values of the predictor variables and the average values of the predictor variables for the entire data set. An observation s set if have high leverage if its combination of values for the predictor variables is very far from the typical combination of values in the data.An observation has high leverage if its combination of values for the predictor variables is very far from the typical combination of values in the data. Observations with high leverage should be considered as potential influential points.\nWe will proceed assuming the model conditions hold, so let’s focus on the model diagnostics. We’ll start by examining if there are any points with high leverage in the data.\nTheoretically, the leverage of the \\(i^{th}\\) observation as follows:\n\\[\nh_i = \\frac{1}{n} + \\frac{(x_i - \\bar{x})^2}{\\sum_{j = 1}^n (x_j - \\bar{x})^2}\n\\]\nNote that leverage only depends on values of the predictor variable(s).\nThe sum of the leverages for all points is \\(p + 1\\), where\n\n\\(p\\) is the number of predictors\nIn the case of SLR, \\(\\sum_{i = 1}^n h_i = 2\\)\nThe “typical” leverage is \\(\\frac{(p + 1)}{n}\\)\n\nTherefore, an observation is said to have high leverage if\n\\[\nh_i &gt; \\frac{2(p + 1)}{n}\n\\]\nIn addition to comparing the leverage of points to a threshold, we also generally visualize standard residuals vs. leverage values our data. The autoplot() function from the ggfortify package is very useful for drawing these standard plots easily.\n\nautoplot(coffee_fit$fit, which = 5)\n\n\nWhat threshold will you use to determine if there are points with high leverage for this dataset?\nAre there any observations with high leverage? If so, how many? Briefly explain, including any output, graphs, etc. you used to determine the response. Improve your plot by adding a new year to draw a vertical line (with geom_vline()) at the value of the threshold you’re using to determine which points have high leverage.\n\n\nTeam Member 2: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n\n\nTeam Members 1, 3, 4: Once Team Member 2 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the responses to Exercises 3 and 4 in your .qmd file.\n\n\nNow it’s time for another hand off…\n\n\n\n\n\n\n⌨️ Team Member 3: Hands on the keyboard. Write the answers to Exercises 5.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!\n\n\n\n\n\nExercise 5\nAnother standard model diagnostic involves identifying points that don’t fit the pattern from the regression line. We do this by determining which points have large standardized residuals (residual divided by the standard error of residuals).\n\\[\nStd.~res_i = \\frac{y_i - \\hat{y}_1}{\\hat{\\sigma}_\\epsilon ~ \\sqrt{1 - h_i}},\n\\]\nwhere \\(\\hat{\\sigma}_\\epsilon\\) is the regression standard error.\n\n\n\n\n\n\nNote\n\n\n\nThese values are already calculated in the output of augment().\n\n\nObservations that have standardized residuals of large magnitude (usually beyond \\(\\pm\\) 3) are potential outliers, since they don’t fit the pattern determined by the regression model. Therefore, a common practice is to plot standardized residuals vs. fitted values, to make it easier to identify outliers.\nWe can obtain this plot with the following:\n\nautoplot(coffee_fit$fit, which = 3)\n\nCreate this visualization and horizontal lines (with geom_hline()) at the cutoff values for “large” standardized residuals (\\(\\pm\\) 3). Are there any such points in the data? If so, how many? Briefly explain, including any output, graphs, etc. you used to determine the response.\n\nTeam Member 3: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n\n\nTeam Members 1, 2, 4: Once Team Member 3 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the responses to Exercise 5 and 4 in your .qmd file.\n\n\nNow it’s time for another hand off…\n\n\n\n\n\n\n⌨️ Team Member 4: Hands on the keyboard. Write the answers to Exercises 6.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!\n\n\n\n\n\nExercise 6\nFinally, we’ll examine Cook’s Distance. An observation’s influence on the regression line depends on how close it lies to the general trend of the data (i.e., its standardized residual) and it’s leverage (\\(h_i\\)). Cook’s Distance is a statistic that includes both of these components to measure an observation’s overall impact on the model. Cook’s Distance for the \\(i^{th}\\) observation is defined as the follows:\n\\[\nD_i = \\frac{(std.~res)^2}{p + 1} (\\frac{h_i}{1-\\frac{h_i})\n\\]\nAn observation with large \\(D_i\\) is said to have a strong influence on the predicted values. On that scale,\n\n\\(D_i\\) &gt; 0.5 is moderately influential\n\\(D_i\\) &gt; 1 is very influential\n\nWe can plot of Cook’s distances vs. the observation number with the following:\n\nautoplot(coffee_fit$fit, which = 4, ncol = 1)\n\n\n\n\n\n\n\n\nStandardized residuals, leverage, and Cook’s Distance should all be examined together. So what do we do with observations identified as outliers or leverage points?\nIt is OK to drop an observation based on the predictor variables if…\n\nIt is meaningful to drop the observation given the context of the problem\nYou intended to build a model on a smaller range of the predictor variables. You should mention this in the write up of the results and be careful to avoid extrapolation when making predictions.\n\nIt is not OK to drop an observation based on the response variable if…\n\nThese are legitimate observations and should be in the model.\nYou can try transformations or increasing the sample size by collecting more data.\n\nSo lastly, let’s analyze Cook’s D to determine if there are influential points in the data.\n\nBased on Cook’s D, are there any influential points in our data? Briefly explain, including any output, graphs, etc. you used to determine the response.\nIf there are influential points, briefly explain why they are outliers, i.e., not in the trend of the rest of the data.\nIf there are influential points, remove those points from the data and refit the model. How do the model coefficients change, if at all?\nIf there are influential points, would you recommend using the model fit with or without these points for inferential conclusions and predictions? Briefly explain why or why not. Additionally, briefly explain potential impacts your choice has on inferential conclusions and/or predictions.\n\n\nTeam Member 4: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n\n\nTeam Members 1, 2, 3: Once Team Member 4 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the responses to Exercise 6 and 4 in your .qmd file.\n\n\nNow it’s time for one last hand off…"
  },
  {
    "objectID": "labs/lab-3.html#wrapping-up",
    "href": "labs/lab-3.html#wrapping-up",
    "title": "Lab 3 - Coffee ratings",
    "section": "Wrapping up",
    "text": "Wrapping up\n\n\n\n\n\n\nImportant\n\n\n\n⌨️ Team Member 2: Hands on the keyboard. Make any edits as needed.\n🙅🏽 All other team members: Hands off the keyboard until otherwise instructed!\n\n\n\nTeam Member 2: Render the document and confirm that the changes are visible in the PDF. Then, commit (with an informative commit message) both the .qmd and PDF documents, and finally push the changes to GitHub. Make sure to commit and push all changed files so that your Git pane is empty afterwards.\n\n\nTeam Members 1, 3, 4: Once Team Member 2 is done rendering, committing, and pushing, confirm that the changes are visible on GitHub in your team’s lab repo. Then, in RStudio, click the Pull button in the Git pane to get the updated document. You should see the final version of your .qmd file."
  },
  {
    "objectID": "labs/lab-3.html#submission",
    "href": "labs/lab-3.html#submission",
    "title": "Lab 3 - Coffee ratings",
    "section": "Submission",
    "text": "Submission\n\n\n\n\n\n\nWarning\n\n\n\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo. We will be checking these to make sure you have been practicing how to commit and push changes.\nRemember – you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n\n\nTo submit your assignment:\n\nSelect one team member to upload the team’s PDF submission to Gradescope.\nBe sure to include every team member’s name in the Gradescope submission.\nGo to http://www.gradescope.com and click Log in in the top right corner.\nClick School Credentials ➡️ Duke NetID and log in using your NetID credentials.\nClick on your STA 210 course.\nClick on the assignment, and you’ll be prompted to submit it.\nMark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be “checked”). If any answer spans multiple pages, then mark all pages.\nSelect the first page of your PDF submission to be associated with the “Workflow & formatting” section.\n\n\n\n\n\n\n\nImportant\n\n\n\nThere should only be one submission per team on Gradescope."
  },
  {
    "objectID": "labs/lab-3.html#grading",
    "href": "labs/lab-3.html#grading",
    "title": "Lab 3 - Coffee ratings",
    "section": "Grading",
    "text": "Grading\nTotal points available: 50 points.\n\n\n\nComponent\nPoints\n\n\n\n\nEx 1 - 6\n42\n\n\nWorkflow & formatting\n52\n\n\nComplete team contract\n3"
  },
  {
    "objectID": "labs/lab-3.html#footnotes",
    "href": "labs/lab-3.html#footnotes",
    "title": "Lab 3 - Coffee ratings",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDon’t trust yourself to keep your hands off the keyboard? Put them in your picket or cross your arms. No matter how silly it might feel, resist the urge to touch your keyboard until otherwise instructed!↩︎\nThe “Workflow & formatting” grade is to assess the reproducible workflow. This includes having at least 3 informative commit messages and updating the name and date in the YAML.↩︎"
  },
  {
    "objectID": "module-faq.html",
    "href": "module-faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Go to your Files tab, check the box next to the file you want to download, then click on the blue gear icon on the Files tab to reveal the drop down menu, and select Export… If you have selected multiple files to export, RStudio will zip them up into a single zip file for you. If you’ve selected just a single file, it will only download that. The downloaded file will go to wherever files you download off the internet goes on your computer (usually your Downloads folder).",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#how-do-i-export-my-assignment-pdf-from-rstudio-to-upload-to-gradescope",
    "href": "module-faq.html#how-do-i-export-my-assignment-pdf-from-rstudio-to-upload-to-gradescope",
    "title": "FAQ",
    "section": "",
    "text": "Go to your Files tab, check the box next to the file you want to download, then click on the blue gear icon on the Files tab to reveal the drop down menu, and select Export… If you have selected multiple files to export, RStudio will zip them up into a single zip file for you. If you’ve selected just a single file, it will only download that. The downloaded file will go to wherever files you download off the internet goes on your computer (usually your Downloads folder).",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#how-can-i-submit-my-assignment-to-gradescope",
    "href": "module-faq.html#how-can-i-submit-my-assignment-to-gradescope",
    "title": "FAQ",
    "section": "How can I submit my assignment to Gradescope?",
    "text": "How can I submit my assignment to Gradescope?\nThe instructions for submitting your assignment to Gradescope can be found here. In a nutshell, you’ll upload your PDF and them mark the page(s) where each question can be found. It’s OK if a question spans multiple pages, just mark them all. It’s also OK if a page includes multiple questions.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-faq.html#can-i-use-a-local-install-of-r-and-rstudio-instead-of-using-the-rstudio-containers",
    "href": "module-faq.html#can-i-use-a-local-install-of-r-and-rstudio-instead-of-using-the-rstudio-containers",
    "title": "FAQ",
    "section": "Can I use a local install of R and RStudio instead of using the RStudio containers?",
    "text": "Can I use a local install of R and RStudio instead of using the RStudio containers?\nThe short answer is, I’d rather you didn’t, to save yourself some headache. But, the long answer is, sure! But you will need to install a specific versions of R and RStudio for everything to work as expected. You will also need to install the R packages we’re using as well as have Git installed on your computer. These are not extremely challenging things to get right, but they are not trivial either, particularly on certain operating systems. Myself and the TAs are always happy to provide help with any computational questions when you’re working in the containers we have provided for you. If you’re working on your local setup, we can’t guarantee being able to resolve your issues, though we’re happy to try.\nIf you want to take this path, here is what you need to do:\n\nDownload and install R 4.1.2: https://cran.r-project.org/\nDownload and install a daily build of RStudio: https://dailies.rstudio.com/\nInstall Quarto CLI: https://quarto.org/docs/getting-started/installation.html\nInstall Git: https://happygitwithr.com/install-git.html\nInstall any necessary packages with install.packages(\"___\")\n\nAnd I’d like to reiterate again that successful installation of these software is not a learning goal of this course. So if any of this seems tedious or intimidating in any way, just use the computing environment we have set up for you. More on that here.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "module-schedule.html",
    "href": "module-schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "This schedule is an outline of the topics, content, and assignments. Note that this may be updated as the module progresses.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\nTopic\nLecture\nNotes\nCode\nTutorial\nHomework\n\n\n\n\n1\n🐈 Scratch\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n2\n🟢 C\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n3\n🟢 Arrays\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n4\n🟢 Algorithms\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n5\n🟢 Memory\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n6\n🟢 Data structures\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n7\n🐍 Python\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n8\n📊 SQL\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n9\n🌐 Web programming\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n10\n🐍 Flask\n💻\n📕\n🤖\n👨‍🏫\n🏠\n\n\n11\n👋 Wrap up\n💻\n📕\n🤖\n👨‍🏫\n🏠",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "notes/notes_1.html",
    "href": "notes/notes_1.html",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Welcome!\nCommunity!\nComputer Science and Problem Solving\nASCII\nUnicode\nRGB\nAlgorithms\nPseudocode\nArtificial Intelligence\nWhat’s Ahead\nScratch\nHello World\nHello, You\nMeow and Abstraction\nConditionals\nOscartime\nIvy’s Hardest Game\nSumming Up\n\n\n\n\nThis class is about more than computer programming! The practical skills you will learn in this class may have an impact on your life and learning well beyond computer science.\nIndeed, this class is about problem-solving in a way that is exceedingly empowering! You will likely take the problem solving that you learn here, which will likely be instantly applicable to your work beyond this course and even your career as a whole!\nHowever, it will not be easy! You will be “drinking from the firehose” of knowledge during this course. You’ll be amazed at what you will be able to accomplish in the coming weeks.\nThis course is far more about you advancing “you” from “where you are today” than hitting some imagined standard.\nThe most important opening consideration in this course: Give the time you need to learn through this course. Everyone learns differently. If something does not work out well at the start, know that with time you will grow and grow in your skill.\nDon’t be scared if this is your first computer science class! For most of your peers, this is their first computer science class, too! Further, teaching fellows, course assistants, and your peer community are here to help you!\n\n\n\n\n\nYou are part of a community of those taking this course.\nWe hope you will join us (whether in person or virtually) in Discord: The Statistics Lab.\nYou can attend our community activities including Lunches, hackathons, and our Code Club and HARUG! meetings.\n\n\n\n\n\nEssentially, computer programming is about taking some input and creating some output - thus solving a problem. What happens in between the input and output, what we could call a black box, is the focus of this course.\n\n\n\nBlack box with input and output\n\n\nFor example, we may need to take attendance for a class. We could use a system called unary (also called base-1) to count one finger at a time.\nComputers today count using a system called binary. It’s from the term binary digit that we get a familiar term called bit. A bit is a zero or one: on or off.\nComputers only speak in terms of zeros and ones. Zeros represent off. Ones represent on. Computers are millions, and perhaps billions, of transistors that are being turned on and off.\nIf you imagine using a light bulb, a single bulb can only count from zero to one.\nHowever, if you were to have three light bulbs, there are more options open to you!\nInside your iPhone, there are millions of light bulbs called transistors that enable the activities this device one may take for granted each day.\nAs a heuristic, we could imagine that the following values represent each possible place in our binary digit:\n4 2 1\nUsing three light bulbs, the following could represent zero:\n4 2 1\n0 0 0\nSimilarly, the following would represent one:\n4 2 1\n0 0 1\nBy this logic, we could propose that the following equals two:\n4 2 1\n0 1 0\nExtending this logic further, the following represents three:\n4 2 1\n0 1 1\nFour would appear as:\n4 2 1\n1 0 0\nWe could, in fact, using only three light bulbs count as high as seven!\n4 2 1\n1 1 1\nComputers use base-2 to count. This can be pictured as follows:\n2^2  2^1  2^0\n4    2    1\nTherefore, you could say that it would require three bits (the four’s place, the two’s place, and the one’s place) to represent a number as high as seven.\nSimilarly, to count a number as high as eight, values would be represented as follows:\n8 4 2 1\n1 0 0 0\nComputers generally use eight bits (also known as a byte) to represent a number. For example, 00000101 is the number 5 in binary. 11111111 represents the number 255. You can imagine zero as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nJust as numbers are binary patterns of ones and zeros, letters are represented using ones and zeros, too!\nSince there is an overlap between the ones and zeros that represent numbers and letters, the ASCII standard was created to map specific letters to specific numbers.\nFor example, the letter A was decided to map to the number 65. 01000001 represents the number 65 in binary. You can visualize this as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n1\n0\n0\n0\n0\n0\n1\n\n\n\nIf you received a text message, the binary under that message might represent the numbers 72, 73, and 33. Mapping these out to ASCII, your message would look as follows:\nH   I   !\n72  73  33\nThank goodness for standards like ASCII that allow us to agree upon these values!\nHere is an expanded map of ASCII values:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nIf you wish, you can learn more about ASCII.\nSince binary can only count up to 255 we are limited to the number of characters represented by ASCII.\n\n\n\n\n\nAs time has rolled on, there are more and more ways to communicate via text.\nSince there were not enough digits in binary to represent all the various characters that could be represented by humans, the Unicode standard expanded the number of bits that can be transmitted and understood by computers. Unicode includes not only special characters, but emoji as well.\nThere are emoji that you probably use every day. The following may look familiar to you:\n😀 😃 😄 😁 😆 😅 😂 🙂 🙃 😉 😊 😇 😍 😘 😗 😙 😚 😋 😛 😜 😝 🤑 🤓 😎 🤗 😏 😶 😐 😑 😒 🙄 😬 😕 ☹️ 😟 😮 😯 😲 😳 😦 😧 😨\nWhile the pattern of zeros and ones is standardized within Unicode, each device manufacturer may display each emoji slightly differently than another manufacturer.\nMore and more features are being added to the Unicode standard to represent further characters and emoji.\nIf you wish, you can learn more about Unicode.\nIf you wish, you can learn more about emoji.\n\n\n\n\n\nZeros and ones can be used to represent color.\nRed, green, and blue (called RGB) are a combination of three numbers.\n\n\n\nred green blue boxes\n\n\nTaking our previously used 72, 73, and 33, which said HI! via text, would be interpreted by image readers as a light shade of yellow. The red value would be 72, the green value would be 73, and the blue would be 33.\n\n\n\nyellow box\n\n\nThe three bytes required to represent various colors of red, blue, and green (or RGB) make up each pixel (or dot) of color in any digital image. Images are simply collections of RGB values.\nZeros and ones can be used to represent images, videos, and music!\nVideos are sequences of many images that are stored together, just like a flipbook.\nMusic can be represented similarly using various combinations of bytes.\n\n\n\n\n\nProblem-solving is central to computer science and computer programming. An algorithm is a step-by-step set of instructions to solve a problem.\nImagine the basic problem of trying to locate a single name in a phone book.\nHow might one go about this?\nOne approach could be to simply read from page one to the next to the next until reaching the last page.\nAnother approach could be to search two pages at a time.\nA final and perhaps better approach could be to go to the middle of the phone book and ask, “Is the name I am looking for to the left or to the right?” Then, repeat this process, cutting the problem in half and half and half.\nEach of these approaches could be called algorithms. The speed of each of these algorithms can be pictured as follows in what is called big-O notation:\n\n\n\nbig o notation\n\n\nNotice that the first algorithm, highlighted in red, has a big-O of n because if there are 100 names in the phone book, it could take up to 100 tries to find the correct name. The second algorithm, where two pages were searched at a time, has a big-O of n/2 because we searched twice as fast through the pages. The final algorithm has a big-O of log2n, as doubling the problem would only result in one more step to solve the problem.\nProgrammers translate text-based, human instructions into code.\n\n\n\n\n\nThis process of converting instructions into code is called pseudocode.\nThe ability to create pseudocode is central to one’s success in both this class and in computer programming.\nPseudocode is a human-readable version of your code. For example, considering the third algorithm above, we could compose pseudocode as follows:\n\n(Old fashioned example, but bear with me!)\n```         \n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n```\n\nPseudocoding is such an important skill for at least two reasons. First, when you pseudocode before you create formal code, it allows you to think through the logic of your problem in advance. Second, when you pseudocode, you can later provide this information to others that are seeking to understand your coding decisions and how your code works.\nNotice that the language within our pseudocode has some unique features. First, some of these lines begin with verbs like pick up, open, look at. Later, we will call these functions.\nSecond, notice that some lines include statements like if or else if. These are called conditionals.\nThird, notice how there are expressions that can be stated as true or false, such as “person is earlier in the book.” We call these boolean expressions.\nFinally, notice how there are statements like “go back to line 3.” We call these loops.\nThese building blocks are the fundamentals of programming.\nIn the context of Scratch, which is discussed below, we will use each of the above basic building blocks of programming.\n\n\n\n\n\nConsider how we can utilize the building blocks above to start creating our own artificial intelligence. Look at the following pseudocode:\nIf student says hello\n    Say hello\nElse if student says goodbye\n    Say goodbye \nElse if student asks how you are\n    Say well\nElse if student asks why 111 in binary is 7 in decimal\n...\nNotice how just to program a handful of interactions, many lines of code would be required. How many lines of code would be required for thousands or tens of thousands of possible interactions?\nRather than programming conversational AI like the above, AI programmers train large language models (LLMs) on large datasets.\nLLMs look at patterns in large blocks of language. Such language models attempt to create a best guess of what words come after one another or alongside one another.\nYou may use AI-based software to ask questions, but not presenting its answers as your own.\nYou may not use AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) to suggests answers for your work or lines of code.\n\n\n\n\n\nYou will be learning this week about Scratch, a visual programming language.\nThen, in future weeks, you will learn about C. That will look something like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  printf(\"hello, world\\n\");\n}\nBy learning C, you will be far more prepared for future learning in other programming languages like Python.\nFurther, as the weeks progress, you will learn about algorithms.\nWhat makes C so challenging is the punctuation. Setting aside that punctuation and syntax for today, we are going to work solely with ideas in a programming language called Scratch.\n\n\n\n\n\nScratch is a visual programming language developed by MIT.\nScratch utilizes the same essential coding building blocks that we covered earlier in this lecture.\nScratch is a great way to get into computer programming because it allows you to play with these building blocks in a visual manner, not having to be concerned about the syntax of curly braces, semicolons, parentheses, and the like.\nScratch IDE (integrated development environment) looks like the following:\n\n\n\nscratch interface\n\n\nNotice that on the left, there is a palette of building blocks that you can use in your programming. To the immediate right of the building blocks, there is the area to which you can drag blocks to build a program. To the right of that, you see the stage where a cat stands. The stage is where your programming comes to life.\nScratch operates on a coordinate system as follows:\n\n\n\nscratch coordinate system\n\n\nNotice that the center of the stage is at coordinate (0,0). Right now, the cat’s position is at that same position.\n\n\n\n\n\nTo begin, drag the “when green flag clicked” building block to the programming area. Then, drag the say building block to the programming area and attach it to the previous block.\nwhen green flag clicked\nsay [hello, world]\nNotice that when you click the green flag now on the stage, the cat says, “hello, world.”\nThis illustrates quite well what we were discussing earlier regarding programming:\n\n\n\nscratch with black box\n\n\nNotice that the input hello, world is passed to the function say, and the side effect of that function running is the cat saying hello, world.\n\n\n\n\n\nWe can make your program more interactive by having the cat say hello to someone specific. Modify your program as below:\nwhen green flag clicked\nask [What's your name?] and wait\nsay (join [hello,] (answer))\nNotice that when the green flag is clicked, the function ask is run. The program prompts you, the user, What's your name? It then stores that name in the variable called answer. The program then passes answer to a special function called join, which combines two strings of text hello, and whatever name was provided. Quite literally, answer returns a value to join. These collectively are passed to the say function. The cat says, Hello, and a name. Your program is now interactive.\nThroughout this course, you will be providing inputs into an algorithm and getting outputs (or side effects). This can be pictured in terms of the above program as follows:\n\n\n\nscratch as algorithm\n\n\nNotice that the inputs hello, and answer are provided to join, resulting in the side effect of hello, David.\nQuite similarly, we can modify our program as follows:\nwhen green flag clicked\nask [What's your name?] and wait\nspeak (join [hello,] (answer))\nNotice that this program, when the green flag is clicked, passes the same variable, joined with hello, to a function called speak.\n\n\n\n\n\nAlong with pseudocoding, abstraction is an essential skill and concept within computer programming.\nAbstraction is the act of simplifying a problem into smaller and smaller problems.\nFor example, if you were hosting a huge dinner for your friends, the problem of having to cook the entire meal could be quite overwhelming! However, if you break down the task of cooking the meal into smaller and smaller tasks (or problems), the big task of creating this delicious meal might feel less challenging.\nIn programming, and even within Scratch, we can see abstraction in action. In your programming area, program as follows:\nwhen green flag clicked\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nNotice that you are doing the same thing over and over again. Indeed, if you see yourself repeatedly coding the same statements, it’s likely the case that you could program more artfully – abstracting away this repetitive code.\nYou can modify your code as follows:\nwhen green flag clicked\nrepeat (3)\nplay sound (Meow v) until done\nwait (1) seconds\nNotice that the loop does exactly as the previous program did. However, the problem is simplified by abstracting away the repetition to a block that repeats the code for us.\nWe can even advance this further by using the define block, where you can create your own block (your own function)! Write code as follows:\ndefine meow\nplay sound (Meow v) until done\nwait (1) seconds\n\nwhen green flag clicked\nrepeat (3)\nmeow\nNotice that we are defining our own block called meow. The function plays the sound meow, and then waits one second. Below that, you can see that when the green flag is clicked, our meow function is repeated three times.\nWe can even provide a way by which the function can take an input n and repeat a number of times:\ndefine meow n times\nrepeat (n)\n play sound [meow v] until done\n wait (1) seconds\nNotice how n is taken from “meow n times.” n is passed to the meow function through the define block.\nOverall, notice how this process of refinement led to better and better-designed code. Further, notice how we created our own algorithm to solve a problem. You will be exercising both of these skills throughout this course.\n\n\n\n\n\nConditionals are an essential building block of programming, where the program looks to see if a specific condition has been met. If a condition is met, the program does something.\nTo illustrate a conditional, write code as follows:\nwhen green flag clicked\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nplay sound (Meow v) until done\nNotice that the forever block is utilized such that the if block is triggered over and over again, such that it can check continuously if the cat is touching the mouse pointer.\nWe can modify our program as follows to integrate video sensing:\nwhen video motion &gt; (10)\nplay sound (Meow v) until done\nRemember, programming is often a process of trial and error. If you get frustrated, take time to talk yourself through the problem at hand. What is the specific problem that you are working on right now? What is working? What is not working?\n\n\n\n\n\nOscartime is one of David’s own Scratch programs – though the music may haunt him because of the number of hours he listened to it while creating this program. Take a few moments to play through the game yourself.\nBuilding Oscartime ourselves, we first add the lamp post.\n\n\n\noscartime interface\n\n\nThen, write code as follows:\nwhen green flag clicked\nswitch costume to (oscar1 v)\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nswitch costume to (oscar2 v)\nelse\nswitch costume to (oscar1 v)\nNotice that moving your mouse over Oscar changes his costume. You can learn more by exploring these code blocks.\nThen, modify your code as follows to create a falling piece of trash:\nwhen green flag clicked\ngo to x: (pick random (-240) to (240)) y: (180)\nforever\nif &lt;(distance to (floor v)) &gt; (0)&gt; then\nchange y by (-3)\nNotice that the trash’s position on the y-axis always begins at 180. The x position is randomized. While the trash is above the floor, it goes down 3 pixels at a time. You can learn more by exploring these code blocks.\nNext, modify your code as follows to allow for the possibility of dragging trash.\nwhen green flag clicked\nforever\nif &lt;&lt;mouse down?&gt; and &lt;touching (mouse-pointer v) ?&gt;&gt; then\ngo to (mouse-pointer v)\nYou can learn more by exploring these code blocks.\nNext, we can implement the scoring variables as follows:\nwhen green flag clicked\nforever\nif &lt;touching (Oscar v) ?&gt; then\nchange (score) by (1)\ngo to x: (pick random (-240) to (240)) y: (180)\nYou can learn more by exploring these code blocks.\nGo try the full game Oscartime.\n\n\n\n\n\nMoving away from Oscartime to Ivy’s Hardest Game, we can now imagine how to implement movement within our program.\nOur program has three main components.\nFirst, write code as follows:\nwhen green flag clicked\ngo to x: (0) y: (0)\nforever\nlisten for keyboard\nfeel for walls\nNotice that when the green flag is clicked, our sprite moves to the center of the stage at coordinates (0,0) and then listens for the keyboard and checks for walls forever.\nSecond, add this second group of code blocks:\ndefine listen for keyboard\nif &lt;key (up arrow v) pressed?&gt; then\nchange y by (1)\nend\nif &lt;key (down arrow v) pressed?&gt; then\nchange y by (-1)\nend\nif &lt;key (right arrow v) pressed?&gt; then\nchange x by (1)\nend\nif &lt;key (left arrow v) pressed?&gt; then\nchange x by (-1)\nend\nNotice how we have created a custom listen for keyboard script. For each of our arrow keys on the keyboard, it will move the sprite around the screen.\nFinally, add this group of code blocks:\ndefine feel for walls\nif &lt;touching (left wall v) ?&gt; then\nchange x by (1)\nend\nif &lt;touching (right wall v) ?&gt; then\nchange x by (-1)\nend\nNotice how we also have a custom feel for walls script. When a sprite touches a wall, it moves it back to a safe position – preventing it from walking off the screen.\nYou can learn more by exploring these code blocks.\nScratch allows for many sprites to be on the screen at once.\nAdding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (90)\nforever\nif &lt;&lt;touching (left wall v)?&gt; or &lt;touching (right wall v)?&gt;&gt; then\nturn right (180) degrees\nend\nmove (1) steps\nend\nNotice how the Yale sprite seems to get in the way of the Harvard sprite by moving back and forth. When it bumps into a wall, it turns around until it bumps the wall again. You can learn more by exploring these code blocks.\nYou can even make a sprite follow another sprite. Adding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to (random position v)\nforever\npoint towards (Harvard v)\nmove (1) steps\nNotice how the MIT logo now seems to follow around the Harvard one. You can learn more by exploring these code blocks.\nGo try the full game Ivy’s Hardest Game.\n\n\n\n\nIn this lesson, you learned how this course sits in the wide world of computer science and programming. You learned…\n\nFew students come to this class with prior programming experience!\nYou are not alone! You are part of a community.\nProblem-solving is the essence of the work of computer scientists.\nThis course is not simply about programming – this course will introduce you to a new way of learning that you can apply to almost every area of life.\nHow numbers, text, images, music, and video are understood and represented by computers.\nThe fundamental programming skill of pseudocoding.\nReasonable and unreasonable ways to utilize AI in this course.\nHow abstraction will play a role in your future work in this course.\nThe basic building blocks of programming including functions, conditionals, loops, and variables.\nHow to build a project in Scratch.\n\nThat’s it! Welcome aboard! See you next time!"
  },
  {
    "objectID": "notes/notes_1.html#welcome",
    "href": "notes/notes_1.html#welcome",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "This class is about more than computer programming! The practical skills you will learn in this class may have an impact on your life and learning well beyond computer science.\nIndeed, this class is about problem-solving in a way that is exceedingly empowering! You will likely take the problem solving that you learn here, which will likely be instantly applicable to your work beyond this course and even your career as a whole!\nHowever, it will not be easy! You will be “drinking from the firehose” of knowledge during this course. You’ll be amazed at what you will be able to accomplish in the coming weeks.\nThis course is far more about you advancing “you” from “where you are today” than hitting some imagined standard.\nThe most important opening consideration in this course: Give the time you need to learn through this course. Everyone learns differently. If something does not work out well at the start, know that with time you will grow and grow in your skill.\nDon’t be scared if this is your first computer science class! For most of your peers, this is their first computer science class, too! Further, teaching fellows, course assistants, and your peer community are here to help you!"
  },
  {
    "objectID": "notes/notes_1.html#community",
    "href": "notes/notes_1.html#community",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "You are part of a community of those taking this course.\nWe hope you will join us (whether in person or virtually) in Discord: The Statistics Lab.\nYou can attend our community activities including Lunches, hackathons, and our Code Club and HARUG! meetings."
  },
  {
    "objectID": "notes/notes_1.html#computer-science-and-problem-solving",
    "href": "notes/notes_1.html#computer-science-and-problem-solving",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Essentially, computer programming is about taking some input and creating some output - thus solving a problem. What happens in between the input and output, what we could call a black box, is the focus of this course.\n\n\n\nBlack box with input and output\n\n\nFor example, we may need to take attendance for a class. We could use a system called unary (also called base-1) to count one finger at a time.\nComputers today count using a system called binary. It’s from the term binary digit that we get a familiar term called bit. A bit is a zero or one: on or off.\nComputers only speak in terms of zeros and ones. Zeros represent off. Ones represent on. Computers are millions, and perhaps billions, of transistors that are being turned on and off.\nIf you imagine using a light bulb, a single bulb can only count from zero to one.\nHowever, if you were to have three light bulbs, there are more options open to you!\nInside your iPhone, there are millions of light bulbs called transistors that enable the activities this device one may take for granted each day.\nAs a heuristic, we could imagine that the following values represent each possible place in our binary digit:\n4 2 1\nUsing three light bulbs, the following could represent zero:\n4 2 1\n0 0 0\nSimilarly, the following would represent one:\n4 2 1\n0 0 1\nBy this logic, we could propose that the following equals two:\n4 2 1\n0 1 0\nExtending this logic further, the following represents three:\n4 2 1\n0 1 1\nFour would appear as:\n4 2 1\n1 0 0\nWe could, in fact, using only three light bulbs count as high as seven!\n4 2 1\n1 1 1\nComputers use base-2 to count. This can be pictured as follows:\n2^2  2^1  2^0\n4    2    1\nTherefore, you could say that it would require three bits (the four’s place, the two’s place, and the one’s place) to represent a number as high as seven.\nSimilarly, to count a number as high as eight, values would be represented as follows:\n8 4 2 1\n1 0 0 0\nComputers generally use eight bits (also known as a byte) to represent a number. For example, 00000101 is the number 5 in binary. 11111111 represents the number 255. You can imagine zero as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0"
  },
  {
    "objectID": "notes/notes_1.html#ascii",
    "href": "notes/notes_1.html#ascii",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Just as numbers are binary patterns of ones and zeros, letters are represented using ones and zeros, too!\nSince there is an overlap between the ones and zeros that represent numbers and letters, the ASCII standard was created to map specific letters to specific numbers.\nFor example, the letter A was decided to map to the number 65. 01000001 represents the number 65 in binary. You can visualize this as follows:\n\n\n\n128\n64\n32\n16\n8\n4\n2\n1\n\n\n\n\n0\n1\n0\n0\n0\n0\n0\n1\n\n\n\nIf you received a text message, the binary under that message might represent the numbers 72, 73, and 33. Mapping these out to ASCII, your message would look as follows:\nH   I   !\n72  73  33\nThank goodness for standards like ASCII that allow us to agree upon these values!\nHere is an expanded map of ASCII values:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nIf you wish, you can learn more about ASCII.\nSince binary can only count up to 255 we are limited to the number of characters represented by ASCII."
  },
  {
    "objectID": "notes/notes_1.html#unicode",
    "href": "notes/notes_1.html#unicode",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "As time has rolled on, there are more and more ways to communicate via text.\nSince there were not enough digits in binary to represent all the various characters that could be represented by humans, the Unicode standard expanded the number of bits that can be transmitted and understood by computers. Unicode includes not only special characters, but emoji as well.\nThere are emoji that you probably use every day. The following may look familiar to you:\n😀 😃 😄 😁 😆 😅 😂 🙂 🙃 😉 😊 😇 😍 😘 😗 😙 😚 😋 😛 😜 😝 🤑 🤓 😎 🤗 😏 😶 😐 😑 😒 🙄 😬 😕 ☹️ 😟 😮 😯 😲 😳 😦 😧 😨\nWhile the pattern of zeros and ones is standardized within Unicode, each device manufacturer may display each emoji slightly differently than another manufacturer.\nMore and more features are being added to the Unicode standard to represent further characters and emoji.\nIf you wish, you can learn more about Unicode.\nIf you wish, you can learn more about emoji."
  },
  {
    "objectID": "notes/notes_1.html#rgb",
    "href": "notes/notes_1.html#rgb",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Zeros and ones can be used to represent color.\nRed, green, and blue (called RGB) are a combination of three numbers.\n\n\n\nred green blue boxes\n\n\nTaking our previously used 72, 73, and 33, which said HI! via text, would be interpreted by image readers as a light shade of yellow. The red value would be 72, the green value would be 73, and the blue would be 33.\n\n\n\nyellow box\n\n\nThe three bytes required to represent various colors of red, blue, and green (or RGB) make up each pixel (or dot) of color in any digital image. Images are simply collections of RGB values.\nZeros and ones can be used to represent images, videos, and music!\nVideos are sequences of many images that are stored together, just like a flipbook.\nMusic can be represented similarly using various combinations of bytes."
  },
  {
    "objectID": "notes/notes_1.html#algorithms",
    "href": "notes/notes_1.html#algorithms",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Problem-solving is central to computer science and computer programming. An algorithm is a step-by-step set of instructions to solve a problem.\nImagine the basic problem of trying to locate a single name in a phone book.\nHow might one go about this?\nOne approach could be to simply read from page one to the next to the next until reaching the last page.\nAnother approach could be to search two pages at a time.\nA final and perhaps better approach could be to go to the middle of the phone book and ask, “Is the name I am looking for to the left or to the right?” Then, repeat this process, cutting the problem in half and half and half.\nEach of these approaches could be called algorithms. The speed of each of these algorithms can be pictured as follows in what is called big-O notation:\n\n\n\nbig o notation\n\n\nNotice that the first algorithm, highlighted in red, has a big-O of n because if there are 100 names in the phone book, it could take up to 100 tries to find the correct name. The second algorithm, where two pages were searched at a time, has a big-O of n/2 because we searched twice as fast through the pages. The final algorithm has a big-O of log2n, as doubling the problem would only result in one more step to solve the problem.\nProgrammers translate text-based, human instructions into code."
  },
  {
    "objectID": "notes/notes_1.html#pseudocode",
    "href": "notes/notes_1.html#pseudocode",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "This process of converting instructions into code is called pseudocode.\nThe ability to create pseudocode is central to one’s success in both this class and in computer programming.\nPseudocode is a human-readable version of your code. For example, considering the third algorithm above, we could compose pseudocode as follows:\n\n(Old fashioned example, but bear with me!)\n```         \n1  Pick up phone book\n2  Open to middle of phone book\n3  Look at page\n4  If person is on page\n5      Call person\n6  Else if person is earlier in book\n7      Open to middle of left half of book\n8      Go back to line 3\n9  Else if person is later in book\n10     Open to middle of right half of book\n11     Go back to line 3\n12 Else\n13     Quit\n```\n\nPseudocoding is such an important skill for at least two reasons. First, when you pseudocode before you create formal code, it allows you to think through the logic of your problem in advance. Second, when you pseudocode, you can later provide this information to others that are seeking to understand your coding decisions and how your code works.\nNotice that the language within our pseudocode has some unique features. First, some of these lines begin with verbs like pick up, open, look at. Later, we will call these functions.\nSecond, notice that some lines include statements like if or else if. These are called conditionals.\nThird, notice how there are expressions that can be stated as true or false, such as “person is earlier in the book.” We call these boolean expressions.\nFinally, notice how there are statements like “go back to line 3.” We call these loops.\nThese building blocks are the fundamentals of programming.\nIn the context of Scratch, which is discussed below, we will use each of the above basic building blocks of programming."
  },
  {
    "objectID": "notes/notes_1.html#artificial-intelligence",
    "href": "notes/notes_1.html#artificial-intelligence",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Consider how we can utilize the building blocks above to start creating our own artificial intelligence. Look at the following pseudocode:\nIf student says hello\n    Say hello\nElse if student says goodbye\n    Say goodbye \nElse if student asks how you are\n    Say well\nElse if student asks why 111 in binary is 7 in decimal\n...\nNotice how just to program a handful of interactions, many lines of code would be required. How many lines of code would be required for thousands or tens of thousands of possible interactions?\nRather than programming conversational AI like the above, AI programmers train large language models (LLMs) on large datasets.\nLLMs look at patterns in large blocks of language. Such language models attempt to create a best guess of what words come after one another or alongside one another.\nYou may use AI-based software to ask questions, but not presenting its answers as your own.\nYou may not use AI-based software (including ChatGPT, GitHub Copilot, the new Bing, et al.) to suggests answers for your work or lines of code."
  },
  {
    "objectID": "notes/notes_1.html#whats-ahead",
    "href": "notes/notes_1.html#whats-ahead",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "You will be learning this week about Scratch, a visual programming language.\nThen, in future weeks, you will learn about C. That will look something like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n  printf(\"hello, world\\n\");\n}\nBy learning C, you will be far more prepared for future learning in other programming languages like Python.\nFurther, as the weeks progress, you will learn about algorithms.\nWhat makes C so challenging is the punctuation. Setting aside that punctuation and syntax for today, we are going to work solely with ideas in a programming language called Scratch."
  },
  {
    "objectID": "notes/notes_1.html#scratch",
    "href": "notes/notes_1.html#scratch",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Scratch is a visual programming language developed by MIT.\nScratch utilizes the same essential coding building blocks that we covered earlier in this lecture.\nScratch is a great way to get into computer programming because it allows you to play with these building blocks in a visual manner, not having to be concerned about the syntax of curly braces, semicolons, parentheses, and the like.\nScratch IDE (integrated development environment) looks like the following:\n\n\n\nscratch interface\n\n\nNotice that on the left, there is a palette of building blocks that you can use in your programming. To the immediate right of the building blocks, there is the area to which you can drag blocks to build a program. To the right of that, you see the stage where a cat stands. The stage is where your programming comes to life.\nScratch operates on a coordinate system as follows:\n\n\n\nscratch coordinate system\n\n\nNotice that the center of the stage is at coordinate (0,0). Right now, the cat’s position is at that same position."
  },
  {
    "objectID": "notes/notes_1.html#hello-world",
    "href": "notes/notes_1.html#hello-world",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "To begin, drag the “when green flag clicked” building block to the programming area. Then, drag the say building block to the programming area and attach it to the previous block.\nwhen green flag clicked\nsay [hello, world]\nNotice that when you click the green flag now on the stage, the cat says, “hello, world.”\nThis illustrates quite well what we were discussing earlier regarding programming:\n\n\n\nscratch with black box\n\n\nNotice that the input hello, world is passed to the function say, and the side effect of that function running is the cat saying hello, world."
  },
  {
    "objectID": "notes/notes_1.html#hello-you",
    "href": "notes/notes_1.html#hello-you",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "We can make your program more interactive by having the cat say hello to someone specific. Modify your program as below:\nwhen green flag clicked\nask [What's your name?] and wait\nsay (join [hello,] (answer))\nNotice that when the green flag is clicked, the function ask is run. The program prompts you, the user, What's your name? It then stores that name in the variable called answer. The program then passes answer to a special function called join, which combines two strings of text hello, and whatever name was provided. Quite literally, answer returns a value to join. These collectively are passed to the say function. The cat says, Hello, and a name. Your program is now interactive.\nThroughout this course, you will be providing inputs into an algorithm and getting outputs (or side effects). This can be pictured in terms of the above program as follows:\n\n\n\nscratch as algorithm\n\n\nNotice that the inputs hello, and answer are provided to join, resulting in the side effect of hello, David.\nQuite similarly, we can modify our program as follows:\nwhen green flag clicked\nask [What's your name?] and wait\nspeak (join [hello,] (answer))\nNotice that this program, when the green flag is clicked, passes the same variable, joined with hello, to a function called speak."
  },
  {
    "objectID": "notes/notes_1.html#meow-and-abstraction",
    "href": "notes/notes_1.html#meow-and-abstraction",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Along with pseudocoding, abstraction is an essential skill and concept within computer programming.\nAbstraction is the act of simplifying a problem into smaller and smaller problems.\nFor example, if you were hosting a huge dinner for your friends, the problem of having to cook the entire meal could be quite overwhelming! However, if you break down the task of cooking the meal into smaller and smaller tasks (or problems), the big task of creating this delicious meal might feel less challenging.\nIn programming, and even within Scratch, we can see abstraction in action. In your programming area, program as follows:\nwhen green flag clicked\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nwait (1) seconds\nplay sound (Meow v) until done\nNotice that you are doing the same thing over and over again. Indeed, if you see yourself repeatedly coding the same statements, it’s likely the case that you could program more artfully – abstracting away this repetitive code.\nYou can modify your code as follows:\nwhen green flag clicked\nrepeat (3)\nplay sound (Meow v) until done\nwait (1) seconds\nNotice that the loop does exactly as the previous program did. However, the problem is simplified by abstracting away the repetition to a block that repeats the code for us.\nWe can even advance this further by using the define block, where you can create your own block (your own function)! Write code as follows:\ndefine meow\nplay sound (Meow v) until done\nwait (1) seconds\n\nwhen green flag clicked\nrepeat (3)\nmeow\nNotice that we are defining our own block called meow. The function plays the sound meow, and then waits one second. Below that, you can see that when the green flag is clicked, our meow function is repeated three times.\nWe can even provide a way by which the function can take an input n and repeat a number of times:\ndefine meow n times\nrepeat (n)\n play sound [meow v] until done\n wait (1) seconds\nNotice how n is taken from “meow n times.” n is passed to the meow function through the define block.\nOverall, notice how this process of refinement led to better and better-designed code. Further, notice how we created our own algorithm to solve a problem. You will be exercising both of these skills throughout this course."
  },
  {
    "objectID": "notes/notes_1.html#conditionals",
    "href": "notes/notes_1.html#conditionals",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Conditionals are an essential building block of programming, where the program looks to see if a specific condition has been met. If a condition is met, the program does something.\nTo illustrate a conditional, write code as follows:\nwhen green flag clicked\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nplay sound (Meow v) until done\nNotice that the forever block is utilized such that the if block is triggered over and over again, such that it can check continuously if the cat is touching the mouse pointer.\nWe can modify our program as follows to integrate video sensing:\nwhen video motion &gt; (10)\nplay sound (Meow v) until done\nRemember, programming is often a process of trial and error. If you get frustrated, take time to talk yourself through the problem at hand. What is the specific problem that you are working on right now? What is working? What is not working?"
  },
  {
    "objectID": "notes/notes_1.html#oscartime",
    "href": "notes/notes_1.html#oscartime",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Oscartime is one of David’s own Scratch programs – though the music may haunt him because of the number of hours he listened to it while creating this program. Take a few moments to play through the game yourself.\nBuilding Oscartime ourselves, we first add the lamp post.\n\n\n\noscartime interface\n\n\nThen, write code as follows:\nwhen green flag clicked\nswitch costume to (oscar1 v)\nforever\nif &lt;touching (mouse-pointer v)?&gt; then\nswitch costume to (oscar2 v)\nelse\nswitch costume to (oscar1 v)\nNotice that moving your mouse over Oscar changes his costume. You can learn more by exploring these code blocks.\nThen, modify your code as follows to create a falling piece of trash:\nwhen green flag clicked\ngo to x: (pick random (-240) to (240)) y: (180)\nforever\nif &lt;(distance to (floor v)) &gt; (0)&gt; then\nchange y by (-3)\nNotice that the trash’s position on the y-axis always begins at 180. The x position is randomized. While the trash is above the floor, it goes down 3 pixels at a time. You can learn more by exploring these code blocks.\nNext, modify your code as follows to allow for the possibility of dragging trash.\nwhen green flag clicked\nforever\nif &lt;&lt;mouse down?&gt; and &lt;touching (mouse-pointer v) ?&gt;&gt; then\ngo to (mouse-pointer v)\nYou can learn more by exploring these code blocks.\nNext, we can implement the scoring variables as follows:\nwhen green flag clicked\nforever\nif &lt;touching (Oscar v) ?&gt; then\nchange (score) by (1)\ngo to x: (pick random (-240) to (240)) y: (180)\nYou can learn more by exploring these code blocks.\nGo try the full game Oscartime."
  },
  {
    "objectID": "notes/notes_1.html#ivys-hardest-game",
    "href": "notes/notes_1.html#ivys-hardest-game",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "Moving away from Oscartime to Ivy’s Hardest Game, we can now imagine how to implement movement within our program.\nOur program has three main components.\nFirst, write code as follows:\nwhen green flag clicked\ngo to x: (0) y: (0)\nforever\nlisten for keyboard\nfeel for walls\nNotice that when the green flag is clicked, our sprite moves to the center of the stage at coordinates (0,0) and then listens for the keyboard and checks for walls forever.\nSecond, add this second group of code blocks:\ndefine listen for keyboard\nif &lt;key (up arrow v) pressed?&gt; then\nchange y by (1)\nend\nif &lt;key (down arrow v) pressed?&gt; then\nchange y by (-1)\nend\nif &lt;key (right arrow v) pressed?&gt; then\nchange x by (1)\nend\nif &lt;key (left arrow v) pressed?&gt; then\nchange x by (-1)\nend\nNotice how we have created a custom listen for keyboard script. For each of our arrow keys on the keyboard, it will move the sprite around the screen.\nFinally, add this group of code blocks:\ndefine feel for walls\nif &lt;touching (left wall v) ?&gt; then\nchange x by (1)\nend\nif &lt;touching (right wall v) ?&gt; then\nchange x by (-1)\nend\nNotice how we also have a custom feel for walls script. When a sprite touches a wall, it moves it back to a safe position – preventing it from walking off the screen.\nYou can learn more by exploring these code blocks.\nScratch allows for many sprites to be on the screen at once.\nAdding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (90)\nforever\nif &lt;&lt;touching (left wall v)?&gt; or &lt;touching (right wall v)?&gt;&gt; then\nturn right (180) degrees\nend\nmove (1) steps\nend\nNotice how the Yale sprite seems to get in the way of the Harvard sprite by moving back and forth. When it bumps into a wall, it turns around until it bumps the wall again. You can learn more by exploring these code blocks.\nYou can even make a sprite follow another sprite. Adding another sprite, add the following code blocks to your program:\nwhen green flag clicked\ngo to (random position v)\nforever\npoint towards (Harvard v)\nmove (1) steps\nNotice how the MIT logo now seems to follow around the Harvard one. You can learn more by exploring these code blocks.\nGo try the full game Ivy’s Hardest Game."
  },
  {
    "objectID": "notes/notes_1.html#summing-up",
    "href": "notes/notes_1.html#summing-up",
    "title": "Lecture 1 Notes",
    "section": "",
    "text": "In this lesson, you learned how this course sits in the wide world of computer science and programming. You learned…\n\nFew students come to this class with prior programming experience!\nYou are not alone! You are part of a community.\nProblem-solving is the essence of the work of computer scientists.\nThis course is not simply about programming – this course will introduce you to a new way of learning that you can apply to almost every area of life.\nHow numbers, text, images, music, and video are understood and represented by computers.\nThe fundamental programming skill of pseudocoding.\nReasonable and unreasonable ways to utilize AI in this course.\nHow abstraction will play a role in your future work in this course.\nThe basic building blocks of programming including functions, conditionals, loops, and variables.\nHow to build a project in Scratch.\n\nThat’s it! Welcome aboard! See you next time!"
  },
  {
    "objectID": "notes/notes_11.html",
    "href": "notes/notes_11.html",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Recap\nLooking Ahead\nThank You!\nSumming Up\n\n\n\n\nOver these past ten weeks, you have been drinking from the proverbial firehose.\nDuring this course, you learned to program in many different languages; indeed, our great hope is that you learned how to program in them all, regardless of the language.\nConsider back to the beginning of the course when you worked on Mario: You have come so far and have gained so many skills.\nYou should measure your success as the delta between your skill at the start of the course and your skill now, at the end of the course.\nFurther, we hope that you learned how to solve problems above all else, how to take input, process it through an algorithm, and produce some output. To that point, we played a game where we drew a picture using verbal instructions.\nNotice how some verbal instructions were higher level and others were lower level, like the different programming languages utilized in this course.\nNotice how some instructions were more specific than others. Remember times when you had to refine your code to do exactly as you wanted.\nAlso, notice how some instructions were abstracted away, like draw arms. This is similar to how we abstracted away code into functions.\nLooking at all the weeks of the course, you gathered tools and built skills. Above all, though, you learned how to teach yourself.\nYour final project is your opportunity to build a project, using these skills, that is of your specification and design. We hope you will join us for the CS50 Hackathon, an epic all-nighter wherein we work together on our final projects.\n\n\n\n\n\nAs you journey from the work of this course to the world outside CS50, you may want to take a number of steps to prepare and adventure out.\nJourneying on, download and learn about VS Code.\nTo be able to execute commands on the terminal, much like you did on CS50.dev, install command-line tools on your Mac or PC.\nLearn more about Git.\nHost a website using GitHub or Netlify.\nIf applicable, host a web app using AWS, Azure, or Google Cloud.\nAsk questions in relevant online communities.\nAsk questions using AI-based tools like ChatGPT and GitHub Copilot.\nTake any of our other CS50 courses.\nJoin one of our many communities.\n\n\n\n\n\nThank you for engaging in this course!\nMany people made this course possible. Thank you for making this course possible and for supporting us so well!\n\n\n\n\nIn this lesson, we reflected on your journey through this course. Specifically, we encourage you to…\n\nTake the programming skills you learned in this course to solve problems in the world.\nTake the new skills you acquired in this course and continue your learning!\nFinish strong and submit your final project.\nQuack!\n\nThis was CS50!"
  },
  {
    "objectID": "notes/notes_11.html#recap",
    "href": "notes/notes_11.html#recap",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Over these past ten weeks, you have been drinking from the proverbial firehose.\nDuring this course, you learned to program in many different languages; indeed, our great hope is that you learned how to program in them all, regardless of the language.\nConsider back to the beginning of the course when you worked on Mario: You have come so far and have gained so many skills.\nYou should measure your success as the delta between your skill at the start of the course and your skill now, at the end of the course.\nFurther, we hope that you learned how to solve problems above all else, how to take input, process it through an algorithm, and produce some output. To that point, we played a game where we drew a picture using verbal instructions.\nNotice how some verbal instructions were higher level and others were lower level, like the different programming languages utilized in this course.\nNotice how some instructions were more specific than others. Remember times when you had to refine your code to do exactly as you wanted.\nAlso, notice how some instructions were abstracted away, like draw arms. This is similar to how we abstracted away code into functions.\nLooking at all the weeks of the course, you gathered tools and built skills. Above all, though, you learned how to teach yourself.\nYour final project is your opportunity to build a project, using these skills, that is of your specification and design. We hope you will join us for the CS50 Hackathon, an epic all-nighter wherein we work together on our final projects."
  },
  {
    "objectID": "notes/notes_11.html#looking-ahead",
    "href": "notes/notes_11.html#looking-ahead",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "As you journey from the work of this course to the world outside CS50, you may want to take a number of steps to prepare and adventure out.\nJourneying on, download and learn about VS Code.\nTo be able to execute commands on the terminal, much like you did on CS50.dev, install command-line tools on your Mac or PC.\nLearn more about Git.\nHost a website using GitHub or Netlify.\nIf applicable, host a web app using AWS, Azure, or Google Cloud.\nAsk questions in relevant online communities.\nAsk questions using AI-based tools like ChatGPT and GitHub Copilot.\nTake any of our other CS50 courses.\nJoin one of our many communities."
  },
  {
    "objectID": "notes/notes_11.html#thank-you",
    "href": "notes/notes_11.html#thank-you",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "Thank you for engaging in this course!\nMany people made this course possible. Thank you for making this course possible and for supporting us so well!"
  },
  {
    "objectID": "notes/notes_11.html#summing-up",
    "href": "notes/notes_11.html#summing-up",
    "title": "Lecture 11 Notes",
    "section": "",
    "text": "In this lesson, we reflected on your journey through this course. Specifically, we encourage you to…\n\nTake the programming skills you learned in this course to solve problems in the world.\nTake the new skills you acquired in this course and continue your learning!\nFinish strong and submit your final project.\nQuack!\n\nThis was CS50!"
  },
  {
    "objectID": "notes/notes_3.html",
    "href": "notes/notes_3.html",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Welcome!\nReading Levels\nCompiling\nDebugging\nArrays\nStrings\nString Length\nCommand-Line Arguments\nExit Status\nCryptography\nSumming Up\n\n\n\n\nIn our previous session, we learned about C, a text-based programming language.\nThis week, we are going to take a deeper look at additional building blocks that will support our goals of learning more about programming from the bottom up.\nFundamentally, in addition to the essentials of programming, this course is about problem-solving. Accordingly, we will also focus further on how to approach computer science problems.\nBy the end of the course, you will learn how to use these aforementioned building blocks to solve a whole host of computer science problems.\n\n\n\n\n\nOne of the real-world problems we will solve in this course is understanding reading levels.\nWith the help of some of your peers, we presented readings at various reading levels.\nWe will be quantifying reading levels this week as one of your many programming challenges.\n\n\n\n\n\nEncryption is the act of hiding plain text from prying eyes. Decrypting, then, is the act of taking an encrypted piece of text and returning it to a human-readable form.\nAn encrypted piece of text may look like the following:\nU  I  J  T   J  T   D  T  5  0\n\nRecall that last week, you learned about a compiler, a specialized computer program that converts source code into machine code that can be understood by a computer.\nFor example, you might have a computer program that looks like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nA compiler will take the above code and turn it into the following machine code:\n\n\n\nmachine code\n\n\nVS Code, the programming environment provided to you as a CS50 student, utilizes a compiler called clang or c language.\nYou can enter the following into the terminal window to compile your code: clang -o hello hello.c.\nCommand-line arguments are provided at the command line to clang as -o hello hello.c.\nRunning ./hello in the terminal window, your program runs as intended.\nConsider the following code from last week:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string name = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", name);\n}\n\nTo compile this code, you can type clang -o hello hello.c -lcs50.\nIf you were to type make hello, it runs a command that executes clang to create an output file that you can run as a user.\nVS Code has been pre-programmed such that make will run numerous command line arguments along with clang for your convenience as a user.\nWhile the above is offered as an illustration, such that you can understand more deeply the process and concept of compiling code, using make in CS50 is perfectly fine and the expectation!\nCompiling involves four major steps, including the following:\nFirst, preprocessing is where the header files in your code, designated by a # (such as #include &lt;cs50.h&gt;) are effectively copied and pasted into your file. During this step, the code from cs50.h is copied into your program. Similarly, just as your code contains #include &lt;stdio.h&gt;, code contained within stdio.h somewhere on your computer is copied to your program. This step can be visualized as follows:\n  string get_string(string prompt);\n  int printf(string format, ...);\n\n  int main(void)\n  {\n      string name = get_string(\"What's your name? \");\n      printf(\"hello, %s\\n\", name);\n  }\n\nSecond, compiling is where your program is converted into assembly code. This step can be visualized as follows:\n...\nmain:\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n\nThird, assembling involves the compiler converting your assembly code into machine code. This step can be visualized as follows:\n01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n\nFinally, during the linking step, code from your included libraries is converted also into machine code and combined with your code. The final executable file is then outputted.\n\n\n\nlinking\n\n\n\n\n\n\n\nEveryone will make mistakes while coding.\nDebugging is the process of locating and removing bugs from your code.\nOne of the debugging techniques you will use during this course to debug your code is called rubber duck debugging, where you can talk to an inanimate object (or yourself) to help think through your code and why it is not working as intended. When you are having challenges with your code, consider how speaking out loud to, quite literally, a rubber duck about the code problem. If you’d rather not talk to a small plastic duck, you are welcome to speak to a human near you!\nWe have created the CS50 Duck and CS50.ai as tools that can help you debug your code.\nConsider the following image from last week:\n\n\n\nmario\n\n\nConsider the following code that has a bug purposely inserted within it:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that this code prints four blocks instead of three.\nType code buggy0.c into the terminal window and write the above code.\nRunning this code, four bricks appear instead of the intended three.\nprintf is a very useful way of debugging your code. You could modify your code as follows:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"i is %i\\n\", i);\n        printf(\"#\\n\");\n    }\n}\n\nNotice how this code outputs the value of i during each iteration of the loop such that we can debug our code.\nRunning this code, you will see numerous statements, including i is 0, i is 1, i is 2, and i is 3. Seeing this, you might realize that further code needs to be corrected as follows:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice the &lt;= has been replaced with &lt;.\nThis code can be further improved as follows:\n// Buggy example for debug50\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_column(int height);\n\nint main(void)\n{\n    int h = get_int(\"Height: \");\n    print_column(h);\n}\n\nvoid print_column(int height)\n{\n    for (int i = 0; i &lt;= height; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that compiling and running this code still results in a bug.\nTo address this bug, we will use a new tool.\nA second tool in debugging is called a debugger, a software tool created by programmers to help track down bugs in code.\nIn VS Code, a preconfigured debugger has been provided to you.\nTo utilize this debugger, first set a breakpoint by clicking to the left of a line of your code, just to the left of the line number. When you click there, you will see a red dot appearing. Imagine this as a stop sign, asking the compiler to pause so that you can consider what’s happening in this part of your code.\n\n\n\nbreakpoint\n\n\nSecond, run debug50 ./buggy0. You will notice that after the debugger comes to life and a line of your code will illuminate in a gold-like color. Quite literally, the code has paused at this line of code. Notice in the top left corner how all local variables are being displayed, including h, which currently does not have a value. At the top of your window, you can click the step over button, and it will keep moving through your code. Notice how the value of h increases.\nWhile this tool will not show you where your bug is, it will help you slow down and see how your code is running step by step. You can use step into as a way to look further into the details of your buggy code.\n\n\n\n\n\nIn Week 0, we talked about data types such as bool, int, char, string, etc.\nEach data type requires a certain amount of system resources:\n\nbool 1 byte\nint 4 bytes\nlong 8 bytes\nfloat 4 bytes\ndouble 8 bytes\nchar 1 byte\nstring ? bytes\n\nInside of your computer, you have a finite amount of memory available.\n\n\n\nmemory\n\n\nPhysically, on the memory of your computer, you can imagine how specific types of data are stored on your computer. You might imagine that a char, which only requires 1 byte of memory, may look as follows:\n\n\n\n1 byte\n\n\nSimilarly, an int, which requires 4 bytes, might look as follows:\n\n\n\n4 bytes\n\n\nWe can create a program that explores these concepts. Inside your terminal, type code scores.c and write code as follows:\n// Averages three (hardcoded) numbers\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int score1 = 72;\n    int score2 = 73;\n    int score3 = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (score1 + score2 + score3) / 3.0);\n}\n\nNotice that the number on the right is a floating point value of 3.0, so that the calculation is rendered as a floating point value in the end.\nRunning make scores, the program runs.\nYou can imagine how these variables are stored in memory:\n\n\n\nscores in memory\n\n\nArrays are a sequence of values that are stored back-to-back in memory.\nint scores[3] is a way of telling the compiler to provide you three back-to-back places in memory of size int to store three scores. Considering our program, you can revise your code as follows:\n// Averages three (hardcoded) numbers using an array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int scores[3];\n    scores[0] = 72;\n    scores[1] = 73;\n    scores[2] = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice that score[0] examines the value at this location of memory by indexing into the array called scores at location 0 to see what value is stored there.\nYou can see how, while the above code works, there is still an opportunity for improving our code. Revise your code as follows:\n// Averages three numbers using an array and a loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get scores\n    int scores[3];\n    for (int i = 0; i &lt; 3; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice how we index into scores by using scores[i] where i is supplied by the for loop.\nWe can simplify or abstract away the calculation of the average. Modify your code as follows:\n// Averages three numbers using an array, a constant, and a helper function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// Constant\nconst int N = 3;\n\n// Prototype\nfloat average(int length, int array[]);\n\nint main(void)\n{\n    // Get scores\n    int scores[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", average(N, scores));\n}\n\nfloat average(int length, int array[])\n{\n    // Calculate average\n    int sum = 0;\n    for (int i = 0; i &lt; length; i++)\n    {\n        sum += array[i];\n    }\n    return sum / (float) length;\n}\n\nNotice that a new function called average is declared. Further, notice that a const or constant value of N is declared. Most importantly, notice how the average function takes int array[], which means that the compiler passes an array to this function.\nNot only can arrays be containers: They can be passed between functions.\n\n\n\n\n\nA string is simply an array of variables of type char: an array of characters.\nTo explore char and string, type code hi.c in the terminal window and write code as follows:\n// Prints chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%c%c%c\\n\", c1, c2, c3);\n}\n\nNotice that this will output a string of characters.\nSimilarly, make the following modification to your code:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%i %i %i\\n\", c1, c2, c3);\n}\n\nNotice that that ASCII codes are printed by replacing %c with %i.\nConsidering the following image, you can see how a string is an array of characters that begins with the first character and ends with a special character called a NUL character:\n\n\n\nhi with terminator\n\n\nImagining this in decimal, your array would look like the following:\n\n\n\nhi with decimal\n\n\nTo further understand how a string works, revise your code as follows:\n// Treats string as array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%c%c%c\\n\", s[0], s[1], s[2]);\n}\n\nNotice how the printf statement presents three values from our array called s.\nAs before, we can replace %c with %i as follows:\n// Prints string's ASCII codes, including NUL\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n}\n\nNotice that this prints the string’s ASCII codes, including NUL.\nLet’s imagine we want to say both HI! and BYE!. Modify your code as follows:\n// Multiple strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    string t = \"BYE!\";\n\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\n\nNotice that two strings are declared and used in this example.\nYou can visualize this as follows:\n\n\n\nhi and bye\n\n\nWe can further improve this code. Modify your code as follows:\n// Array of strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%s\\n\", words[0]);\n    printf(\"%s\\n\", words[1]);\n}\n\nNotice that both strings are stored within a single array of type string.\nWe can consolidate our two strings into an array of strings.\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%c%c%c\\n\", words[0][0], words[0][1], words[0][2]);\n    printf(\"%c%c%c%c\\n\", words[1][0], words[1][1], words[1][2], words[1][3]);\n}\n\nNotice that an array of words is created. It is an array of strings. Each word is stored in words.\n\n\n\n\n\nA common problem within programming, and perhaps C more specifically, is to discover the length of an array. How could we implement this in code? Type code length.c in the terminal window and code as follows:\n// Determines the length of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (name[n] != '\\0')\n    {\n        n++;\n    }\n    printf(\"%i\\n\", n);\n}\n\nNotice that this code loops until the NUL character is found.\nThis code can be improved by abstracting away the counting into a function as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint string_length(string s);\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = string_length(name);\n    printf(\"%i\\n\", length);\n}\n\nint string_length(string s)\n{\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (s[n] != '\\0')\n    {\n        n++;\n    }\n    return n;\n}\n\nNotice that a new function called string_length counts characters until NUL is located.\nSince this is such a common problem within programming, other programmers have created code in the string.h library to find the length of a string. You can find the length of a string by modifying your code as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = strlen(name);\n    printf(\"%i\\n\", length);\n}\n\nNotice that this code uses the string.h library, declared at the top of the file. Further, it uses a function from that library called strlen, which calculates the length of the string passed to it.\nOur code can stand on the shoulders of programmers who came before and use libraries they created.\nctype.h is another library that is quite useful. Imagine we wanted to create a program that converted all lowercase characters to uppercase ones. In the terminal window, type code uppercase.c and write code as follows:\n// Uppercases a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (s[i] &gt;= 'a' && s[i] &lt;= 'z')\n        {\n            printf(\"%c\", s[i] - 32);\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code iterates through each value in the string. The program looks at each character. If the character is lowercase, it subtracts the value 32 from it to convert it to uppercase.\nRecalling our previous work from last week, you might remember this ASCII values chart:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nWhen a lowercase character has 32 subtracted from it, it results in an uppercase version of that same character.\nWhile the program does what we want, there is an easier way using the ctype.h library. Modify your program as follows:\n// Uppercases string using ctype library (and an unnecessary condition)\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (islower(s[i]))\n        {\n            printf(\"%c\", toupper(s[i]));\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that the program iterates through each character of the string. The toupper function is passed s[i]. Each character (if lowercase) is converted to uppercase.\nIt’s worth mentioning that toupper automatically knows to uppercase only lowercase characters. Hence, your code can be simplified as follows:\n// Uppercases string using ctype library\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        printf(\"%c\", toupper(s[i]));\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code uppercases a string using the ctype library.\nYou can read about all the capabilities of the ctype library on the Manual Pages.\n\n\n\n\n\nCommand-line arguments are those arguments that are passed to your program at the command line. For example, all those statements you typed after clang are considered command line arguments. You can use these arguments in your own programs!\nIn your terminal window, type code greet.c and write code as follows:\n// Uses get_string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nNotice that this says hello to the user.\nStill, would it not be nice to be able to take arguments before the program even runs? Modify your code as follows:\n// Prints a command-line argument\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc == 2)\n    {\n        printf(\"hello, %s\\n\", argv[1]);\n    }\n    else\n    {\n        printf(\"hello, world\\n\");\n    }\n}\n\nNotice that this program knows both argc, the number of command line arguments, and argv, which is an array of the characters passed as arguments at the command line.\nTherefore, using the syntax of this program, executing ./greet David would result in the program saying hello, David.\nYou can print each of the command-line arguments with the following:\n// Prints command-line arguments\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    for (int i = 0; i &lt; argc; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n}\n\n\n\n\n\n\nWhen a program ends, a special exit code is provided to the computer.\nWhen a program exits without error, a status code of 0 is provided to the computer. Often, when an error occurs that results in the program ending, a status of 1 is provided by the computer.\nYou could write a program as follows that illustrates this by typing code status.c and writing code as follows:\n// Returns explicit value from main\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"Missing command-line argument\\n\");\n        return 1;\n    }\n    printf(\"hello, %s\\n\", argv[1]);\n    return 0;\n}\n\nNotice that if you fail to provide ./status David, you will get an exit status of 1. However, if you do provide ./status David, you will get an exit status of 0.\nYou can type echo $? in the terminal to see the exit status of the last run command.\nYou can imagine how you might use portions of the above program to check if a user provided the correct number of command-line arguments.\n\n\n\n\n\nCryptography is the art of ciphering and deciphering a message.\nNow, with the building block of arrays, chars, and strings, you can cipher and decipher a message.\nplaintext and a key are provided to a cipher, resulting in ciphered text.\n\n\n\ncryptography\n\n\nThe key is a special argument passed to the cipher along with the plaintext. The cipher uses the key to make decisions about how to implement its cipher algorithm.\nThis week, you will undertake programming challenges similar to the above.\n\n\n\n\nIn this lesson, you learned more details about compiling and how data is stored within a computer. Specifically, you learned…\n\nGenerally, how a compiler works.\nHow to debug your code using four methods.\nHow to utilize arrays within your code.\nHow arrays store data in back-to-back portions of memory.\nHow strings are simply arrays of characters.\nHow to interact with arrays in your code.\nHow command-line arguments can be passed to your programs.\nThe basic building blocks of cryptography.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_3.html#welcome",
    "href": "notes/notes_3.html#welcome",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In our previous session, we learned about C, a text-based programming language.\nThis week, we are going to take a deeper look at additional building blocks that will support our goals of learning more about programming from the bottom up.\nFundamentally, in addition to the essentials of programming, this course is about problem-solving. Accordingly, we will also focus further on how to approach computer science problems.\nBy the end of the course, you will learn how to use these aforementioned building blocks to solve a whole host of computer science problems."
  },
  {
    "objectID": "notes/notes_3.html#reading-levels",
    "href": "notes/notes_3.html#reading-levels",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "One of the real-world problems we will solve in this course is understanding reading levels.\nWith the help of some of your peers, we presented readings at various reading levels.\nWe will be quantifying reading levels this week as one of your many programming challenges."
  },
  {
    "objectID": "notes/notes_3.html#compiling",
    "href": "notes/notes_3.html#compiling",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Encryption is the act of hiding plain text from prying eyes. Decrypting, then, is the act of taking an encrypted piece of text and returning it to a human-readable form.\nAn encrypted piece of text may look like the following:\nU  I  J  T   J  T   D  T  5  0\n\nRecall that last week, you learned about a compiler, a specialized computer program that converts source code into machine code that can be understood by a computer.\nFor example, you might have a computer program that looks like this:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nA compiler will take the above code and turn it into the following machine code:\n\n\n\nmachine code\n\n\nVS Code, the programming environment provided to you as a CS50 student, utilizes a compiler called clang or c language.\nYou can enter the following into the terminal window to compile your code: clang -o hello hello.c.\nCommand-line arguments are provided at the command line to clang as -o hello hello.c.\nRunning ./hello in the terminal window, your program runs as intended.\nConsider the following code from last week:\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string name = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", name);\n}\n\nTo compile this code, you can type clang -o hello hello.c -lcs50.\nIf you were to type make hello, it runs a command that executes clang to create an output file that you can run as a user.\nVS Code has been pre-programmed such that make will run numerous command line arguments along with clang for your convenience as a user.\nWhile the above is offered as an illustration, such that you can understand more deeply the process and concept of compiling code, using make in CS50 is perfectly fine and the expectation!\nCompiling involves four major steps, including the following:\nFirst, preprocessing is where the header files in your code, designated by a # (such as #include &lt;cs50.h&gt;) are effectively copied and pasted into your file. During this step, the code from cs50.h is copied into your program. Similarly, just as your code contains #include &lt;stdio.h&gt;, code contained within stdio.h somewhere on your computer is copied to your program. This step can be visualized as follows:\n  string get_string(string prompt);\n  int printf(string format, ...);\n\n  int main(void)\n  {\n      string name = get_string(\"What's your name? \");\n      printf(\"hello, %s\\n\", name);\n  }\n\nSecond, compiling is where your program is converted into assembly code. This step can be visualized as follows:\n...\nmain:\n    .cfi_startproc\n# BB#0:\n    pushq    %rbp\n.Ltmp0:\n    .cfi_def_cfa_offset 16\n.Ltmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    xorl    %eax, %eax\n    movl    %eax, %edi\n    movabsq    $.L.str, %rsi\n    movb    $0, %al\n    callq    get_string\n    movabsq    $.L.str.1, %rdi\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rsi\n    movb    $0, %al\n    callq    printf\n    ...\n\nThird, assembling involves the compiler converting your assembly code into machine code. This step can be visualized as follows:\n01111111010001010100110001000110\n00000010000000010000000100000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000001000000000011111000000000\n00000001000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n10100000000000100000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n00000000000000000100000000000000\n00001010000000000000000100000000\n01010101010010001000100111100101\n01001000100000111110110000010000\n00110001110000001000100111000111\n01001000101111100000000000000000\n00000000000000000000000000000000\n00000000000000001011000000000000\n11101000000000000000000000000000\n00000000010010001011111100000000\n00000000000000000000000000000000\n00000000000000000000000001001000\n...\n\nFinally, during the linking step, code from your included libraries is converted also into machine code and combined with your code. The final executable file is then outputted.\n\n\n\nlinking"
  },
  {
    "objectID": "notes/notes_3.html#debugging",
    "href": "notes/notes_3.html#debugging",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Everyone will make mistakes while coding.\nDebugging is the process of locating and removing bugs from your code.\nOne of the debugging techniques you will use during this course to debug your code is called rubber duck debugging, where you can talk to an inanimate object (or yourself) to help think through your code and why it is not working as intended. When you are having challenges with your code, consider how speaking out loud to, quite literally, a rubber duck about the code problem. If you’d rather not talk to a small plastic duck, you are welcome to speak to a human near you!\nWe have created the CS50 Duck and CS50.ai as tools that can help you debug your code.\nConsider the following image from last week:\n\n\n\nmario\n\n\nConsider the following code that has a bug purposely inserted within it:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that this code prints four blocks instead of three.\nType code buggy0.c into the terminal window and write the above code.\nRunning this code, four bricks appear instead of the intended three.\nprintf is a very useful way of debugging your code. You could modify your code as follows:\n// Buggy example for printf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt;= 3; i++)\n    {\n        printf(\"i is %i\\n\", i);\n        printf(\"#\\n\");\n    }\n}\n\nNotice how this code outputs the value of i during each iteration of the loop such that we can debug our code.\nRunning this code, you will see numerous statements, including i is 0, i is 1, i is 2, and i is 3. Seeing this, you might realize that further code needs to be corrected as follows:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice the &lt;= has been replaced with &lt;.\nThis code can be further improved as follows:\n// Buggy example for debug50\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nvoid print_column(int height);\n\nint main(void)\n{\n    int h = get_int(\"Height: \");\n    print_column(h);\n}\n\nvoid print_column(int height)\n{\n    for (int i = 0; i &lt;= height; i++)\n    {\n        printf(\"#\\n\");\n    }\n}\n\nNotice that compiling and running this code still results in a bug.\nTo address this bug, we will use a new tool.\nA second tool in debugging is called a debugger, a software tool created by programmers to help track down bugs in code.\nIn VS Code, a preconfigured debugger has been provided to you.\nTo utilize this debugger, first set a breakpoint by clicking to the left of a line of your code, just to the left of the line number. When you click there, you will see a red dot appearing. Imagine this as a stop sign, asking the compiler to pause so that you can consider what’s happening in this part of your code.\n\n\n\nbreakpoint\n\n\nSecond, run debug50 ./buggy0. You will notice that after the debugger comes to life and a line of your code will illuminate in a gold-like color. Quite literally, the code has paused at this line of code. Notice in the top left corner how all local variables are being displayed, including h, which currently does not have a value. At the top of your window, you can click the step over button, and it will keep moving through your code. Notice how the value of h increases.\nWhile this tool will not show you where your bug is, it will help you slow down and see how your code is running step by step. You can use step into as a way to look further into the details of your buggy code."
  },
  {
    "objectID": "notes/notes_3.html#arrays",
    "href": "notes/notes_3.html#arrays",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In Week 0, we talked about data types such as bool, int, char, string, etc.\nEach data type requires a certain amount of system resources:\n\nbool 1 byte\nint 4 bytes\nlong 8 bytes\nfloat 4 bytes\ndouble 8 bytes\nchar 1 byte\nstring ? bytes\n\nInside of your computer, you have a finite amount of memory available.\n\n\n\nmemory\n\n\nPhysically, on the memory of your computer, you can imagine how specific types of data are stored on your computer. You might imagine that a char, which only requires 1 byte of memory, may look as follows:\n\n\n\n1 byte\n\n\nSimilarly, an int, which requires 4 bytes, might look as follows:\n\n\n\n4 bytes\n\n\nWe can create a program that explores these concepts. Inside your terminal, type code scores.c and write code as follows:\n// Averages three (hardcoded) numbers\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int score1 = 72;\n    int score2 = 73;\n    int score3 = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (score1 + score2 + score3) / 3.0);\n}\n\nNotice that the number on the right is a floating point value of 3.0, so that the calculation is rendered as a floating point value in the end.\nRunning make scores, the program runs.\nYou can imagine how these variables are stored in memory:\n\n\n\nscores in memory\n\n\nArrays are a sequence of values that are stored back-to-back in memory.\nint scores[3] is a way of telling the compiler to provide you three back-to-back places in memory of size int to store three scores. Considering our program, you can revise your code as follows:\n// Averages three (hardcoded) numbers using an array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Scores\n    int scores[3];\n    scores[0] = 72;\n    scores[1] = 73;\n    scores[2] = 33;\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice that score[0] examines the value at this location of memory by indexing into the array called scores at location 0 to see what value is stored there.\nYou can see how, while the above code works, there is still an opportunity for improving our code. Revise your code as follows:\n// Averages three numbers using an array and a loop\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get scores\n    int scores[3];\n    for (int i = 0; i &lt; 3; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", (scores[0] + scores[1] + scores[2]) / 3.0);\n}\n\nNotice how we index into scores by using scores[i] where i is supplied by the for loop.\nWe can simplify or abstract away the calculation of the average. Modify your code as follows:\n// Averages three numbers using an array, a constant, and a helper function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\n// Constant\nconst int N = 3;\n\n// Prototype\nfloat average(int length, int array[]);\n\nint main(void)\n{\n    // Get scores\n    int scores[N];\n    for (int i = 0; i &lt; N; i++)\n    {\n        scores[i] = get_int(\"Score: \");\n    }\n\n    // Print average\n    printf(\"Average: %f\\n\", average(N, scores));\n}\n\nfloat average(int length, int array[])\n{\n    // Calculate average\n    int sum = 0;\n    for (int i = 0; i &lt; length; i++)\n    {\n        sum += array[i];\n    }\n    return sum / (float) length;\n}\n\nNotice that a new function called average is declared. Further, notice that a const or constant value of N is declared. Most importantly, notice how the average function takes int array[], which means that the compiler passes an array to this function.\nNot only can arrays be containers: They can be passed between functions."
  },
  {
    "objectID": "notes/notes_3.html#strings",
    "href": "notes/notes_3.html#strings",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "A string is simply an array of variables of type char: an array of characters.\nTo explore char and string, type code hi.c in the terminal window and write code as follows:\n// Prints chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%c%c%c\\n\", c1, c2, c3);\n}\n\nNotice that this will output a string of characters.\nSimilarly, make the following modification to your code:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char c1 = 'H';\n    char c2 = 'I';\n    char c3 = '!';\n\n    printf(\"%i %i %i\\n\", c1, c2, c3);\n}\n\nNotice that that ASCII codes are printed by replacing %c with %i.\nConsidering the following image, you can see how a string is an array of characters that begins with the first character and ends with a special character called a NUL character:\n\n\n\nhi with terminator\n\n\nImagining this in decimal, your array would look like the following:\n\n\n\nhi with decimal\n\n\nTo further understand how a string works, revise your code as follows:\n// Treats string as array\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%c%c%c\\n\", s[0], s[1], s[2]);\n}\n\nNotice how the printf statement presents three values from our array called s.\nAs before, we can replace %c with %i as follows:\n// Prints string's ASCII codes, including NUL\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%i %i %i %i\\n\", s[0], s[1], s[2], s[3]);\n}\n\nNotice that this prints the string’s ASCII codes, including NUL.\nLet’s imagine we want to say both HI! and BYE!. Modify your code as follows:\n// Multiple strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    string t = \"BYE!\";\n\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\n\nNotice that two strings are declared and used in this example.\nYou can visualize this as follows:\n\n\n\nhi and bye\n\n\nWe can further improve this code. Modify your code as follows:\n// Array of strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%s\\n\", words[0]);\n    printf(\"%s\\n\", words[1]);\n}\n\nNotice that both strings are stored within a single array of type string.\nWe can consolidate our two strings into an array of strings.\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string words[2];\n\n    words[0] = \"HI!\";\n    words[1] = \"BYE!\";\n\n    printf(\"%c%c%c\\n\", words[0][0], words[0][1], words[0][2]);\n    printf(\"%c%c%c%c\\n\", words[1][0], words[1][1], words[1][2], words[1][3]);\n}\n\nNotice that an array of words is created. It is an array of strings. Each word is stored in words."
  },
  {
    "objectID": "notes/notes_3.html#string-length",
    "href": "notes/notes_3.html#string-length",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "A common problem within programming, and perhaps C more specifically, is to discover the length of an array. How could we implement this in code? Type code length.c in the terminal window and code as follows:\n// Determines the length of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (name[n] != '\\0')\n    {\n        n++;\n    }\n    printf(\"%i\\n\", n);\n}\n\nNotice that this code loops until the NUL character is found.\nThis code can be improved by abstracting away the counting into a function as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint string_length(string s);\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = string_length(name);\n    printf(\"%i\\n\", length);\n}\n\nint string_length(string s)\n{\n    // Count number of characters up until '\\0' (aka NUL)\n    int n = 0;\n    while (s[n] != '\\0')\n    {\n        n++;\n    }\n    return n;\n}\n\nNotice that a new function called string_length counts characters until NUL is located.\nSince this is such a common problem within programming, other programmers have created code in the string.h library to find the length of a string. You can find the length of a string by modifying your code as follows:\n// Determines the length of a string using a function\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Prompt for user's name\n    string name = get_string(\"Name: \");\n    int length = strlen(name);\n    printf(\"%i\\n\", length);\n}\n\nNotice that this code uses the string.h library, declared at the top of the file. Further, it uses a function from that library called strlen, which calculates the length of the string passed to it.\nOur code can stand on the shoulders of programmers who came before and use libraries they created.\nctype.h is another library that is quite useful. Imagine we wanted to create a program that converted all lowercase characters to uppercase ones. In the terminal window, type code uppercase.c and write code as follows:\n// Uppercases a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (s[i] &gt;= 'a' && s[i] &lt;= 'z')\n        {\n            printf(\"%c\", s[i] - 32);\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code iterates through each value in the string. The program looks at each character. If the character is lowercase, it subtracts the value 32 from it to convert it to uppercase.\nRecalling our previous work from last week, you might remember this ASCII values chart:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\nNUL\n16\nDLE\n32\nSP\n48\n0\n64\n@\n80\nP\n96\n`\n112\np\n\n\n\n1\nSOH\n17\nDC1\n33\n!\n49\n1\n65\nA\n81\nQ\n97\na\n113\nq\n\n\n\n2\nSTX\n18\nDC2\n34\n”\n50\n2\n66\nB\n82\nR\n98\nb\n114\nr\n\n\n\n3\nETX\n19\nDC3\n35\n#\n51\n3\n67\nC\n83\nS\n99\nc\n115\ns\n\n\n\n4\nEOT\n20\nDC4\n36\n$\n52\n4\n68\nD\n84\nT\n100\nd\n116\nt\n\n\n\n5\nENQ\n21\nNAK\n37\n%\n53\n5\n69\nE\n85\nU\n101\ne\n117\nu\n\n\n\n6\nACK\n22\nSYN\n38\n&\n54\n6\n70\nF\n86\nV\n102\nf\n118\nv\n\n\n\n7\nBEL\n23\nETB\n39\n’\n55\n7\n71\nG\n87\nW\n103\ng\n119\nw\n\n\n\n8\nBS\n24\nCAN\n40\n(\n56\n8\n72\nH\n88\nX\n104\nh\n120\nx\n\n\n\n9\nHT\n25\nEM\n41\n)\n57\n9\n73\nI\n89\nY\n105\ni\n121\ny\n\n\n\n10\nLF\n26\nSUB\n42\n*\n58\n:\n74\nJ\n90\nZ\n106\nj\n122\nz\n\n\n\n11\nVT\n27\nESC\n43\n+\n59\n;\n75\nK\n91\n[\n107\nk\n123\n{\n\n\n\n12\nFF\n28\nFS\n44\n,\n60\n&lt;\n76\nL\n92\n\\\n108\nl\n124\n\n\n\n\n13\nCR\n29\nGS\n45\n-\n61\n=\n77\nM\n93\n]\n109\nm\n125\n}\n\n\n\n14\nSO\n30\nRS\n46\n.\n62\n&gt;\n78\nN\n94\n^\n110\nn\n126\n~\n\n\n\n15\nSI\n31\nUS\n47\n/\n63\n?\n79\nO\n95\n_\n111\no\n127\nDEL\n\n\n\n\nWhen a lowercase character has 32 subtracted from it, it results in an uppercase version of that same character.\nWhile the program does what we want, there is an easier way using the ctype.h library. Modify your program as follows:\n// Uppercases string using ctype library (and an unnecessary condition)\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        if (islower(s[i]))\n        {\n            printf(\"%c\", toupper(s[i]));\n        }\n        else\n        {\n            printf(\"%c\", s[i]);\n        }\n    }\n    printf(\"\\n\");\n}\n\nNotice that the program iterates through each character of the string. The toupper function is passed s[i]. Each character (if lowercase) is converted to uppercase.\nIt’s worth mentioning that toupper automatically knows to uppercase only lowercase characters. Hence, your code can be simplified as follows:\n// Uppercases string using ctype library\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    string s = get_string(\"Before: \");\n    printf(\"After:  \");\n    for (int i = 0, n = strlen(s); i &lt; n; i++)\n    {\n        printf(\"%c\", toupper(s[i]));\n    }\n    printf(\"\\n\");\n}\n\nNotice that this code uppercases a string using the ctype library.\nYou can read about all the capabilities of the ctype library on the Manual Pages."
  },
  {
    "objectID": "notes/notes_3.html#command-line-arguments",
    "href": "notes/notes_3.html#command-line-arguments",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Command-line arguments are those arguments that are passed to your program at the command line. For example, all those statements you typed after clang are considered command line arguments. You can use these arguments in your own programs!\nIn your terminal window, type code greet.c and write code as follows:\n// Uses get_string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nNotice that this says hello to the user.\nStill, would it not be nice to be able to take arguments before the program even runs? Modify your code as follows:\n// Prints a command-line argument\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc == 2)\n    {\n        printf(\"hello, %s\\n\", argv[1]);\n    }\n    else\n    {\n        printf(\"hello, world\\n\");\n    }\n}\n\nNotice that this program knows both argc, the number of command line arguments, and argv, which is an array of the characters passed as arguments at the command line.\nTherefore, using the syntax of this program, executing ./greet David would result in the program saying hello, David.\nYou can print each of the command-line arguments with the following:\n// Prints command-line arguments\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    for (int i = 0; i &lt; argc; i++)\n    {\n        printf(\"%s\\n\", argv[i]);\n    }\n}"
  },
  {
    "objectID": "notes/notes_3.html#exit-status",
    "href": "notes/notes_3.html#exit-status",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "When a program ends, a special exit code is provided to the computer.\nWhen a program exits without error, a status code of 0 is provided to the computer. Often, when an error occurs that results in the program ending, a status of 1 is provided by the computer.\nYou could write a program as follows that illustrates this by typing code status.c and writing code as follows:\n// Returns explicit value from main\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, string argv[])\n{\n    if (argc != 2)\n    {\n        printf(\"Missing command-line argument\\n\");\n        return 1;\n    }\n    printf(\"hello, %s\\n\", argv[1]);\n    return 0;\n}\n\nNotice that if you fail to provide ./status David, you will get an exit status of 1. However, if you do provide ./status David, you will get an exit status of 0.\nYou can type echo $? in the terminal to see the exit status of the last run command.\nYou can imagine how you might use portions of the above program to check if a user provided the correct number of command-line arguments."
  },
  {
    "objectID": "notes/notes_3.html#cryptography",
    "href": "notes/notes_3.html#cryptography",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "Cryptography is the art of ciphering and deciphering a message.\nNow, with the building block of arrays, chars, and strings, you can cipher and decipher a message.\nplaintext and a key are provided to a cipher, resulting in ciphered text.\n\n\n\ncryptography\n\n\nThe key is a special argument passed to the cipher along with the plaintext. The cipher uses the key to make decisions about how to implement its cipher algorithm.\nThis week, you will undertake programming challenges similar to the above."
  },
  {
    "objectID": "notes/notes_3.html#summing-up",
    "href": "notes/notes_3.html#summing-up",
    "title": "Lecture 3 Notes",
    "section": "",
    "text": "In this lesson, you learned more details about compiling and how data is stored within a computer. Specifically, you learned…\n\nGenerally, how a compiler works.\nHow to debug your code using four methods.\nHow to utilize arrays within your code.\nHow arrays store data in back-to-back portions of memory.\nHow strings are simply arrays of characters.\nHow to interact with arrays in your code.\nHow command-line arguments can be passed to your programs.\nThe basic building blocks of cryptography.\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_5.html",
    "href": "notes/notes_5.html",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Welcome!\nPixel Art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying and malloc\nValgrind\nGarbage Values\nPointer Fun with Binky\nSwapping\nOverflow\nscanf\nFile I/O\nSumming Up\n\n\n\n\nIn previous weeks, we talked about images being made of smaller building blocks called pixels.\nToday, we will go into further detail about the zeros and ones that make up these images. In particular, we will be going deeper into the fundamental building blocks that make up files, including images.\nFurther, we will discuss how to access the underlying data stored in computer memory.\nAs we begin today, know that the concepts covered in this lecture may take some time to fully click.\n\n\n\n\n\nPixels are squares, individual dots, of color that are arranged on an up-down, left-right grid.\nYou can imagine an image as a map of bits, where zeros represent black and ones represent white.\n\n\n\nZeros and ones being converted to a black and white smiley\n\n\n\n\n\n\n\nRGB, or red, green, blue, are numbers that represent the amount of each of these colors. In Adobe Photoshop, you can see these settings as follows:\n\n\n\nA photoshop panel with RGB values and hexadecimal input\n\n\nNotice how the amount of red, blue, and green changes the color selected.\nYou can see from the image above that color is not just represented by three values. At the bottom of the window, there is a special value made up of numbers and characters. 255 is represented as FF. Why might this be?\nHexadecimal is a system of counting that has 16 counting values. They are as follows:\n  0 1 2 3 4 5 6 7 8 9 A B C D E F\nNotice that F represents 15.\nHexadecimal is also known as base-16.\nWhen counting in hexadecimal, each column is a power of 16.\nThe number 0 is represented as 00.\nThe number 1 is represented as 01.\nThe number 9 is represented by 09.\nThe number 10 is represented as 0A.\nThe number 15 is represented as 0F.\nThe number 16 is represented as 10.\nThe number 255 is represented as FF, because 16 x 15 (or F) is 240. Add 15 more to make 255. This is the highest number you can count using a two-digit hexadecimal system.\nHexadecimal is useful because it can be represented using fewer digits. Hexadecimal allows us to represent information more succinctly.\n\n\n\n\n\nIn weeks past, you may recall our artist rendering of concurrent blocks of memory. Applying hexadecimal numbering to each of these blocks of memory, you can visualize these as follows:\n\n\n\nBlocks of memory numbered in hex\n\n\nYou can imagine how there may be confusion regarding whether the 10 block above may represent a location in memory or the value 10. Accordingly, by convention, all hexadecimal numbers are often represented with the 0x prefix as follows:\n\n\n\nblocks of memory numbered in hex with 0x\n\n\nIn your terminal window, type code addresses.c and write your code as follows:\n// Prints an integer\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%i\\n\", n);\n}\nNotice how n is stored in memory with the value 50.\nYou can visualize how this program stores this value as follows:\n\n\n\nthe value 50 stored in a memory location with hex\n\n\n\n\n\n\n\nThe C language has two powerful operators that relate to memory:\n  & Provides the address of something stored in memory.\n  * Instructs the compiler to go to a location in memory.\nWe can leverage this knowledge by modifying our code as follows:\n// Prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%p\\n\", &n);\n}\nNotice the %p, which allows us to view the address of a location in memory. &n can be literally translated as “the address of n.” Executing this code will return an address of memory beginning with 0x.\nA pointer is a variable that stores the address of something. Most succinctly, a pointer is an address in your computer’s memory.\nConsider the following code:\nint n = 50;\nint *p = &n;\nNotice that p is a pointer that contains the address of an integer n.\nModify your code as follows:\n// Stores and prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%p\\n\", p);\n}\nNotice that this code has the same effect as our previous code. We have simply leveraged our new knowledge of the & and * operators.\nTo illustrate the use of the * operator, consider the following:\n// Stores and prints an integer via its address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%i\\n\", *p);\n}\nNotice that the printf line prints the integer at the location of p. int *p creates a pointer whose job is to store the memory address of an integer.\nYou can visualize our code as follows:\n\n\n\nSame value of 50 in a memory location with a pointer value stored elsewhere\n\n\nNotice the pointer seems rather large. Indeed, a pointer is usually stored as an 8-byte value. p is storing the address of the 50.\nYou can more accurately visualize a pointer as one address that points to another:\n\n\n\nA pointer as an arrow, pointing from one location of memory to another\n\n\n\n\n\n\n\nNow that we have a mental model for pointers, we can peel back a level of simplification that was offered earlier in this course.\nModify your code as follows:\n// Prints a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that a string s is printed.\nRecall that a string is simply an array of characters. For example, string s = \"HI!\" can be represented as follows:\n\n\n\nThe string HI with an exclamation point stored in memory\n\n\nHowever, what is s really? Where is the s stored in memory? As you can imagine, s needs to be stored somewhere. You can visualize the relationship of s to the string as follows:\n\n\n\nSame string HI with a pointer pointing to it\n\n\nNotice how a pointer called s tells the compiler where the first byte of the string exists in memory.\nModify your code as follows:\n// Prints a string's address as well the addresses of its chars\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", &s[0]);\n    printf(\"%p\\n\", &s[1]);\n    printf(\"%p\\n\", &s[2]);\n    printf(\"%p\\n\", &s[3]);\n}\nNotice the above prints the memory locations of each character in the string s. The & symbol is used to show the address of each element of the string. When running this code, notice that elements 0, 1, 2, and 3 are next to one another in memory.\nLikewise, you can modify your code as follows:\n// Declares a string with CS50 Library\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that this code will present the string that starts at the location of s. This code effectively removes the training wheels of the string data type offered by cs50.h. This is raw C code, without the scaffolding of the cs50 library.\nTaking off the training wheels, you can modify your code again:\n// Declares a string without CS50 Library\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that cs50.h is removed. A string is implemented as a char *.\nYou can imagine how a string, as a data type, is created.\nLast week, we learned how to create your own data type as a struct.\nThe cs50 library includes a struct as follows: typedef char *string\nThis struct, when using the cs50 library, allows one to use a custom data type called string.\n\n\n\n\n\nPointer arithmetic is the ability to do math on locations of memory.\nYou can modify your code to print out each memory location in the string as follows:\n// Prints a string's chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", s[0]);\n    printf(\"%c\\n\", s[1]);\n    printf(\"%c\\n\", s[2]);\n}\nNotice that we are printing each character at the location of s.\nFurther, you can modify your code as follows:\n// Prints a string's chars via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", *s);\n    printf(\"%c\\n\", *(s + 1));\n    printf(\"%c\\n\", *(s + 2));\n}\nNotice that the first character at the location of s is printed. Then, the character at the location s + 1 is printed, and so on.\nLikewise, consider the following:\n// Prints substrings via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", s + 1);\n    printf(\"%s\\n\", s + 2);\n}\nNotice that this code prints the values stored at various memory locations starting with s.\n\n\n\n\n\nA string of characters is simply an array of characters identified by the location of its first byte.\nEarlier in the course, we considered the comparison of integers. We could represent this in code by typing code compare.c into the terminal window as follows:\n// Compares two integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two integers\n    int i = get_int(\"i: \");\n    int j = get_int(\"j: \");\n\n    // Compare integers\n    if (i == j)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that this code takes two integers from the user and compares them.\nIn the case of strings, however, one cannot compare two strings using the == operator.\nUtilizing the == operator in an attempt to compare strings will attempt to compare the memory locations of the strings instead of the characters therein. Accordingly, we recommended the use of strcmp.\nTo illustrate this, modify your code as follows:\n// Compares two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings' addresses\n    if (s == t)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNoticing that typing in HI! for both strings still results in the output of Different.\nWhy are these strings seemingly different? You can use the following to visualize why:\n\n\n\ntwo strings stored separately in memory\n\n\nTherefore, the code for compare.c above is actually attempting to see if the memory addresses are different, not the strings themselves.\nUsing strcmp, we can correct our code:\n// Compares two strings using strcmp\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings\n    if (strcmp(s, t) == 0)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that strcmp can return 0 if the strings are the same.\nTo further illustrate how these two strings are living in two locations, modify your code as follows:\n// Prints two strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\nNotice how we now have two separate strings stored, likely at two separate locations.\nYou can see the locations of these two stored strings with a small modification:\n// Prints two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings' addresses\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", t);\n}\nNotice that the %s has been changed to %p in the print statement.\n\n\n\n\n\nA common need in programming is to copy one string to another.\nIn your terminal window, type code copy.c and write code as follows:\n// Capitalizes a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    t[0] = toupper(t[0]);\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that string t = s copies the address of s to t. This does not accomplish what we are desiring. The string is not copied – only the address is. Further, notice the inclusion of ctype.h.\nYou can visualize the above code as follows:\n\n\n\ntwo pointers pointing at the same memory location with a string\n\n\nNotice that s and t are still pointing at the same blocks of memory. This is not an authentic copy of a string. Instead, these are two pointers pointing at the same string.\nBefore we address this challenge, it’s important to ensure that we don’t experience a segmentation fault through our code, where we attempt to copy string s to string t, where string t does not exist. We can employ the strlen function as follows to assist with that:\n// Capitalizes a string, checking length first\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strlen is used to make sure string t exists. If it does not, nothing will be copied.\nTo be able to make an authentic copy of the string, we will need to introduce two new building blocks. First, malloc allows you, the programmer, to allocate a block of a specific size of memory. Second, free allows you to tell the compiler to free up that block of memory you previously allocated.\nWe can modify our code to create an authentic copy of our string as follows:\n// Capitalizes a copy of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0; i &lt;= strlen(s); i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that malloc(strlen(s) + 1) creates a block of memory that is the length of the string s plus one. This allows for the inclusion of the null \\0 character in our final copied string. Then, the for loop walks through the string s and assigns each value to that same location on the string t.\nIt turns out that our code is inefficient. Modify your code as follows:\n// Capitalizes a copy of a string, defining n in loop too\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0, n = strlen(s); i &lt;= n; i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that n = strlen(s) is defined now in the left-hand side of the for loop. It’s best not to call unneeded functions in the middle condition of the for loop, as it will run over and over again. When moving n = strlen(s) to the left-hand side, the function strlen only runs once.\nThe C Language has a built-in function to copy strings called strcpy. It can be implemented as follows:\n// Capitalizes a copy of a string using strcpy\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strcpy does the same work that our for loop previously did.\nBoth get_string and malloc return NULL, a special value in memory, in the event that something goes wrong. You can write code that can check for this NULL condition as follows:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\nNotice that if the string obtained is of length 0 or malloc fails, NULL is returned. Further, notice that free lets the computer know you are done with this block of memory you created via malloc.\n\n\n\n\n\nValgrind is a tool that can check to see if there are memory-related issues with your programs wherein you utilized malloc. Specifically, it checks to see if you free all the memory you allocated.\nConsider the following code for memory.c:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n}\nNotice that running this program does not cause any errors. While malloc is used to allocate enough memory for an array, the code fails to free that allocated memory.\nIf you type make memory followed by valgrind ./memory, you will get a report from valgrind that will report where memory has been lost as a result of your program. One error that valgrind reveals is that we attempted to assign the value of 33 at the 4th position of the array, where we only allocated an array of size 3. Another error is that we never freed x.\nYou can modify your code to free the memory of x as follows:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n    free(x);\n}\nNotice that running valgrind again now results in no memory leaks.\n\n\n\n\n\nWhen you ask the compiler for a block of memory, there is no guarantee that this memory will be empty.\nIt’s very possible that the memory you allocated was previously utilized by the computer. Accordingly, you may see junk or garbage values. This is a result of you getting a block of memory but not initializing it. For example, consider the following code for garbage.c:\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int scores[1024];\n    for (int i = 0; i &lt; 1024; i++)\n    {\n        printf(\"%i\\n\", scores[i]);\n    }\n}\nNotice that running this code will allocate 1024 locations in memory for your array, but the for loop will likely show that not all values therein are 0. It’s always best practice to be aware of the potential for garbage values when you do not initialize blocks of memory to some other value like zero or otherwise.\n\n\n\n\n\nWe watched a video from Stanford University that helped us visualize and understand pointers.\n\n\n\n\n\nIn the real world, a common need in programming is to swap two values. Naturally, it’s hard to swap two variables without a temporary holding space. In practice, you can type code swap.c and write code as follows to see this in action:\n// Fails to swap two integers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int a, int b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(x, y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int a, int b)\n{\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\nNotice that while this code runs, it does not work. The values, even after being sent to the swap function, do not swap. Why?\nWhen you pass values to a function, you are only providing copies. The scope of x and y is limited to the main function as the code is presently written. That is, the values of x and y created in the curly {} braces of the main function only have the scope of the main function. In our code above, x and y are being passed by value.\nConsider the following image:\n\n\n\na rectangle with machine code at top followed by globals heap and stack\n\n\nNotice that global variables, which we have not used in this course, live in one place in memory. Various functions are stored in the stack in another area of memory.\nNow, consider the following image:\n\n\n\na rectangle with main function at bottom and swap function directly above it\n\n\nNotice that main and swap have two separate frames or areas of memory. Therefore, we cannot simply pass the values from one function to another to change them.\nModify your code as follows:\n// Swaps two integers using pointers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nNotice that variables are not passed by value but by reference. That is, the addresses of a and b are provided to the function. Therefore, the swap function can know where to make changes to the actual a and b from the main function.\nYou can visualize this as follows:\n\n\n\na and b stored in main function being passed by reference to the swap function\n\n\n\n\n\n\n\nA heap overflow is when you overflow the heap, touching areas of memory you are not supposed to.\nA stack overflow is when too many functions are called, overflowing the amount of memory available.\nBoth of these are considered buffer overflows.\n\n\n\n\n\nIn CS50, we have created functions like get_int to simplify the act of getting input from the user.\nscanf is a built-in function that can get user input.\nWe can reimplement get_int rather easily using scanf as follows:\n// Gets an int from user using scanf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n;\n    printf(\"n: \");\n    scanf(\"%i\", &n);\n    printf(\"n: %i\\n\", n);\n}\nNotice that the value of n is stored at the location of n in the line scanf(\"%i\", &n).\nHowever, attempting to reimplement get_string is not easy. Consider the following:\n// Dangerously gets a string from user using scanf with array\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that no & is required because strings are special. Still, this program will not function correctly every time it is run. Nowhere in this program do we allocate the amount of memory required for our string. Indeed, we don’t know how long of a string may be inputted by the user! Further, we don’t know what garbage values may exist at the memory location.\nFurther, your code could be modified as follows. However, we have to pre-allocate a certain amount of memory for a string:\n// Using malloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    char *s = malloc(4);\n    if (s == NULL)\n    {\n        return 1;\n    }\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n    free(s);\n    return 0;\n}\nNotice that if a string that is four bytes is provided you might get an error.\nSimplifying our code as follows, we can further understand this essential problem of pre-allocation:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that if we pre-allocate an array of size 4, we can type cat and the program functions. However, a string larger than this could create an error.\nSometimes, the compiler or the system running it may allocate more memory than we indicate. Fundamentally, though, the above code is unsafe. We cannot trust that the user will input a string that fits into our pre-allocated memory.\n\n\n\n\n\nYou can read from and manipulate files. While this topic will be discussed further in a future week, consider the following code for phonebook.c:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this code uses pointers to access the file.\nYou can create a file called phonebook.csv in advance of running the above code or download phonebook.csv. After running the above program and inputting a name and phone number, you will notice that this data persists in your CSV file.\nIf we want to ensure that phonebook.csv exists prior to running the program, we can modify our code as follows:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this program protects against a NULL pointer by invoking return 1.\nWe can implement our own copy program by typing code cp.c and writing code as follows:\n// Copies a file\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n    FILE *src = fopen(argv[1], \"rb\");\n    FILE *dst = fopen(argv[2], \"wb\");\n\n    BYTE b;\n\n    while (fread(&b, sizeof(b), 1, src) != 0)\n    {\n        fwrite(&b, sizeof(b), 1, dst);\n    }\n\n    fclose(dst);\n    fclose(src);\n}\nNotice that this file creates our own data type called a BYTE , which is the size of a uint8_t. Then, the file reads a BYTE and writes it to a file.\nBMPs are also assortments of data that we can examine and manipulate. This week, you will be doing just that in your problem sets!\n\n\n\n\nIn this lesson, you learned about pointers that provide you with the ability to access and manipulate data at specific memory locations. Specifically, we delved into…\n\nPixel art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying\nmalloc and Valgrind\nGarbage values\nSwapping\nOverflow\nscanf\nFile I/O\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_5.html#welcome",
    "href": "notes/notes_5.html#welcome",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In previous weeks, we talked about images being made of smaller building blocks called pixels.\nToday, we will go into further detail about the zeros and ones that make up these images. In particular, we will be going deeper into the fundamental building blocks that make up files, including images.\nFurther, we will discuss how to access the underlying data stored in computer memory.\nAs we begin today, know that the concepts covered in this lecture may take some time to fully click."
  },
  {
    "objectID": "notes/notes_5.html#pixel-art",
    "href": "notes/notes_5.html#pixel-art",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Pixels are squares, individual dots, of color that are arranged on an up-down, left-right grid.\nYou can imagine an image as a map of bits, where zeros represent black and ones represent white.\n\n\n\nZeros and ones being converted to a black and white smiley"
  },
  {
    "objectID": "notes/notes_5.html#hexadecimal",
    "href": "notes/notes_5.html#hexadecimal",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "RGB, or red, green, blue, are numbers that represent the amount of each of these colors. In Adobe Photoshop, you can see these settings as follows:\n\n\n\nA photoshop panel with RGB values and hexadecimal input\n\n\nNotice how the amount of red, blue, and green changes the color selected.\nYou can see from the image above that color is not just represented by three values. At the bottom of the window, there is a special value made up of numbers and characters. 255 is represented as FF. Why might this be?\nHexadecimal is a system of counting that has 16 counting values. They are as follows:\n  0 1 2 3 4 5 6 7 8 9 A B C D E F\nNotice that F represents 15.\nHexadecimal is also known as base-16.\nWhen counting in hexadecimal, each column is a power of 16.\nThe number 0 is represented as 00.\nThe number 1 is represented as 01.\nThe number 9 is represented by 09.\nThe number 10 is represented as 0A.\nThe number 15 is represented as 0F.\nThe number 16 is represented as 10.\nThe number 255 is represented as FF, because 16 x 15 (or F) is 240. Add 15 more to make 255. This is the highest number you can count using a two-digit hexadecimal system.\nHexadecimal is useful because it can be represented using fewer digits. Hexadecimal allows us to represent information more succinctly."
  },
  {
    "objectID": "notes/notes_5.html#memory",
    "href": "notes/notes_5.html#memory",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In weeks past, you may recall our artist rendering of concurrent blocks of memory. Applying hexadecimal numbering to each of these blocks of memory, you can visualize these as follows:\n\n\n\nBlocks of memory numbered in hex\n\n\nYou can imagine how there may be confusion regarding whether the 10 block above may represent a location in memory or the value 10. Accordingly, by convention, all hexadecimal numbers are often represented with the 0x prefix as follows:\n\n\n\nblocks of memory numbered in hex with 0x\n\n\nIn your terminal window, type code addresses.c and write your code as follows:\n// Prints an integer\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%i\\n\", n);\n}\nNotice how n is stored in memory with the value 50.\nYou can visualize how this program stores this value as follows:\n\n\n\nthe value 50 stored in a memory location with hex"
  },
  {
    "objectID": "notes/notes_5.html#pointers",
    "href": "notes/notes_5.html#pointers",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "The C language has two powerful operators that relate to memory:\n  & Provides the address of something stored in memory.\n  * Instructs the compiler to go to a location in memory.\nWe can leverage this knowledge by modifying our code as follows:\n// Prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    printf(\"%p\\n\", &n);\n}\nNotice the %p, which allows us to view the address of a location in memory. &n can be literally translated as “the address of n.” Executing this code will return an address of memory beginning with 0x.\nA pointer is a variable that stores the address of something. Most succinctly, a pointer is an address in your computer’s memory.\nConsider the following code:\nint n = 50;\nint *p = &n;\nNotice that p is a pointer that contains the address of an integer n.\nModify your code as follows:\n// Stores and prints an integer's address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%p\\n\", p);\n}\nNotice that this code has the same effect as our previous code. We have simply leveraged our new knowledge of the & and * operators.\nTo illustrate the use of the * operator, consider the following:\n// Stores and prints an integer via its address\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n = 50;\n    int *p = &n;\n    printf(\"%i\\n\", *p);\n}\nNotice that the printf line prints the integer at the location of p. int *p creates a pointer whose job is to store the memory address of an integer.\nYou can visualize our code as follows:\n\n\n\nSame value of 50 in a memory location with a pointer value stored elsewhere\n\n\nNotice the pointer seems rather large. Indeed, a pointer is usually stored as an 8-byte value. p is storing the address of the 50.\nYou can more accurately visualize a pointer as one address that points to another:\n\n\n\nA pointer as an arrow, pointing from one location of memory to another"
  },
  {
    "objectID": "notes/notes_5.html#strings",
    "href": "notes/notes_5.html#strings",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Now that we have a mental model for pointers, we can peel back a level of simplification that was offered earlier in this course.\nModify your code as follows:\n// Prints a string\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that a string s is printed.\nRecall that a string is simply an array of characters. For example, string s = \"HI!\" can be represented as follows:\n\n\n\nThe string HI with an exclamation point stored in memory\n\n\nHowever, what is s really? Where is the s stored in memory? As you can imagine, s needs to be stored somewhere. You can visualize the relationship of s to the string as follows:\n\n\n\nSame string HI with a pointer pointing to it\n\n\nNotice how a pointer called s tells the compiler where the first byte of the string exists in memory.\nModify your code as follows:\n// Prints a string's address as well the addresses of its chars\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", &s[0]);\n    printf(\"%p\\n\", &s[1]);\n    printf(\"%p\\n\", &s[2]);\n    printf(\"%p\\n\", &s[3]);\n}\nNotice the above prints the memory locations of each character in the string s. The & symbol is used to show the address of each element of the string. When running this code, notice that elements 0, 1, 2, and 3 are next to one another in memory.\nLikewise, you can modify your code as follows:\n// Declares a string with CS50 Library\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that this code will present the string that starts at the location of s. This code effectively removes the training wheels of the string data type offered by cs50.h. This is raw C code, without the scaffolding of the cs50 library.\nTaking off the training wheels, you can modify your code again:\n// Declares a string without CS50 Library\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n}\nNotice that cs50.h is removed. A string is implemented as a char *.\nYou can imagine how a string, as a data type, is created.\nLast week, we learned how to create your own data type as a struct.\nThe cs50 library includes a struct as follows: typedef char *string\nThis struct, when using the cs50 library, allows one to use a custom data type called string."
  },
  {
    "objectID": "notes/notes_5.html#pointer-arithmetic",
    "href": "notes/notes_5.html#pointer-arithmetic",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Pointer arithmetic is the ability to do math on locations of memory.\nYou can modify your code to print out each memory location in the string as follows:\n// Prints a string's chars\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", s[0]);\n    printf(\"%c\\n\", s[1]);\n    printf(\"%c\\n\", s[2]);\n}\nNotice that we are printing each character at the location of s.\nFurther, you can modify your code as follows:\n// Prints a string's chars via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%c\\n\", *s);\n    printf(\"%c\\n\", *(s + 1));\n    printf(\"%c\\n\", *(s + 2));\n}\nNotice that the first character at the location of s is printed. Then, the character at the location s + 1 is printed, and so on.\nLikewise, consider the following:\n// Prints substrings via pointer arithmetic\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char *s = \"HI!\";\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", s + 1);\n    printf(\"%s\\n\", s + 2);\n}\nNotice that this code prints the values stored at various memory locations starting with s."
  },
  {
    "objectID": "notes/notes_5.html#string-comparison",
    "href": "notes/notes_5.html#string-comparison",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A string of characters is simply an array of characters identified by the location of its first byte.\nEarlier in the course, we considered the comparison of integers. We could represent this in code by typing code compare.c into the terminal window as follows:\n// Compares two integers\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two integers\n    int i = get_int(\"i: \");\n    int j = get_int(\"j: \");\n\n    // Compare integers\n    if (i == j)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that this code takes two integers from the user and compares them.\nIn the case of strings, however, one cannot compare two strings using the == operator.\nUtilizing the == operator in an attempt to compare strings will attempt to compare the memory locations of the strings instead of the characters therein. Accordingly, we recommended the use of strcmp.\nTo illustrate this, modify your code as follows:\n// Compares two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings' addresses\n    if (s == t)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNoticing that typing in HI! for both strings still results in the output of Different.\nWhy are these strings seemingly different? You can use the following to visualize why:\n\n\n\ntwo strings stored separately in memory\n\n\nTherefore, the code for compare.c above is actually attempting to see if the memory addresses are different, not the strings themselves.\nUsing strcmp, we can correct our code:\n// Compares two strings using strcmp\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Compare strings\n    if (strcmp(s, t) == 0)\n    {\n        printf(\"Same\\n\");\n    }\n    else\n    {\n        printf(\"Different\\n\");\n    }\n}\nNotice that strcmp can return 0 if the strings are the same.\nTo further illustrate how these two strings are living in two locations, modify your code as follows:\n// Prints two strings\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings\n    printf(\"%s\\n\", s);\n    printf(\"%s\\n\", t);\n}\nNotice how we now have two separate strings stored, likely at two separate locations.\nYou can see the locations of these two stored strings with a small modification:\n// Prints two strings' addresses\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Get two strings\n    char *s = get_string(\"s: \");\n    char *t = get_string(\"t: \");\n\n    // Print strings' addresses\n    printf(\"%p\\n\", s);\n    printf(\"%p\\n\", t);\n}\nNotice that the %s has been changed to %p in the print statement."
  },
  {
    "objectID": "notes/notes_5.html#copying-and-malloc",
    "href": "notes/notes_5.html#copying-and-malloc",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A common need in programming is to copy one string to another.\nIn your terminal window, type code copy.c and write code as follows:\n// Capitalizes a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    t[0] = toupper(t[0]);\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that string t = s copies the address of s to t. This does not accomplish what we are desiring. The string is not copied – only the address is. Further, notice the inclusion of ctype.h.\nYou can visualize the above code as follows:\n\n\n\ntwo pointers pointing at the same memory location with a string\n\n\nNotice that s and t are still pointing at the same blocks of memory. This is not an authentic copy of a string. Instead, these are two pointers pointing at the same string.\nBefore we address this challenge, it’s important to ensure that we don’t experience a segmentation fault through our code, where we attempt to copy string s to string t, where string t does not exist. We can employ the strlen function as follows to assist with that:\n// Capitalizes a string, checking length first\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    string s = get_string(\"s: \");\n\n    // Copy string's address\n    string t = s;\n\n    // Capitalize first letter in string\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print string twice\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strlen is used to make sure string t exists. If it does not, nothing will be copied.\nTo be able to make an authentic copy of the string, we will need to introduce two new building blocks. First, malloc allows you, the programmer, to allocate a block of a specific size of memory. Second, free allows you to tell the compiler to free up that block of memory you previously allocated.\nWe can modify our code to create an authentic copy of our string as follows:\n// Capitalizes a copy of a string\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0; i &lt;= strlen(s); i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that malloc(strlen(s) + 1) creates a block of memory that is the length of the string s plus one. This allows for the inclusion of the null \\0 character in our final copied string. Then, the for loop walks through the string s and assigns each value to that same location on the string t.\nIt turns out that our code is inefficient. Modify your code as follows:\n// Capitalizes a copy of a string, defining n in loop too\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory, including '\\0'\n    for (int i = 0, n = strlen(s); i &lt;= n; i++)\n    {\n        t[i] = s[i];\n    }\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that n = strlen(s) is defined now in the left-hand side of the for loop. It’s best not to call unneeded functions in the middle condition of the for loop, as it will run over and over again. When moving n = strlen(s) to the left-hand side, the function strlen only runs once.\nThe C Language has a built-in function to copy strings called strcpy. It can be implemented as follows:\n// Capitalizes a copy of a string using strcpy\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    t[0] = toupper(t[0]);\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n}\nNotice that strcpy does the same work that our for loop previously did.\nBoth get_string and malloc return NULL, a special value in memory, in the event that something goes wrong. You can write code that can check for this NULL condition as follows:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\nNotice that if the string obtained is of length 0 or malloc fails, NULL is returned. Further, notice that free lets the computer know you are done with this block of memory you created via malloc."
  },
  {
    "objectID": "notes/notes_5.html#valgrind",
    "href": "notes/notes_5.html#valgrind",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "Valgrind is a tool that can check to see if there are memory-related issues with your programs wherein you utilized malloc. Specifically, it checks to see if you free all the memory you allocated.\nConsider the following code for memory.c:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n}\nNotice that running this program does not cause any errors. While malloc is used to allocate enough memory for an array, the code fails to free that allocated memory.\nIf you type make memory followed by valgrind ./memory, you will get a report from valgrind that will report where memory has been lost as a result of your program. One error that valgrind reveals is that we attempted to assign the value of 33 at the 4th position of the array, where we only allocated an array of size 3. Another error is that we never freed x.\nYou can modify your code to free the memory of x as follows:\n// Demonstrates memory errors via valgrind\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int *x = malloc(3 * sizeof(int));\n    x[1] = 72;\n    x[2] = 73;\n    x[3] = 33;\n    free(x);\n}\nNotice that running valgrind again now results in no memory leaks."
  },
  {
    "objectID": "notes/notes_5.html#garbage-values",
    "href": "notes/notes_5.html#garbage-values",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "When you ask the compiler for a block of memory, there is no guarantee that this memory will be empty.\nIt’s very possible that the memory you allocated was previously utilized by the computer. Accordingly, you may see junk or garbage values. This is a result of you getting a block of memory but not initializing it. For example, consider the following code for garbage.c:\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    int scores[1024];\n    for (int i = 0; i &lt; 1024; i++)\n    {\n        printf(\"%i\\n\", scores[i]);\n    }\n}\nNotice that running this code will allocate 1024 locations in memory for your array, but the for loop will likely show that not all values therein are 0. It’s always best practice to be aware of the potential for garbage values when you do not initialize blocks of memory to some other value like zero or otherwise."
  },
  {
    "objectID": "notes/notes_5.html#pointer-fun-with-binky",
    "href": "notes/notes_5.html#pointer-fun-with-binky",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "We watched a video from Stanford University that helped us visualize and understand pointers."
  },
  {
    "objectID": "notes/notes_5.html#swapping",
    "href": "notes/notes_5.html#swapping",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In the real world, a common need in programming is to swap two values. Naturally, it’s hard to swap two variables without a temporary holding space. In practice, you can type code swap.c and write code as follows to see this in action:\n// Fails to swap two integers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int a, int b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(x, y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int a, int b)\n{\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\nNotice that while this code runs, it does not work. The values, even after being sent to the swap function, do not swap. Why?\nWhen you pass values to a function, you are only providing copies. The scope of x and y is limited to the main function as the code is presently written. That is, the values of x and y created in the curly {} braces of the main function only have the scope of the main function. In our code above, x and y are being passed by value.\nConsider the following image:\n\n\n\na rectangle with machine code at top followed by globals heap and stack\n\n\nNotice that global variables, which we have not used in this course, live in one place in memory. Various functions are stored in the stack in another area of memory.\nNow, consider the following image:\n\n\n\na rectangle with main function at bottom and swap function directly above it\n\n\nNotice that main and swap have two separate frames or areas of memory. Therefore, we cannot simply pass the values from one function to another to change them.\nModify your code as follows:\n// Swaps two integers using pointers\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int *a, int *b);\n\nint main(void)\n{\n    int x = 1;\n    int y = 2;\n\n    printf(\"x is %i, y is %i\\n\", x, y);\n    swap(&x, &y);\n    printf(\"x is %i, y is %i\\n\", x, y);\n}\n\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nNotice that variables are not passed by value but by reference. That is, the addresses of a and b are provided to the function. Therefore, the swap function can know where to make changes to the actual a and b from the main function.\nYou can visualize this as follows:\n\n\n\na and b stored in main function being passed by reference to the swap function"
  },
  {
    "objectID": "notes/notes_5.html#overflow",
    "href": "notes/notes_5.html#overflow",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "A heap overflow is when you overflow the heap, touching areas of memory you are not supposed to.\nA stack overflow is when too many functions are called, overflowing the amount of memory available.\nBoth of these are considered buffer overflows."
  },
  {
    "objectID": "notes/notes_5.html#scanf",
    "href": "notes/notes_5.html#scanf",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In CS50, we have created functions like get_int to simplify the act of getting input from the user.\nscanf is a built-in function that can get user input.\nWe can reimplement get_int rather easily using scanf as follows:\n// Gets an int from user using scanf\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    int n;\n    printf(\"n: \");\n    scanf(\"%i\", &n);\n    printf(\"n: %i\\n\", n);\n}\nNotice that the value of n is stored at the location of n in the line scanf(\"%i\", &n).\nHowever, attempting to reimplement get_string is not easy. Consider the following:\n// Dangerously gets a string from user using scanf with array\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that no & is required because strings are special. Still, this program will not function correctly every time it is run. Nowhere in this program do we allocate the amount of memory required for our string. Indeed, we don’t know how long of a string may be inputted by the user! Further, we don’t know what garbage values may exist at the memory location.\nFurther, your code could be modified as follows. However, we have to pre-allocate a certain amount of memory for a string:\n// Using malloc\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void)\n{\n    char *s = malloc(4);\n    if (s == NULL)\n    {\n        return 1;\n    }\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n    free(s);\n    return 0;\n}\nNotice that if a string that is four bytes is provided you might get an error.\nSimplifying our code as follows, we can further understand this essential problem of pre-allocation:\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    char s[4];\n    printf(\"s: \");\n    scanf(\"%s\", s);\n    printf(\"s: %s\\n\", s);\n}\nNotice that if we pre-allocate an array of size 4, we can type cat and the program functions. However, a string larger than this could create an error.\nSometimes, the compiler or the system running it may allocate more memory than we indicate. Fundamentally, though, the above code is unsafe. We cannot trust that the user will input a string that fits into our pre-allocated memory."
  },
  {
    "objectID": "notes/notes_5.html#file-io",
    "href": "notes/notes_5.html#file-io",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "You can read from and manipulate files. While this topic will be discussed further in a future week, consider the following code for phonebook.c:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this code uses pointers to access the file.\nYou can create a file called phonebook.csv in advance of running the above code or download phonebook.csv. After running the above program and inputting a name and phone number, you will notice that this data persists in your CSV file.\nIf we want to ensure that phonebook.csv exists prior to running the program, we can modify our code as follows:\n// Saves names and numbers to a CSV file\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Open CSV file\n    FILE *file = fopen(\"phonebook.csv\", \"a\");\n    if (!file)\n    {\n        return 1;\n    }\n\n    // Get name and number\n    char *name = get_string(\"Name: \");\n    char *number = get_string(\"Number: \");\n\n    // Print to file\n    fprintf(file, \"%s,%s\\n\", name, number);\n\n    // Close file\n    fclose(file);\n}\nNotice that this program protects against a NULL pointer by invoking return 1.\nWe can implement our own copy program by typing code cp.c and writing code as follows:\n// Copies a file\n\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\ntypedef uint8_t BYTE;\n\nint main(int argc, char *argv[])\n{\n    FILE *src = fopen(argv[1], \"rb\");\n    FILE *dst = fopen(argv[2], \"wb\");\n\n    BYTE b;\n\n    while (fread(&b, sizeof(b), 1, src) != 0)\n    {\n        fwrite(&b, sizeof(b), 1, dst);\n    }\n\n    fclose(dst);\n    fclose(src);\n}\nNotice that this file creates our own data type called a BYTE , which is the size of a uint8_t. Then, the file reads a BYTE and writes it to a file.\nBMPs are also assortments of data that we can examine and manipulate. This week, you will be doing just that in your problem sets!"
  },
  {
    "objectID": "notes/notes_5.html#summing-up",
    "href": "notes/notes_5.html#summing-up",
    "title": "Lecture 5 Notes",
    "section": "",
    "text": "In this lesson, you learned about pointers that provide you with the ability to access and manipulate data at specific memory locations. Specifically, we delved into…\n\nPixel art\nHexadecimal\nMemory\nPointers\nStrings\nPointer Arithmetic\nString Comparison\nCopying\nmalloc and Valgrind\nGarbage values\nSwapping\nOverflow\nscanf\nFile I/O\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_7.html",
    "href": "notes/notes_7.html",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Welcome!\nHello Python!\nSpeller\nFilter\nFunctions\nLibraries, Modules, and Packages\nStrings\nPositional Parameters and Named Parameters\nVariables\nTypes\nCalculator\nConditionals\nObject-Oriented Programming\nLoops\nAbstraction\nTruncation and Floating Point Imprecision\nExceptions\nMario\nLists\nSearching and Dictionaries\nCommand-Line Arguments\nExit Status\nCSV Files\nThird-Party Libraries\nSumming Up\n\n\n\n\nIn previous weeks, you were introduced to the fundamental building blocks of programming.\nYou learned about programming in a lower-level programming language called C.\nToday, we are going to work with a higher-level programming language called Python.\nAs you learn this new language, you’re going to find that you are going to be more able to teach yourself new programming languages.\n\n\n\n\n\nHumans, over the decades, have seen how previous design decisions made in prior programming languages could be improved upon.\nPython is a programming language that builds upon what you have already learned in C.\nPython additionally has access to a vast number of user-created libraries.\nUnlike in C, which is a compiled language, Python is an interpreted language, where you need not separately compile your program. Instead, you run your program in the Python Interpreter.\nUp until this point, the code has looked like this:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nToday, you’ll find that the process of writing and compiling code has been simplified.\nFor example, the above code will be rendered in Python as:\n# A program that says hello to the world\n\nprint(\"hello, world\")\n\nNotice that the semicolon is gone and that no library is needed. You can run this program in your terminal by typing python hello.py.\nPython notably can implement what was quite complicated in C with relative simplicity.\n\n\n\n\n\nTo illustrate this simplicity, let’s type ‘code dictionary.py’ in the terminal window and write code as follows:\n# Words in dictionary\nwords = set()\n\n\ndef check(word):\n    \"\"\"Return true if word is in dictionary else false\"\"\"\n    return word.lower() in words\n\n\ndef load(dictionary):\n    \"\"\"Load dictionary into memory, returning true if successful else false\"\"\"\n    with open(dictionary) as file:\n        words.update(file.read().splitlines())\n    return True\n\n\ndef size():\n    \"\"\"Returns number of words in dictionary if loaded else 0 if not yet loaded\"\"\"\n    return len(words)\n\n\ndef unload():\n    \"\"\"Unloads dictionary from memory, returning true if successful else false\"\"\"\n    return True\n\nNotice that there are four functions above. In the check function, if a word is in words, it returns True. It is so much easier than an implementation in C! Similarly, in the load function, the dictionary file is opened. For each line in that file, we add that line to words. Using rstrip, the trailing new line is removed from the added word. size simply returns the len or length of words. unload only needs to return True because Python handles memory management on its own.\nThe above code illustrates why higher-level languages exist: To simplify and allow you to write code more easily.\nHowever, speed is a tradeoff. Because C allows you, the programmer, to make decisions about memory management, it may run faster than Python – depending on your code. While C only runs your lines of code, Python runs all the code that comes under the hood with it when you call Python’s built-in functions.\nYou can learn more about functions in the Python documentation\n\n\n\n\n\nTo further illustrate this simplicity, create a new file by typing code blur.py in your terminal window and write code as follows:\n# Blurs an image\n\nfrom PIL import Image, ImageFilter\n\n# Blur image\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.BoxBlur(1))\nafter.save(\"out.bmp\")\n\nNotice that this program imports modules Image and ImageFilter from a library called PIL. This takes an input file and creates an output file.\nFurther, you can create a new file called edges.py as follows:\n# Finds edges in an image\n\nfrom PIL import Image, ImageFilter\n\n# Find edges\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.FIND_EDGES)\nafter.save(\"out.bmp\")\n\nNotice that this code is a small adjustment to your blur code but produces a dramatically different result.\nPython allows you to abstract away programming that would be much more complicated within C and other lower-level programming languages.\n\n\n\n\n\nIn C, you may have seen functions as follows:\nprintf(\"hello, world\\n\");\n\nIn Python, you will see functions as follows:\nprint(\"hello, world\")\n\n\n\n\n\n\nAs with C, the CS50 library can be utilized within Python.\nThe following functions will be of particular use:\n  get_float\n  get_int\n  get_string\n\nYou can import the cs50 library as follows:\nimport cs50\n\nYou also have the option of importing only specific functions from the CS50 library as follows:\nfrom cs50 import get_float, get_int, get_string\n\n\n\n\n\n\nIn C, you might remember this code:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThis code is transformed in Python to:\n# get_string and print, with concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello, \" + answer)\n\nYou can write this code by executing code hello.py in the terminal window. Then, you can execute this code by running python hello.py. Notice how the + sign concatenates \"hello, \" and answer.\nSimilarly, this can be done without concatenation:\n# get_string and print, without concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello,\", answer)\n\nNotice that the print statement automatically creates a space between the hello statement and the answer.\nSimilarly, you could implement the above code as:\n# get_string and print, with format strings\n\nfrom cs50 import get_string\n\nanswer  = get_string(\"What's your name? \")\nprint(f\"hello, {answer}\")\n\nNotice how the curly braces allow for the print function to interpolate the answer such that answer appears within. The f is required to include the answer properly formatting.\n\n\n\n\n\nFunctions in C like fread, fwrite, and printf use positional arguments, where you provide arguments with commas as separators. You, the programmer, must remember what argument is in which position. These are referred to as positional arguments.\nIn Python, named parameters allow you to provide arguments without regard to positionality.\nYou can learn more about the parameters of the print function in the documentation.\nAccessing that documentation, you may see the following:\nprint(*objects, sep=' ', end='\\n', file=None, flush=False)\n\nNotice that various objects can be provided to print. A separator of a single space is provided that will display when more than one object is given to print. Similarly, a new line is provided at the end of the print statement.\n\n\n\n\n\nVariable declaration is simplified too. In C, you might have int counter = 0;. In Python, this same line would read counter = 0. You need not declare the type of the variable.\nPython favors counter += 1 to increment by one, losing the ability found in C to type counter++.\n\n\n\n\n\nData types in Python do not need to be explicitly declared. For example, you saw how answer above is a string, but we did not have to tell the interpreter this was the case: It knew on its own.\nIn Python, commonly used types include:\n  bool\n  float\n  int\n  str\n\nNotice that long and double are missing. Python will handle what data type should be used for larger and smaller numbers.\nSome other data types in Python include:\nrange   sequence of numbers\nlist    sequence of mutable values\ntuple   sequence of immutable values\ndict    collection of key-value pairs\nset     collection of unique values\n\nEach of these data types can be implemented in C, but in Python, they can be implemented more simply.\n\n\n\n\n\nYou might recall calculator.c from earlier in the course:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Perform addition\n    printf(\"%i\\n\", x + y);\n}\n\nWe can implement a simple calculator just as we did within C. Type code calculator.py into the terminal window and write code as follows:\n# Addition with int [using get_int]\n\nfrom cs50 import get_int\n\n# Prompt user for x\nx = get_int(\"x: \")\n\n# Prompt user for y\ny = get_int(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how the CS50 library is imported. Then, x and y are gathered from the user. Finally, the result is printed. Notice that the main function that would have been seen in a C program is gone entirely! While one could utilize a main function, it is not required.\nIt’s possible for one to remove the training wheels of the CS50 library. Modify your code as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = input(\"x: \")\n\n# Prompt user for y\ny = input(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how executing the above code results in strange program behavior. Why might this be so?\nYou may have guessed that the interpreter understood x and y to be strings. You can fix your code by employing the int function as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Perform addition\nprint(x + y)\n\nNotice how the input for x and y is passed to the int function, which converts it to an integer. Without converting x and y to be integers, the characters will concatenate.\n\n\n\n\n\nIn C, you might remember a program like this:\n// Conditionals, Boolean expressions, relational operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nIn Python, it would appear as follows:\n# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int(\"What's x? \")\ny = get_int(\"What's y? \")\n\n# Compare integers\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n\nNotice that there are no more curly braces. Instead, indentations are utilized. Second, a colon is utilized in the if statement. Further, elif replaces else if. Parentheses are also no longer required in the if and elif statements.\nFurther looking at comparisons, consider the following code in C:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nThe above can be implemented as follows:\n# Logical operators\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s == \"Y\" or s == \"y\":\n    print(\"Agreed.\")\nelif s == \"N\" or s == \"n\":\n    print(\"Not agreed.\")\n\nNotice that the two vertical bars utilized in C is replaced with or. Indeed, people often enjoy Python because it is more readable by humans. Also, notice that char does not exist in Python. Instead, strs are utilized.\nAnother approach to this same code could be as follows using lists:\n# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how we are able to express multiple keywords like y and yes in a list.\n\n\n\n\n\nIt’s possible to have certain types of values not only have properties or attributes inside of them but have functions as well. In Python, these values are known as objects\nIn C, we could create a struct where you could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific object, it is known as a method.\nFor example, strs in Python have built-in methods. Therefore, you could modify your code as follows:\n# Logical operators, using lists\n\n# Prompt user to agree\ns = input(\"Do you agree? \").lower()\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how the old value of s is overwritten with the result of s.lower(), a built-in method of strs.\nSimilarly, you may recall how we copied a string in C:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\n\nNotice the number of lines of code.\nWe may implement the above in Python as follows:\n# Capitalizes a copy of a string\n\n# Get a string\ns = input(\"s: \")\n\n# Capitalize copy of string\nt = s.capitalize()\n\n# Print strings\nprint(f\"s: {s}\")\nprint(f\"t: {t}\")\n\nNotice how much shorter this program is than its counterpart in C.\nIn this class, we will only scratch the surface of Python. Therefore, the Python documentation will be of particular importance as you continue.\nYou can learn more about string methods in the Python documentation\n\n\n\n\n\nLoops in Python are very similar to C. You may recall the following code in C:\n// Demonstrates for loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nfor loops can be implemented in Python as follows:\n# Better design\n\nfor i in range(3):\n    print(\"meow\")\n\nNotice that i is never explicitly used. However, Python will increment the value of i.\nFurther, a while loop could be implemented as follows:\n# Demonstrates while loop\n\ni = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n\nTo further our understanding of loops and iteration in Python, let’s create a new file called uppercase.py as follows:\n# Uppercases string one character at a time\n\nbefore = input(\"Before: \")\nprint(\"After:  \", end=\"\")\nfor c in before:\n    print(c.upper(), end=\"\")\nprint()\n\nNotice how end= is used to pass a parameter to the print function that continues the line without a line ending. This code passes one string at a time.\nReading the documentation, we discover that Python has methods that can be implemented upon the entire string as follows:\n# Uppercases string all at once\n\nbefore = input(\"Before: \")\nafter = before.upper()\nprint(f\"After:  {after}\")\n\nNotice how .upper is applied to the entire string.\n\n\n\n\n\nAs we hinted at earlier today, you can further improve upon our code using functions and abstracting away various code into functions. Modify your earlier-created meow.py code as follows:\n# Abstraction\n\ndef main():\n    for i in range(3):\n        meow()\n\n# Meow once\ndef meow():\n    print(\"meow\")\n\n\nmain()\n\nNotice that the meow function abstracts away the print statement. Further, notice that the main function appears at the top of the file. At the bottom of the file, the main function is called. By convention, it’s expected that you create a main function in Python.\nIndeed, we can pass variables between our functions as follows:\n# Abstraction with parameterization\n\ndef main():\n    meow(3)\n\n\n# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print(\"meow\")\n\n\nmain()\n\nNotice how meow now takes a variable n. In the main function, you can call meow and pass a value like 3 to it. Then, meow utilizes the value of n in the for loop.\nReading the above code, notice how you, as a C programmer, are able to quite easily make sense of the above code. While some conventions are different, the building blocks you previously learned are very apparent in this new programming language.\n\n\n\n\n\nRecall that in C, we experienced truncation where one integer is divided by another could result in an imprecise result.\nYou can see how Python handles such division as follows by modifying your code for calculator.py:\n# Division with integers, demonstration lack of truncation\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(z)\n\nNotice that executing this code results in a value, but that if you were to see more digits after .333333 you’d see that we are faced with floating-point imprecision. Truncation does not occur.\nWe can reveal this imprecision by modifying our codes slightly:\n# Floating-point imprecision\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(f\"{z:.50f}\")\n\nNotice that this code reveals the imprecision. Python still faces this issue, just as C does.\n\n\n\n\n\nLet’s explore more about exceptions that can occur when we run Python code.\nModify calculator.py as follows:\n# Doesn't handle exception\n\n# Prompt user for an integer\nn = int(input(\"Input: \"))\nprint(\"Integer\")\n\nNotice that inputting the wrong data could result in an error.\nWe can try to handle and catch potential exceptions by modifying our code as follows:\n# Handles exception\n\n# Prompt user for an integer\ntry:\n    n = int(input(\"Input: \"))\n    print(\"Integer.\")\nexcept ValueError:\n    print(\"Not integer.\")\n\nNotice that the above code repeatedly tries to get the correct type of data, providing additional prompts when needed.\n\n\n\n\n\nRecall a few weeks ago our challenge of building three blocks on top of one another, like in Mario.\n\n\n\nthree vertical blocks\n\n\nIn Python, we can implement something akin to this as follows:\n# Prints a column of 3 bricks with a loop\n\nfor i in range(3):\n    print(\"#\")\n\nThis prints a column of three bricks.\nIn C, we had the advantage of a do-while loop. However, in Python, it is conventional to utilize a while loop, as Python does not have a do-while loop. You can write code as follows in a file called mario.py:\n# Prints a column of n bricks with a loop\n\nfrom cs50 import get_int\n\nwhile True:\n    n = get_int(\"Height: \")\n    if n &gt; 0:\n        break\n\nfor i in range(n):\n    print(\"#\")\n\nNotice how the while loop is used to obtain the height. Once a height greater than zero is inputted, the loop breaks.\nConsider the following image:\n\n\n\nfour horizontal question blocks\n\n\nIn Python, we could implement by modifying your code as follows:\n# Prints a row of 4 question marks with a loop\n\nfor i in range(4):\n    print(\"?\", end=\"\")\nprint()\n\nNotice that you can override the behavior of the print function to stay on the same line as the previous print.\nSimilar in spirit to previous iterations, we can further simplify this program:\n# Prints a row of 4 question marks without a loop\n\nprint(\"?\" * 4)\n\nNotice that we can utilize * to multiply the print statement to repeat 4 times.\nWhat about a large block of bricks?\n\n\n\nthree by three block of mario blocks\n\n\nTo implement the above, you can modify your code as follows:\n# Prints a 3-by-3 grid of bricks with loops\n\nfor i in range(3):\n    for j in range(3):\n        print(\"#\", end=\"\")\n    print()\n\nNotice how one for loop exists inside another. The print statement adds a new line at the end of each row of bricks.\nYou can learn more about the print function in the Python documentation\n\n\n\n\n\nlists are a data structure within Python.\nlists have built-in methods or functions within them.\nFor example, consider the following code:\n# Averages three numbers using a list\n\n# Scores\nscores = [72, 73, 33]\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that you can use the built-in sum method to calculate the average.\nYou can even utilize the following syntax to get values from the user:\n# Averages three numbers using a list and a loop\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int(\"Score: \")\n    scores.append(score)\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that this code utilizes the built-in append method for lists.\nYou can learn more about lists in the Python documentation\nYou can also learn more about len in the Python documentation\n\n\n\n\n\nWe can also search within a data structure.\nConsider a program called phonebook.py as follows:\n# Implements linear search for names using loop\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nfor n in names:\n    if name == n:\n        print(\"Found\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice how this implements linear search for each name.\nHowever, we don’t need to iterate through a list. In Python, we can execute linear search as follows:\n# Implements linear search for names using `in`\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nif name in names:\n    print(\"Found\")\nelse:\n    print(\"Not found\")\n\nNotice how in is used to implement linear search.\nStill, this code could be improved.\nRecall that a dictionary or dict is a collection of key and value pairs.\nYou can implement a dictionary in Python as follows:\n# Implements a phone book as a list of dictionaries, without a variable\n\nfrom cs50 import get_string\n\npeople = [\n    {\"name\": \"Yuliia\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"David\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"John\", \"number\": \"+1-949-468-2750\"},\n]\n\n# Search for name\nname = get_string(\"Name: \")\nfor person in people:\n    if person[\"name\"] == name:\n        print(f\"Found {person['number']}\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented having both name and number for each entry.\nEven better, strictly speaking, we don’t need both a name and a number. We can simplify this code as follows:\n# Implements a phone book using a dictionary\n\nfrom cs50 import get_string\n\npeople = {\n    \"Yuliia\": \"+1-617-495-1000\",\n    \"David\": \"+1-617-495-1000\",\n    \"John\": \"+1-949-468-2750\",\n}\n\n# Search for name\nname = get_string(\"Name: \")\nif name in people:\n    print(f\"Number: {people[name]}\")\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented using curly braces. Then, the statement if name in people searches to see if the name is in the people dictionary. Further, notice how, in the print statement, we can index into the people dictionary using the value of name. Very useful!\nPython has done their best to get to constant time using their built-in searches.\nYou can learn more about dictionaries in the Python documentation\n\n\n\n\n\nAs with C, you can also utilize command-line arguments. Consider the following code:\n# Prints a command-line argument\n\nfrom sys import argv\n\nif len(argv) == 2:\n    print(f\"hello, {argv[1]}\")\nelse:\n    print(\"hello, world\")\n\nNotice that argv[1] is printed using a formatted string, noted by the f present in the print statement.\nYou can learn more about the sys library in the Python documentation\n\n\n\n\n\nThe sys library also has built-in methods. We can use sys.exit(i) to exit the program with a specific exit code:\n# Exits with explicit value, importing sys\n\nimport sys\n\nif len(sys.argv) != 2:\n    print(\"Missing command-line argument\")\n    sys.exit(1)\n\nprint(f\"hello, {sys.argv[1]}\")\nsys.exit(0)\n\nNotice that dot-notation is used to utilize the built-in functions of sys.\n\n\n\n\n\nPython also has built-in support for CSV files.\nModify your code for phonebook.py as follows:\nimport csv\n\nfile = open(\"phonebook.csv\", \"a\")\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwriter = csv.writer(file)\nwriter.writerow([name,number])\n\nfile.close()\n\nNotice writerow adds the commas in the CSV file for us.\nWhile file.close and file = open are commonly used and available syntax in Python, this code can be improved as follows:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.writer(file)\n    writer.writerow([name,number])\n\nNotice that the code is indented under the with statement. This automatically closes the file when done.\nSimilarly, we can write a dictionary as follows within the CSV file:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"number\"])\n    writer.writerow({\"name\": name, \"number\": number})\n\nNotice this code is quite similar to our prior iteration but with csv.DictWriter instead.\n\n\n\n\n\nOne of the advantages of Python is its massive user base and similarly large number of third-party libraries.\nYou can install the CS50 Library on your own computer by typing pip install cs50, provided you have Python installed.\nConsidering other libraries, David demoed the use of cowsay and qrcode.\n\n\n\n\nIn this lesson, you learned how the building blocks of programming from prior lessons can be implemented within Python. Further, you learned about how Python allowed for more simplified code. Also, you learned how to utilize various Python libraries. In the end, you learned that your skills as a programmer are not limited to a single programming language. Already, you are seeing how you are discovering a new way of learning through this course that could serve you in any programming language – and, perhaps, in nearly any avenue of learning! Specifically, we discussed…\n\nPython\nVariables\nConditionals\nLoops\nTypes\nObject-Oriented programming\nTruncation and floating point imprecision\nExceptions\nDictionaries\nCommand-line arguments\nThird-Party libraries\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_7.html#welcome",
    "href": "notes/notes_7.html#welcome",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In previous weeks, you were introduced to the fundamental building blocks of programming.\nYou learned about programming in a lower-level programming language called C.\nToday, we are going to work with a higher-level programming language called Python.\nAs you learn this new language, you’re going to find that you are going to be more able to teach yourself new programming languages."
  },
  {
    "objectID": "notes/notes_7.html#hello-python",
    "href": "notes/notes_7.html#hello-python",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Humans, over the decades, have seen how previous design decisions made in prior programming languages could be improved upon.\nPython is a programming language that builds upon what you have already learned in C.\nPython additionally has access to a vast number of user-created libraries.\nUnlike in C, which is a compiled language, Python is an interpreted language, where you need not separately compile your program. Instead, you run your program in the Python Interpreter.\nUp until this point, the code has looked like this:\n// A program that says hello to the world\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n\nToday, you’ll find that the process of writing and compiling code has been simplified.\nFor example, the above code will be rendered in Python as:\n# A program that says hello to the world\n\nprint(\"hello, world\")\n\nNotice that the semicolon is gone and that no library is needed. You can run this program in your terminal by typing python hello.py.\nPython notably can implement what was quite complicated in C with relative simplicity."
  },
  {
    "objectID": "notes/notes_7.html#speller",
    "href": "notes/notes_7.html#speller",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "To illustrate this simplicity, let’s type ‘code dictionary.py’ in the terminal window and write code as follows:\n# Words in dictionary\nwords = set()\n\n\ndef check(word):\n    \"\"\"Return true if word is in dictionary else false\"\"\"\n    return word.lower() in words\n\n\ndef load(dictionary):\n    \"\"\"Load dictionary into memory, returning true if successful else false\"\"\"\n    with open(dictionary) as file:\n        words.update(file.read().splitlines())\n    return True\n\n\ndef size():\n    \"\"\"Returns number of words in dictionary if loaded else 0 if not yet loaded\"\"\"\n    return len(words)\n\n\ndef unload():\n    \"\"\"Unloads dictionary from memory, returning true if successful else false\"\"\"\n    return True\n\nNotice that there are four functions above. In the check function, if a word is in words, it returns True. It is so much easier than an implementation in C! Similarly, in the load function, the dictionary file is opened. For each line in that file, we add that line to words. Using rstrip, the trailing new line is removed from the added word. size simply returns the len or length of words. unload only needs to return True because Python handles memory management on its own.\nThe above code illustrates why higher-level languages exist: To simplify and allow you to write code more easily.\nHowever, speed is a tradeoff. Because C allows you, the programmer, to make decisions about memory management, it may run faster than Python – depending on your code. While C only runs your lines of code, Python runs all the code that comes under the hood with it when you call Python’s built-in functions.\nYou can learn more about functions in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#filter",
    "href": "notes/notes_7.html#filter",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "To further illustrate this simplicity, create a new file by typing code blur.py in your terminal window and write code as follows:\n# Blurs an image\n\nfrom PIL import Image, ImageFilter\n\n# Blur image\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.BoxBlur(1))\nafter.save(\"out.bmp\")\n\nNotice that this program imports modules Image and ImageFilter from a library called PIL. This takes an input file and creates an output file.\nFurther, you can create a new file called edges.py as follows:\n# Finds edges in an image\n\nfrom PIL import Image, ImageFilter\n\n# Find edges\nbefore = Image.open(\"bridge.bmp\")\nafter = before.filter(ImageFilter.FIND_EDGES)\nafter.save(\"out.bmp\")\n\nNotice that this code is a small adjustment to your blur code but produces a dramatically different result.\nPython allows you to abstract away programming that would be much more complicated within C and other lower-level programming languages."
  },
  {
    "objectID": "notes/notes_7.html#functions",
    "href": "notes/notes_7.html#functions",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you may have seen functions as follows:\nprintf(\"hello, world\\n\");\n\nIn Python, you will see functions as follows:\nprint(\"hello, world\")"
  },
  {
    "objectID": "notes/notes_7.html#libraries-modules-and-packages",
    "href": "notes/notes_7.html#libraries-modules-and-packages",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As with C, the CS50 library can be utilized within Python.\nThe following functions will be of particular use:\n  get_float\n  get_int\n  get_string\n\nYou can import the cs50 library as follows:\nimport cs50\n\nYou also have the option of importing only specific functions from the CS50 library as follows:\nfrom cs50 import get_float, get_int, get_string"
  },
  {
    "objectID": "notes/notes_7.html#strings",
    "href": "notes/notes_7.html#strings",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you might remember this code:\n// get_string and printf with %s\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    string answer = get_string(\"What's your name? \");\n    printf(\"hello, %s\\n\", answer);\n}\n\nThis code is transformed in Python to:\n# get_string and print, with concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello, \" + answer)\n\nYou can write this code by executing code hello.py in the terminal window. Then, you can execute this code by running python hello.py. Notice how the + sign concatenates \"hello, \" and answer.\nSimilarly, this can be done without concatenation:\n# get_string and print, without concatenation\n\nfrom cs50 import get_string\n\nanswer = get_string(\"What's your name? \")\nprint(\"hello,\", answer)\n\nNotice that the print statement automatically creates a space between the hello statement and the answer.\nSimilarly, you could implement the above code as:\n# get_string and print, with format strings\n\nfrom cs50 import get_string\n\nanswer  = get_string(\"What's your name? \")\nprint(f\"hello, {answer}\")\n\nNotice how the curly braces allow for the print function to interpolate the answer such that answer appears within. The f is required to include the answer properly formatting."
  },
  {
    "objectID": "notes/notes_7.html#positional-parameters-and-named-parameters",
    "href": "notes/notes_7.html#positional-parameters-and-named-parameters",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Functions in C like fread, fwrite, and printf use positional arguments, where you provide arguments with commas as separators. You, the programmer, must remember what argument is in which position. These are referred to as positional arguments.\nIn Python, named parameters allow you to provide arguments without regard to positionality.\nYou can learn more about the parameters of the print function in the documentation.\nAccessing that documentation, you may see the following:\nprint(*objects, sep=' ', end='\\n', file=None, flush=False)\n\nNotice that various objects can be provided to print. A separator of a single space is provided that will display when more than one object is given to print. Similarly, a new line is provided at the end of the print statement."
  },
  {
    "objectID": "notes/notes_7.html#variables",
    "href": "notes/notes_7.html#variables",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Variable declaration is simplified too. In C, you might have int counter = 0;. In Python, this same line would read counter = 0. You need not declare the type of the variable.\nPython favors counter += 1 to increment by one, losing the ability found in C to type counter++."
  },
  {
    "objectID": "notes/notes_7.html#types",
    "href": "notes/notes_7.html#types",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Data types in Python do not need to be explicitly declared. For example, you saw how answer above is a string, but we did not have to tell the interpreter this was the case: It knew on its own.\nIn Python, commonly used types include:\n  bool\n  float\n  int\n  str\n\nNotice that long and double are missing. Python will handle what data type should be used for larger and smaller numbers.\nSome other data types in Python include:\nrange   sequence of numbers\nlist    sequence of mutable values\ntuple   sequence of immutable values\ndict    collection of key-value pairs\nset     collection of unique values\n\nEach of these data types can be implemented in C, but in Python, they can be implemented more simply."
  },
  {
    "objectID": "notes/notes_7.html#calculator",
    "href": "notes/notes_7.html#calculator",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "You might recall calculator.c from earlier in the course:\n// Addition with int\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for x\n    int x = get_int(\"x: \");\n\n    // Prompt user for y\n    int y = get_int(\"y: \");\n\n    // Perform addition\n    printf(\"%i\\n\", x + y);\n}\n\nWe can implement a simple calculator just as we did within C. Type code calculator.py into the terminal window and write code as follows:\n# Addition with int [using get_int]\n\nfrom cs50 import get_int\n\n# Prompt user for x\nx = get_int(\"x: \")\n\n# Prompt user for y\ny = get_int(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how the CS50 library is imported. Then, x and y are gathered from the user. Finally, the result is printed. Notice that the main function that would have been seen in a C program is gone entirely! While one could utilize a main function, it is not required.\nIt’s possible for one to remove the training wheels of the CS50 library. Modify your code as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = input(\"x: \")\n\n# Prompt user for y\ny = input(\"y: \")\n\n# Perform addition\nprint(x + y)\n\nNotice how executing the above code results in strange program behavior. Why might this be so?\nYou may have guessed that the interpreter understood x and y to be strings. You can fix your code by employing the int function as follows:\n# Addition with int [using input]\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Perform addition\nprint(x + y)\n\nNotice how the input for x and y is passed to the int function, which converts it to an integer. Without converting x and y to be integers, the characters will concatenate."
  },
  {
    "objectID": "notes/notes_7.html#conditionals",
    "href": "notes/notes_7.html#conditionals",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In C, you might remember a program like this:\n// Conditionals, Boolean expressions, relational operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user for integers\n    int x = get_int(\"What's x? \");\n    int y = get_int(\"What's y? \");\n\n    // Compare integers\n    if (x &lt; y)\n    {\n        printf(\"x is less than y\\n\");\n    }\n    else if (x &gt; y)\n    {\n        printf(\"x is greater than y\\n\");\n    }\n    else\n    {\n        printf(\"x is equal to y\\n\");\n    }\n}\n\nIn Python, it would appear as follows:\n# Conditionals, Boolean expressions, relational operators\n\nfrom cs50 import get_int\n\n# Prompt user for integers\nx = get_int(\"What's x? \")\ny = get_int(\"What's y? \")\n\n# Compare integers\nif x &lt; y:\n    print(\"x is less than y\")\nelif x &gt; y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is equal to y\")\n\nNotice that there are no more curly braces. Instead, indentations are utilized. Second, a colon is utilized in the if statement. Further, elif replaces else if. Parentheses are also no longer required in the if and elif statements.\nFurther looking at comparisons, consider the following code in C:\n// Logical operators\n\n#include &lt;cs50.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    // Prompt user to agree\n    char c = get_char(\"Do you agree? \");\n\n    // Check whether agreed\n    if (c == 'Y' || c == 'y')\n    {\n        printf(\"Agreed.\\n\");\n    }\n    else if (c == 'N' || c == 'n')\n    {\n        printf(\"Not agreed.\\n\");\n    }\n}\n\nThe above can be implemented as follows:\n# Logical operators\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s == \"Y\" or s == \"y\":\n    print(\"Agreed.\")\nelif s == \"N\" or s == \"n\":\n    print(\"Not agreed.\")\n\nNotice that the two vertical bars utilized in C is replaced with or. Indeed, people often enjoy Python because it is more readable by humans. Also, notice that char does not exist in Python. Instead, strs are utilized.\nAnother approach to this same code could be as follows using lists:\n# Logical operators, using lists\n\nfrom cs50 import get_string\n\n# Prompt user to agree\ns = get_string(\"Do you agree? \")\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how we are able to express multiple keywords like y and yes in a list."
  },
  {
    "objectID": "notes/notes_7.html#object-oriented-programming",
    "href": "notes/notes_7.html#object-oriented-programming",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "It’s possible to have certain types of values not only have properties or attributes inside of them but have functions as well. In Python, these values are known as objects\nIn C, we could create a struct where you could associate multiple variables inside a single self-created data type. In Python, we can do this and also include functions in a self-created data type. When a function belongs to a specific object, it is known as a method.\nFor example, strs in Python have built-in methods. Therefore, you could modify your code as follows:\n# Logical operators, using lists\n\n# Prompt user to agree\ns = input(\"Do you agree? \").lower()\n\n# Check whether agreed\nif s in [\"y\", \"yes\"]:\n    print(\"Agreed.\")\nelif s in [\"n\", \"no\"]:\n    print(\"Not agreed.\")\n\nNotice how the old value of s is overwritten with the result of s.lower(), a built-in method of strs.\nSimilarly, you may recall how we copied a string in C:\n// Capitalizes a copy of a string without memory errors\n\n#include &lt;cs50.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint main(void)\n{\n    // Get a string\n    char *s = get_string(\"s: \");\n    if (s == NULL)\n    {\n        return 1;\n    }\n\n    // Allocate memory for another string\n    char *t = malloc(strlen(s) + 1);\n    if (t == NULL)\n    {\n        return 1;\n    }\n\n    // Copy string into memory\n    strcpy(t, s);\n\n    // Capitalize copy\n    if (strlen(t) &gt; 0)\n    {\n        t[0] = toupper(t[0]);\n    }\n\n    // Print strings\n    printf(\"s: %s\\n\", s);\n    printf(\"t: %s\\n\", t);\n\n    // Free memory\n    free(t);\n    return 0;\n}\n\nNotice the number of lines of code.\nWe may implement the above in Python as follows:\n# Capitalizes a copy of a string\n\n# Get a string\ns = input(\"s: \")\n\n# Capitalize copy of string\nt = s.capitalize()\n\n# Print strings\nprint(f\"s: {s}\")\nprint(f\"t: {t}\")\n\nNotice how much shorter this program is than its counterpart in C.\nIn this class, we will only scratch the surface of Python. Therefore, the Python documentation will be of particular importance as you continue.\nYou can learn more about string methods in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#loops",
    "href": "notes/notes_7.html#loops",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Loops in Python are very similar to C. You may recall the following code in C:\n// Demonstrates for loop\n\n#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    for (int i = 0; i &lt; 3; i++)\n    {\n        printf(\"meow\\n\");\n    }\n}\n\nfor loops can be implemented in Python as follows:\n# Better design\n\nfor i in range(3):\n    print(\"meow\")\n\nNotice that i is never explicitly used. However, Python will increment the value of i.\nFurther, a while loop could be implemented as follows:\n# Demonstrates while loop\n\ni = 0\nwhile i &lt; 3:\n    print(\"meow\")\n    i += 1\n\nTo further our understanding of loops and iteration in Python, let’s create a new file called uppercase.py as follows:\n# Uppercases string one character at a time\n\nbefore = input(\"Before: \")\nprint(\"After:  \", end=\"\")\nfor c in before:\n    print(c.upper(), end=\"\")\nprint()\n\nNotice how end= is used to pass a parameter to the print function that continues the line without a line ending. This code passes one string at a time.\nReading the documentation, we discover that Python has methods that can be implemented upon the entire string as follows:\n# Uppercases string all at once\n\nbefore = input(\"Before: \")\nafter = before.upper()\nprint(f\"After:  {after}\")\n\nNotice how .upper is applied to the entire string."
  },
  {
    "objectID": "notes/notes_7.html#abstraction",
    "href": "notes/notes_7.html#abstraction",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As we hinted at earlier today, you can further improve upon our code using functions and abstracting away various code into functions. Modify your earlier-created meow.py code as follows:\n# Abstraction\n\ndef main():\n    for i in range(3):\n        meow()\n\n# Meow once\ndef meow():\n    print(\"meow\")\n\n\nmain()\n\nNotice that the meow function abstracts away the print statement. Further, notice that the main function appears at the top of the file. At the bottom of the file, the main function is called. By convention, it’s expected that you create a main function in Python.\nIndeed, we can pass variables between our functions as follows:\n# Abstraction with parameterization\n\ndef main():\n    meow(3)\n\n\n# Meow some number of times\ndef meow(n):\n    for i in range(n):\n        print(\"meow\")\n\n\nmain()\n\nNotice how meow now takes a variable n. In the main function, you can call meow and pass a value like 3 to it. Then, meow utilizes the value of n in the for loop.\nReading the above code, notice how you, as a C programmer, are able to quite easily make sense of the above code. While some conventions are different, the building blocks you previously learned are very apparent in this new programming language."
  },
  {
    "objectID": "notes/notes_7.html#truncation-and-floating-point-imprecision",
    "href": "notes/notes_7.html#truncation-and-floating-point-imprecision",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Recall that in C, we experienced truncation where one integer is divided by another could result in an imprecise result.\nYou can see how Python handles such division as follows by modifying your code for calculator.py:\n# Division with integers, demonstration lack of truncation\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(z)\n\nNotice that executing this code results in a value, but that if you were to see more digits after .333333 you’d see that we are faced with floating-point imprecision. Truncation does not occur.\nWe can reveal this imprecision by modifying our codes slightly:\n# Floating-point imprecision\n\n# Prompt user for x\nx = int(input(\"x: \"))\n\n# Prompt user for y\ny = int(input(\"y: \"))\n\n# Divide x by y\nz = x / y\nprint(f\"{z:.50f}\")\n\nNotice that this code reveals the imprecision. Python still faces this issue, just as C does."
  },
  {
    "objectID": "notes/notes_7.html#exceptions",
    "href": "notes/notes_7.html#exceptions",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Let’s explore more about exceptions that can occur when we run Python code.\nModify calculator.py as follows:\n# Doesn't handle exception\n\n# Prompt user for an integer\nn = int(input(\"Input: \"))\nprint(\"Integer\")\n\nNotice that inputting the wrong data could result in an error.\nWe can try to handle and catch potential exceptions by modifying our code as follows:\n# Handles exception\n\n# Prompt user for an integer\ntry:\n    n = int(input(\"Input: \"))\n    print(\"Integer.\")\nexcept ValueError:\n    print(\"Not integer.\")\n\nNotice that the above code repeatedly tries to get the correct type of data, providing additional prompts when needed."
  },
  {
    "objectID": "notes/notes_7.html#mario",
    "href": "notes/notes_7.html#mario",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Recall a few weeks ago our challenge of building three blocks on top of one another, like in Mario.\n\n\n\nthree vertical blocks\n\n\nIn Python, we can implement something akin to this as follows:\n# Prints a column of 3 bricks with a loop\n\nfor i in range(3):\n    print(\"#\")\n\nThis prints a column of three bricks.\nIn C, we had the advantage of a do-while loop. However, in Python, it is conventional to utilize a while loop, as Python does not have a do-while loop. You can write code as follows in a file called mario.py:\n# Prints a column of n bricks with a loop\n\nfrom cs50 import get_int\n\nwhile True:\n    n = get_int(\"Height: \")\n    if n &gt; 0:\n        break\n\nfor i in range(n):\n    print(\"#\")\n\nNotice how the while loop is used to obtain the height. Once a height greater than zero is inputted, the loop breaks.\nConsider the following image:\n\n\n\nfour horizontal question blocks\n\n\nIn Python, we could implement by modifying your code as follows:\n# Prints a row of 4 question marks with a loop\n\nfor i in range(4):\n    print(\"?\", end=\"\")\nprint()\n\nNotice that you can override the behavior of the print function to stay on the same line as the previous print.\nSimilar in spirit to previous iterations, we can further simplify this program:\n# Prints a row of 4 question marks without a loop\n\nprint(\"?\" * 4)\n\nNotice that we can utilize * to multiply the print statement to repeat 4 times.\nWhat about a large block of bricks?\n\n\n\nthree by three block of mario blocks\n\n\nTo implement the above, you can modify your code as follows:\n# Prints a 3-by-3 grid of bricks with loops\n\nfor i in range(3):\n    for j in range(3):\n        print(\"#\", end=\"\")\n    print()\n\nNotice how one for loop exists inside another. The print statement adds a new line at the end of each row of bricks.\nYou can learn more about the print function in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#lists",
    "href": "notes/notes_7.html#lists",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "lists are a data structure within Python.\nlists have built-in methods or functions within them.\nFor example, consider the following code:\n# Averages three numbers using a list\n\n# Scores\nscores = [72, 73, 33]\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that you can use the built-in sum method to calculate the average.\nYou can even utilize the following syntax to get values from the user:\n# Averages three numbers using a list and a loop\n\nfrom cs50 import get_int\n\n# Get scores\nscores = []\nfor i in range(3):\n    score = get_int(\"Score: \")\n    scores.append(score)\n\n# Print average\naverage = sum(scores) / len(scores)\nprint(f\"Average: {average}\")\n\nNotice that this code utilizes the built-in append method for lists.\nYou can learn more about lists in the Python documentation\nYou can also learn more about len in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#searching-and-dictionaries",
    "href": "notes/notes_7.html#searching-and-dictionaries",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "We can also search within a data structure.\nConsider a program called phonebook.py as follows:\n# Implements linear search for names using loop\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nfor n in names:\n    if name == n:\n        print(\"Found\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice how this implements linear search for each name.\nHowever, we don’t need to iterate through a list. In Python, we can execute linear search as follows:\n# Implements linear search for names using `in`\n\n# A list of names\nnames = [\"Yuliia\", \"David\", \"John\"]\n\n# Ask for name\nname = input(\"Name: \")\n\n# Search for name\nif name in names:\n    print(\"Found\")\nelse:\n    print(\"Not found\")\n\nNotice how in is used to implement linear search.\nStill, this code could be improved.\nRecall that a dictionary or dict is a collection of key and value pairs.\nYou can implement a dictionary in Python as follows:\n# Implements a phone book as a list of dictionaries, without a variable\n\nfrom cs50 import get_string\n\npeople = [\n    {\"name\": \"Yuliia\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"David\", \"number\": \"+1-617-495-1000\"},\n    {\"name\": \"John\", \"number\": \"+1-949-468-2750\"},\n]\n\n# Search for name\nname = get_string(\"Name: \")\nfor person in people:\n    if person[\"name\"] == name:\n        print(f\"Found {person['number']}\")\n        break\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented having both name and number for each entry.\nEven better, strictly speaking, we don’t need both a name and a number. We can simplify this code as follows:\n# Implements a phone book using a dictionary\n\nfrom cs50 import get_string\n\npeople = {\n    \"Yuliia\": \"+1-617-495-1000\",\n    \"David\": \"+1-617-495-1000\",\n    \"John\": \"+1-949-468-2750\",\n}\n\n# Search for name\nname = get_string(\"Name: \")\nif name in people:\n    print(f\"Number: {people[name]}\")\nelse:\n    print(\"Not found\")\n\nNotice that the dictionary is implemented using curly braces. Then, the statement if name in people searches to see if the name is in the people dictionary. Further, notice how, in the print statement, we can index into the people dictionary using the value of name. Very useful!\nPython has done their best to get to constant time using their built-in searches.\nYou can learn more about dictionaries in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#command-line-arguments",
    "href": "notes/notes_7.html#command-line-arguments",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "As with C, you can also utilize command-line arguments. Consider the following code:\n# Prints a command-line argument\n\nfrom sys import argv\n\nif len(argv) == 2:\n    print(f\"hello, {argv[1]}\")\nelse:\n    print(\"hello, world\")\n\nNotice that argv[1] is printed using a formatted string, noted by the f present in the print statement.\nYou can learn more about the sys library in the Python documentation"
  },
  {
    "objectID": "notes/notes_7.html#exit-status",
    "href": "notes/notes_7.html#exit-status",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "The sys library also has built-in methods. We can use sys.exit(i) to exit the program with a specific exit code:\n# Exits with explicit value, importing sys\n\nimport sys\n\nif len(sys.argv) != 2:\n    print(\"Missing command-line argument\")\n    sys.exit(1)\n\nprint(f\"hello, {sys.argv[1]}\")\nsys.exit(0)\n\nNotice that dot-notation is used to utilize the built-in functions of sys."
  },
  {
    "objectID": "notes/notes_7.html#csv-files",
    "href": "notes/notes_7.html#csv-files",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "Python also has built-in support for CSV files.\nModify your code for phonebook.py as follows:\nimport csv\n\nfile = open(\"phonebook.csv\", \"a\")\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwriter = csv.writer(file)\nwriter.writerow([name,number])\n\nfile.close()\n\nNotice writerow adds the commas in the CSV file for us.\nWhile file.close and file = open are commonly used and available syntax in Python, this code can be improved as follows:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.writer(file)\n    writer.writerow([name,number])\n\nNotice that the code is indented under the with statement. This automatically closes the file when done.\nSimilarly, we can write a dictionary as follows within the CSV file:\nimport csv\n\nname = input(\"Name: \")\nnumber = input(\"Number: \")\n\nwith open(\"phonebook.csv\", \"a\") as file:\n\n    writer = csv.DictWriter(file, fieldnames=[\"name\", \"number\"])\n    writer.writerow({\"name\": name, \"number\": number})\n\nNotice this code is quite similar to our prior iteration but with csv.DictWriter instead."
  },
  {
    "objectID": "notes/notes_7.html#third-party-libraries",
    "href": "notes/notes_7.html#third-party-libraries",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "One of the advantages of Python is its massive user base and similarly large number of third-party libraries.\nYou can install the CS50 Library on your own computer by typing pip install cs50, provided you have Python installed.\nConsidering other libraries, David demoed the use of cowsay and qrcode."
  },
  {
    "objectID": "notes/notes_7.html#summing-up",
    "href": "notes/notes_7.html#summing-up",
    "title": "Lecture 7 Notes",
    "section": "",
    "text": "In this lesson, you learned how the building blocks of programming from prior lessons can be implemented within Python. Further, you learned about how Python allowed for more simplified code. Also, you learned how to utilize various Python libraries. In the end, you learned that your skills as a programmer are not limited to a single programming language. Already, you are seeing how you are discovering a new way of learning through this course that could serve you in any programming language – and, perhaps, in nearly any avenue of learning! Specifically, we discussed…\n\nPython\nVariables\nConditionals\nLoops\nTypes\nObject-Oriented programming\nTruncation and floating point imprecision\nExceptions\nDictionaries\nCommand-line arguments\nThird-Party libraries\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_9.html",
    "href": "notes/notes_9.html",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Welcome!\nThe Internet\nRouters\nDNS\nDHCP\nHTTPS\nHTML\nRegular Expressions\nCSS\nFrameworks\nJavaScript\nSumming Up\n\n\n\n\nIn previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. Today, we will extend those building blocks further in HTML, CSS, and JavaScript.\n\n\n\n\n\nThe internet is a technology that we all use.\nUsing our skills from previous weeks, we can build our own web pages and applications.\nThe ARPANET connected the first points on the internet to one another.\nDots between two points could be considered routers.\n\n\n\n\n\nTo route data from one place to another, we need to make routing decisions. That is, someone needs to program how data is transferred from point A to point B.\nYou can imagine how data could take multiple paths from point A and point B, such that when a router is congested, data can flow through another path. Packets of data are transferred from one router to another, from one computer to another.\nTCP/IP are two protocols that allow computers to transfer data between them over the internet.\nIP or internet protocol is a way by which computers can identify one another across the internet. Every computer has a unique address in the world. Addresses are in this form:\n#.#.#.#\n\nNumbers range from 0 to 255. IP addresses are 32-bits, meaning that these addresses could accommodate over 4 billion addresses. Newer versions of IP addresses, implementing 128-bits, can accommodate far more computers!\nIn the real world, servers do a lot of work for us.\nPackets are structured as follows:\n0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version|  IHL  |Type of Service|          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         Identification        |Flags|      Fragment Offset    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Time to Live |    Protocol   |         Header Checksum       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Source Address                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Destination Address                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options                    |    Padding    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nPackets are standardized. The source and destination are held within each packet.\nTCP, or transmission control protocol, helps keep track of the sequence of packets being sent.\nFurther, TCP is used to distinguish web services from one another. For example, 80 is used to denote HTTP and 443 is used to denote HTTPS. These numbers are port numbers.\nWhen information is sent from one location to another, a source IP address, a destination IP address, and a TCP port number are sent.\nThese protocols are also used to fragment large files into multiple parts or packets. For example, a large photo of a cat can be sent in multiple packets. When a packet is lost, TCP/IP can request missing packets again from the origin server.\nTCP will acknowledge when all the data has been transmitted and received.\n\n\n\n\n\nIt would be very tedious if you needed to remember an IP address to visit a website.\nDNS, or domain name systems, is a collection of servers on the internet that are used to route website addresses like harvard.edu to a specific IP address.\nDNS is simply a table or database that links specific, fully qualified domain names to specific IP addresses.\n\n\n\n\n\nDHCP is a protocol that ascertains the IP address of your device.\nFurther, this protocol defines the default gateway and nameservers your device uses.\n\n\n\n\n\nHTTP or hypertext transfer protocol is an application-level protocol that developers use to build powerful and useful things through the transfer of data from one place to another. HTTPS is a secure version of this protocol.\nWhen you see an address such as https://www.example.com you are actually implicitly visiting that address with a / at the end of it.\nThe path is what exists after that slash. For example, https://www.example.com/folder/file.html visits example.com and browses to the folder directory, and then visits the file named file.html.\nThe .com is called a top-level domain that is used to denote the location or type of organization associated with this address.\nhttps in this address is the protocol that is used to connect to that web address. By protocol, we mean that HTTP utilizes GET or POST requests to ask for information from a server. For example, you can launch Google Chrome, right-click, and click inspect. When you open the developer tools and visit Network, selecting Preserve log, you will see Request Headers. You’ll see mentions of GET. This is possible in other browsers as well, using slightly different methods.\nFor example, when issuing a GET request, your computer may send the following to a server:\nGET / HTTP/2\nHost: www.harvard.edu\n\nNotice that this requests via HTTP the content served on www.harvard.edu.\nGenerally, after making a request to a server, you will receive the following in Response Headers:\nHTTP/2 200\nContent-Type: text/html\n\nThis approach to inspecting these logs may be a bit more complicated than need be. You can analyze the work of HTTP protocols at cs50.dev. For example, type the following in your terminal window:\ncurl -I https://www.harvard.edu/\n\nNotice that the output of this command returns all the header values of the responses of the server.\nVia developer tools in your web browser, you can see all the HTTP requests when browsing to the above website.\nFurther, execute the following command in your terminal window:\ncurl -I https://harvard.edu\n\nNotice that you will see a 301 response, providing a hint to a browser of where it can find the correct website.\nSimilarly, execute the following in your terminal window:\ncurl -I http://www.harvard.edu/\n\nNotice that the s in https has been removed. The server response will show that the response is 301, meaning that the website has permanently moved.\nSimilar to 301, a code of 404 means that a specified URL has not been found. There are numerous other response codes, such as:\n200 OK\n301 Moved Permanently\n302 Found\n304 Not Modified\n307 Temporary Redirect\n401 Unauthorized\n403 Forbidden\n404 Not Found\n418 I'm a Teapot\n500 Internal Server Error\n503 Service Unavailable\n\nIt’s worth mentioning that 500 errors are always your fault as the developer when they concern a product or application of your creation. This will be especially important for next week’s problem set, and potentially for your final project!\n\n\n\n\n\nHTML or hypertext markup language is made up of tags, each of which may have some attributes that describe it.\nIn your terminal, type code hello.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates HTML --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;hello, title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, body\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the html tag both opens and closes this file. Further, notice the lang attribute, which modifies the behavior of the html tag. Also, notice that there are both head tags and body tags. Indentation is not required but does suggest a hierarchy.\nYou can serve your code by typing http-server. This served content is now available on a very long URL. If you click it, you can visit the website generated by your own code.\nWhen you visit this URL, notice that the file name hello.html appears at the end of this URL. Further, notice, based upon the URL, that the server is serving via port 8080.\nThe hierarchy of tags can be represented as follows:\n\n\n\nhtml code next to a hierarchy showing parent and child nodes\n\n\nKnowledge of this hierarchy will be useful later as we learn JavaScript.\nThe browser will read your HTML file top to bottom and left to right.\nBecause whitespace and indentation are effectively ignored in HTML, you will need to use &lt;p&gt; paragraph tags to open and close a paragraph. Consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates paragraphs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;paragraphs&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that paragraphs start with a &lt;p&gt; tag and end with a &lt;/p&gt; tag.\nHTML allows for the representation of headings:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates headings (for chapters, sections, subsections, etc.) --&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;headings&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;One&lt;/h1&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n\n        &lt;h2&gt;Two&lt;/h2&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n\n        &lt;h3&gt;Three&lt;/h3&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n\n        &lt;h4&gt;Four&lt;/h4&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n\n        &lt;h5&gt;Five&lt;/h5&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n\n        &lt;h6&gt;Six&lt;/h6&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; denote different levels of headings.\nWe can also create unordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ul&gt; tag creates an unordered list containing three items.\nWe can also create ordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ol&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ol&gt; tag creates an ordered list containing three items.\nWe can also create a table in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;table&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;3&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;4&lt;/td&gt;\n                &lt;td&gt;5&lt;/td&gt;\n                &lt;td&gt;6&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;7&lt;/td&gt;\n                &lt;td&gt;8&lt;/td&gt;\n                &lt;td&gt;9&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;*&lt;/td&gt;\n                &lt;td&gt;0&lt;/td&gt;\n                &lt;td&gt;#&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nTables also have tags that open and close each element within. Also, notice the syntax for comments in HTML.\nImages can also be utilized within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates image --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;image&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img alt=\"photo of bridge\" src=\"bridge.png\"&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that src=\"bridge.png\" indicates the path where the image file can be located.\nVideos can also be included in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates video --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;video&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;video controls muted&gt;\n            &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n        &lt;/video&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the type attribute designates that this is a video of type mp4. Further, notice how controls and muted are passed to video.\nYou can also link between various web pages:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates link --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;link&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n       Visit &lt;a href=\"https://www.harvard.edu\"&gt;Harvard&lt;/a&gt;.\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;a&gt; or anchor tag is used to make Harvard a linkable text.\nYou can also create forms reminiscent of Google’s search:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates form --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input name=\"q\" type=\"search\"&gt;\n            &lt;input type=\"submit\" value=\"Google Search\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that a form tag opens and provides the attribute of what action it will take. The input field is included, passing the name q and the type as search.\nWe can make this search better as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates additional form attributes --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n            &lt;button&gt;Google Search&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that autocomplete is turned off. autofocus is enabled.\nWe’ve seen just a few of many HTML elements you can add to your site. If you have an idea for something to add to your site that we haven’t seen yet (a button, an audio file, etc.) try Googling “X in HTML” to find the right syntax! Similarly, you can use cs50.ai to help you discover more HTML features!\n\n\n\n\n\nRegular expressions or regexes are a means by which to ensure that user-provided data fits a specific format.\nWe can implement our own registration page that utilizes regexes as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates type=\"email\" --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the input tag includes attributes that designate that this is of type email. The browser knows to double-check that the input is an email address.\nWhile the browser uses these built-in attributes to check for an email address, we can add a pattern attribute to ensure that only specific data ends up in the email address:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates pattern attribute --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" pattern=\".+@.+\\.edu\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the pattern attribute is handed a regular expression to denote that the email address must include an @ symbol and a .edu.\nYou can learn more about regular expressions from Mozilla’s documentation. Further, you can make inquiries to cs50.ai for hints.\n\n\n\n\n\nCSS, or cascading style sheet, is a markup language that allows you to fine-tune the aesthetics of your HTML files.\nCSS is filled with properties, which include key-value pairs.\nIn your terminal, type code home.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates inline CSS with P tags --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p style=\"font-size: large; text-align: center;\"&gt;\n            John Harvard\n        &lt;/p&gt;\n        &lt;p style=\"font-size: medium; text-align: center;\"&gt;\n            Welcome to my home page!\n        &lt;/p&gt;\n        &lt;p style=\"font-size: small; text-align: center;\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that some style attributes are provided to the &lt;p&gt; tags. The font-size is set to large, medium, or small. Then text-align is set to center.\nWhile correct, the above is not well-designed. We can remove redundancy by modifying our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Removes outer DIV --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;div style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/div&gt;\n        &lt;div style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/div&gt;\n        &lt;div style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that &lt;div&gt; tags are used to divide up this HTML file into specific regions. text-align: center is invoked on the entire body of the HTML. Because everything inside body is a child of body, the center attribute cascades down to those children.\nIt turns out that there are newer semantic tags included in HTML. We can modify our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Uses semantic tags instead of DIVs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;header style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the header and footer both have different styles assigned to them.\nThis practice of placing the style and information all in the same location is not good practice. We could move the elements of style to the top of the file as follows:\n&lt;!-- Demonstrates class selectors --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n\n            .centered\n            {\n                text-align: center;\n            }\n\n            .large\n            {\n                font-size: large;\n            }\n\n            .medium\n            {\n                font-size: medium;\n            }\n\n            .small\n            {\n                font-size: small;\n            }\n\n        &lt;/style&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice all the style tags are placed up in the head in the style tag wrapper. Also, notice that we’ve assigned classes, called centered, large, medium, and small to our elements, and that we select those classes by placing a dot before the name, as in .centered\nIt turns out that we can move all our style code into a special file called a CSS file. We can create a file called style.css and paste our classes there:\n.centered\n{\n    text-align: center;\n}\n\n.large\n{\n    font-size: large;\n}\n\n.medium\n{\n    font-size: medium;\n}\n\n.small\n{\n    font-size: small;\n}\n\nNotice that this is verbatim what appeared in our HTML file.\nWe then can tell the browser where to locate the CSS for this HTML file:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates external stylesheets --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that style.css is linked to this HTML file as a stylesheet, telling the browser where to locate the styles we created.\n\n\n\n\n\nSimilar to third-party libraries we can leverage in Python, there are third-party libraries called frameworks that we can utilize with our HTML files.\nBootstrap is one of these frameworks that we can use to beautify our HTML and easily perfect design elements such that our pages are more readable.\nBootstrap can be utilized by adding the following link tag in the head of your html file:\n&lt;head&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;title&gt;bootstrap&lt;/title&gt;\n&lt;/head&gt;\n\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;John&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how, when looking at a served version of this page, it’s quite plain.\nNow consider the following HTML that implements the use of Bootstrap:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table class=\"table\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n                    &lt;th scope=\"col\"&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how much prettier this website is now.\nSimilarly, consider the following expansion of our search page created earlier:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates layout with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;div class=\"container-fluid\"&gt;\n\n            &lt;ul class=\"m-3 nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://about.google/\"&gt;About&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://store.google.com/\"&gt;Store&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item ms-auto\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/gmail/\"&gt;Gmail&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/imghp\"&gt;Images&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/intl/en/about/products\"&gt;\n                        &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-grid-3x3-gap-fill\" viewBox=\"0 0 16 16\"&gt;\n                            &lt;path d=\"M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z\"/&gt;\n                        &lt;/svg&gt;\n                    &lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"btn btn-primary\" href=\"https://accounts.google.com/ServiceLogin\" role=\"button\"&gt;Sign in&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;div class=\"text-center\"&gt;\n\n                &lt;!-- https://knowyourmeme.com/memes/happy-cat --&gt;\n                &lt;img alt=\"Happy Cat\" class=\"img-fluid w-25\" src=\"cat.gif\"&gt;\n\n                &lt;form action=\"https://www.google.com/search\" class=\"mt-4\" method=\"get\"&gt;\n                    &lt;input autocomplete=\"off\" autofocus class=\"form-control form-control-lg mb-4 mx-auto w-50\" name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n                    &lt;button class=\"btn btn-light\"&gt;Google Search&lt;/button&gt;\n                    &lt;button class=\"btn btn-light\" name=\"btnI\"&gt;I'm Feeling Lucky&lt;/button&gt;\n                &lt;/form&gt;\n\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis version of the page is exceedingly stylized, thanks to Bootstrap.\nYou can learn more about this in the Bootstrap Documentation.\n\n\n\n\n\nJavaScript is another programming language that allows for interactivity within web pages.\nConsider the following implementation of hello.html that includes both JavaScript and HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates onsubmit --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            function greet()\n            {\n                alert('hello, ' + document.querySelector('#name').value);\n            }\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form onsubmit=\"greet(); return false;\"&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how this form uses an onsubmit property to trigger a script found at the top of the file. The script uses alert to create an alert pop-up. #name.value goes to the textbox on the page and obtains the value typed by the user.\nGenerally, it’s considered bad design to mix onsubmit and JavaScript. We can advance our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates DOMContentLoaded --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                document.querySelector('form').addEventListener('submit', function(e) {\n                    alert('hello, ' + document.querySelector('#name').value);\n                    e.preventDefault();\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that this version of the code creates an addEventListener to listen to the form submit being triggered. Notice how DOMContentLoaded ensures that the whole page is loaded before executing the JavaScript.\nWe can advance this code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates keyup and template literals --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                let input = document.querySelector('input');\n                input.addEventListener('keyup', function(event) {\n                    let name = document.querySelector('p');\n                    if (input.value) {\n                        name.innerHTML = `hello, ${input.value}`;\n                    }\n                    else {\n                        name.innerHTML = 'hello, whoever you are';\n                    }\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus placeholder=\"Name\" type=\"text\"&gt;\n        &lt;/form&gt;\n        &lt;p&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the DOM is dynamically updated in memory as the user types out a name. If there is a value inside input, upon the keyup on the keyboard, the DOM is updated. Otherwise, default text is presented.\nJavaScript allows you to dynamically read and modify the html document loaded into memory such that the user need not reload to see changes.\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates programmatic changes to style --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;background&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button id=\"red\"&gt;R&lt;/button&gt;\n        &lt;button id=\"green\"&gt;G&lt;/button&gt;\n        &lt;button id=\"blue\"&gt;B&lt;/button&gt;\n        &lt;script&gt;\n\n            let body = document.querySelector('body');\n            document.querySelector('#red').addEventListener('click', function() {\n                body.style.backgroundColor = 'red';\n            });\n            document.querySelector('#green').addEventListener('click', function() {\n                body.style.backgroundColor = 'green';\n            });\n            document.querySelector('#blue').addEventListener('click', function() {\n                body.style.backgroundColor = 'blue';\n            });\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that JavaScript listens for when a specific button is clicked. Upon such a click, certain style attributes on the page are changed. body is defined as the body of the page. Then, an event listener waits for the clicking of one of the buttons. Then, the body.style.backgroundColor is changed.\nSimilarly, consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            // Toggles visibility of greeting\n            function blink()\n            {\n                let body = document.querySelector('body');\n                if (body.style.visibility == 'hidden')\n                {\n                    body.style.visibility = 'visible';\n                }\n                else\n                {\n                    body.style.visibility = 'hidden';\n                }\n            }\n\n            // Blink every 500ms\n            window.setInterval(blink, 500);\n\n        &lt;/script&gt;\n        &lt;title&gt;blink&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, world\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis example blinks a text at a set interval. Notice that window.setInterval takes in two arguments: A function to be called and a waiting period (in milliseconds) between function calls.\nConsider the following implementation of JavaScript that autocompletes text:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;autocomplete&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script src=\"large.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n\n            let input = document.querySelector('input');\n            input.addEventListener('keyup', function(event) {\n                let html = '';\n                if (input.value) {\n                    for (word of WORDS) {\n                        if (word.startsWith(input.value)) {\n                            html += `&lt;li&gt;${word}&lt;/li&gt;`;\n                        }\n                    }\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis is a JavaScript implementation of autocomplete. This pulls from a file (not pictured here) called large.js that is a list of words.\nThe capabilities of JavaScript are many and can be found in the JavaScript Documentation.\n\n\n\n\nIn this lesson, you learned how to create your own HTML files, style them, leverage third-party frameworks, and utilize JavaScript. Specifically, we discussed…\n\nTCP/IP\nDNS\nHTML\nRegular expressions\nCSS\nFrameworks\nJavaScript\n\nSee you next time!"
  },
  {
    "objectID": "notes/notes_9.html#welcome",
    "href": "notes/notes_9.html#welcome",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "In previous weeks, we introduced you to Python, a high-level programming language that utilized the same building blocks we learned in C. Today, we will extend those building blocks further in HTML, CSS, and JavaScript."
  },
  {
    "objectID": "notes/notes_9.html#the-internet",
    "href": "notes/notes_9.html#the-internet",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "The internet is a technology that we all use.\nUsing our skills from previous weeks, we can build our own web pages and applications.\nThe ARPANET connected the first points on the internet to one another.\nDots between two points could be considered routers."
  },
  {
    "objectID": "notes/notes_9.html#routers",
    "href": "notes/notes_9.html#routers",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "To route data from one place to another, we need to make routing decisions. That is, someone needs to program how data is transferred from point A to point B.\nYou can imagine how data could take multiple paths from point A and point B, such that when a router is congested, data can flow through another path. Packets of data are transferred from one router to another, from one computer to another.\nTCP/IP are two protocols that allow computers to transfer data between them over the internet.\nIP or internet protocol is a way by which computers can identify one another across the internet. Every computer has a unique address in the world. Addresses are in this form:\n#.#.#.#\n\nNumbers range from 0 to 255. IP addresses are 32-bits, meaning that these addresses could accommodate over 4 billion addresses. Newer versions of IP addresses, implementing 128-bits, can accommodate far more computers!\nIn the real world, servers do a lot of work for us.\nPackets are structured as follows:\n0                   1                   2                   3  \n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|Version|  IHL  |Type of Service|          Total Length         |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|         Identification        |Flags|      Fragment Offset    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|  Time to Live |    Protocol   |         Header Checksum       |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       Source Address                          |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Destination Address                        |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                    Options                    |    Padding    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nPackets are standardized. The source and destination are held within each packet.\nTCP, or transmission control protocol, helps keep track of the sequence of packets being sent.\nFurther, TCP is used to distinguish web services from one another. For example, 80 is used to denote HTTP and 443 is used to denote HTTPS. These numbers are port numbers.\nWhen information is sent from one location to another, a source IP address, a destination IP address, and a TCP port number are sent.\nThese protocols are also used to fragment large files into multiple parts or packets. For example, a large photo of a cat can be sent in multiple packets. When a packet is lost, TCP/IP can request missing packets again from the origin server.\nTCP will acknowledge when all the data has been transmitted and received."
  },
  {
    "objectID": "notes/notes_9.html#dns",
    "href": "notes/notes_9.html#dns",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "It would be very tedious if you needed to remember an IP address to visit a website.\nDNS, or domain name systems, is a collection of servers on the internet that are used to route website addresses like harvard.edu to a specific IP address.\nDNS is simply a table or database that links specific, fully qualified domain names to specific IP addresses."
  },
  {
    "objectID": "notes/notes_9.html#dhcp",
    "href": "notes/notes_9.html#dhcp",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "DHCP is a protocol that ascertains the IP address of your device.\nFurther, this protocol defines the default gateway and nameservers your device uses."
  },
  {
    "objectID": "notes/notes_9.html#https",
    "href": "notes/notes_9.html#https",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "HTTP or hypertext transfer protocol is an application-level protocol that developers use to build powerful and useful things through the transfer of data from one place to another. HTTPS is a secure version of this protocol.\nWhen you see an address such as https://www.example.com you are actually implicitly visiting that address with a / at the end of it.\nThe path is what exists after that slash. For example, https://www.example.com/folder/file.html visits example.com and browses to the folder directory, and then visits the file named file.html.\nThe .com is called a top-level domain that is used to denote the location or type of organization associated with this address.\nhttps in this address is the protocol that is used to connect to that web address. By protocol, we mean that HTTP utilizes GET or POST requests to ask for information from a server. For example, you can launch Google Chrome, right-click, and click inspect. When you open the developer tools and visit Network, selecting Preserve log, you will see Request Headers. You’ll see mentions of GET. This is possible in other browsers as well, using slightly different methods.\nFor example, when issuing a GET request, your computer may send the following to a server:\nGET / HTTP/2\nHost: www.harvard.edu\n\nNotice that this requests via HTTP the content served on www.harvard.edu.\nGenerally, after making a request to a server, you will receive the following in Response Headers:\nHTTP/2 200\nContent-Type: text/html\n\nThis approach to inspecting these logs may be a bit more complicated than need be. You can analyze the work of HTTP protocols at cs50.dev. For example, type the following in your terminal window:\ncurl -I https://www.harvard.edu/\n\nNotice that the output of this command returns all the header values of the responses of the server.\nVia developer tools in your web browser, you can see all the HTTP requests when browsing to the above website.\nFurther, execute the following command in your terminal window:\ncurl -I https://harvard.edu\n\nNotice that you will see a 301 response, providing a hint to a browser of where it can find the correct website.\nSimilarly, execute the following in your terminal window:\ncurl -I http://www.harvard.edu/\n\nNotice that the s in https has been removed. The server response will show that the response is 301, meaning that the website has permanently moved.\nSimilar to 301, a code of 404 means that a specified URL has not been found. There are numerous other response codes, such as:\n200 OK\n301 Moved Permanently\n302 Found\n304 Not Modified\n307 Temporary Redirect\n401 Unauthorized\n403 Forbidden\n404 Not Found\n418 I'm a Teapot\n500 Internal Server Error\n503 Service Unavailable\n\nIt’s worth mentioning that 500 errors are always your fault as the developer when they concern a product or application of your creation. This will be especially important for next week’s problem set, and potentially for your final project!"
  },
  {
    "objectID": "notes/notes_9.html#html",
    "href": "notes/notes_9.html#html",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "HTML or hypertext markup language is made up of tags, each of which may have some attributes that describe it.\nIn your terminal, type code hello.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates HTML --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;hello, title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, body\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the html tag both opens and closes this file. Further, notice the lang attribute, which modifies the behavior of the html tag. Also, notice that there are both head tags and body tags. Indentation is not required but does suggest a hierarchy.\nYou can serve your code by typing http-server. This served content is now available on a very long URL. If you click it, you can visit the website generated by your own code.\nWhen you visit this URL, notice that the file name hello.html appears at the end of this URL. Further, notice, based upon the URL, that the server is serving via port 8080.\nThe hierarchy of tags can be represented as follows:\n\n\n\nhtml code next to a hierarchy showing parent and child nodes\n\n\nKnowledge of this hierarchy will be useful later as we learn JavaScript.\nThe browser will read your HTML file top to bottom and left to right.\nBecause whitespace and indentation are effectively ignored in HTML, you will need to use &lt;p&gt; paragraph tags to open and close a paragraph. Consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates paragraphs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;paragraphs&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that paragraphs start with a &lt;p&gt; tag and end with a &lt;/p&gt; tag.\nHTML allows for the representation of headings:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates headings (for chapters, sections, subsections, etc.) --&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;headings&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;One&lt;/h1&gt;\n        &lt;p&gt;\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus convallis scelerisque quam, vel hendrerit lectus viverra eu. Praesent posuere eget lectus ut faucibus. Etiam eu velit laoreet, gravida lorem in, viverra est. Cras ut purus neque. In porttitor non lorem id lobortis. Mauris gravida metus libero, quis maximus dui porta at. Donec lacinia felis consectetur venenatis scelerisque. Nulla eu nisl sollicitudin, varius velit sit amet, vehicula erat. Curabitur sollicitudin felis sit amet orci mattis, a tempus nulla pulvinar. Aliquam erat volutpat.\n        &lt;/p&gt;\n\n        &lt;h2&gt;Two&lt;/h2&gt;\n        &lt;p&gt;\n            Mauris ut dui in eros semper hendrerit. Morbi vel elit mi. Sed sit amet ex non quam dignissim dignissim et vel arcu. Pellentesque eget elementum orci. Morbi ac cursus ex. Pellentesque quis turpis blandit orci dapibus semper sed non nunc. Nulla et dolor nec lacus finibus volutpat. Sed non lorem diam. Donec feugiat interdum interdum. Vivamus et justo in enim blandit fermentum vel at elit. Phasellus eu ante vitae ligula varius aliquet. Etiam id posuere nibh.\n        &lt;/p&gt;\n\n        &lt;h3&gt;Three&lt;/h3&gt;\n        &lt;p&gt;\n            Aenean venenatis convallis ante a rhoncus. Nullam in metus vel diam vehicula tincidunt. Donec lacinia metus sem, sit amet egestas elit blandit sit amet. Nunc egestas sem quis nisl mattis semper. Pellentesque ut magna congue lorem eleifend sodales. Donec tortor tortor, aliquam vitae mollis sed, interdum ut lectus. Mauris non purus quis ipsum lacinia tincidunt.\n        &lt;/p&gt;\n\n        &lt;h4&gt;Four&lt;/h4&gt;\n        &lt;p&gt;\n            Integer at justo lacinia libero blandit aliquam ut ut dui. Quisque tincidunt facilisis venenatis. Nullam dictum odio quis lorem luctus, vel malesuada dolor luctus. Aenean placerat faucibus enim a facilisis. Maecenas eleifend quis massa sed eleifend. Ut ultricies, dui ac vulputate hendrerit, ex metus iaculis diam, vitae fermentum libero dui et ante. Phasellus suscipit, arcu ut consequat sagittis, massa urna accumsan massa, eu aliquet nulla lorem vitae arcu. Pellentesque rutrum felis et metus porta semper. Nam ac consectetur mauris.\n        &lt;/p&gt;\n\n        &lt;h5&gt;Five&lt;/h5&gt;\n        &lt;p&gt;\n            Suspendisse rutrum vestibulum odio, sed venenatis purus condimentum sed. Morbi ornare tincidunt augue eu auctor. Vivamus sagittis ac lectus at aliquet. Nulla urna mauris, interdum non nibh in, vehicula porta enim. Donec et posuere sapien. Pellentesque ultrices scelerisque ipsum, vel fermentum nibh tincidunt et. Proin gravida porta ipsum nec scelerisque. Vestibulum fringilla erat at turpis laoreet, nec hendrerit nisi scelerisque.\n        &lt;/p&gt;\n\n        &lt;h6&gt;Six&lt;/h6&gt;\n        &lt;p&gt;\n            Sed quis malesuada mi. Nam id purus quis augue sagittis pharetra. Nulla facilisi. Maecenas vel fringilla ante. Cras tristique, arcu sit amet blandit auctor, urna elit ultricies lacus, a malesuada eros dui id massa. Aliquam sem odio, pretium vel cursus eget, scelerisque at urna. Vestibulum posuere a turpis consectetur consectetur. Cras consequat, risus quis tempor egestas, nulla ipsum ornare erat, nec accumsan nibh lorem nec risus. Integer at iaculis lacus. Integer congue nunc massa, quis molestie felis pellentesque vestibulum. Nulla odio tortor, aliquam nec quam in, ornare aliquet sapien.\n        &lt;/p&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\n\nNotice that &lt;h1&gt;, &lt;h2&gt;, and &lt;h3&gt; denote different levels of headings.\nWe can also create unordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ul&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ul&gt; tag creates an unordered list containing three items.\nWe can also create ordered lists within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates (ordered) lists --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;list&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;ol&gt;\n            &lt;li&gt;foo&lt;/li&gt;\n            &lt;li&gt;bar&lt;/li&gt;\n            &lt;li&gt;baz&lt;/li&gt;\n        &lt;/ol&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;ol&gt; tag creates an ordered list containing three items.\nWe can also create a table in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;table&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;1&lt;/td&gt;\n                &lt;td&gt;2&lt;/td&gt;\n                &lt;td&gt;3&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;4&lt;/td&gt;\n                &lt;td&gt;5&lt;/td&gt;\n                &lt;td&gt;6&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;7&lt;/td&gt;\n                &lt;td&gt;8&lt;/td&gt;\n                &lt;td&gt;9&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;*&lt;/td&gt;\n                &lt;td&gt;0&lt;/td&gt;\n                &lt;td&gt;#&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nTables also have tags that open and close each element within. Also, notice the syntax for comments in HTML.\nImages can also be utilized within HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates image --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;image&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img alt=\"photo of bridge\" src=\"bridge.png\"&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that src=\"bridge.png\" indicates the path where the image file can be located.\nVideos can also be included in HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates video --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;video&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;video controls muted&gt;\n            &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n        &lt;/video&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the type attribute designates that this is a video of type mp4. Further, notice how controls and muted are passed to video.\nYou can also link between various web pages:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates link --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;link&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n       Visit &lt;a href=\"https://www.harvard.edu\"&gt;Harvard&lt;/a&gt;.\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the &lt;a&gt; or anchor tag is used to make Harvard a linkable text.\nYou can also create forms reminiscent of Google’s search:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates form --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input name=\"q\" type=\"search\"&gt;\n            &lt;input type=\"submit\" value=\"Google Search\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that a form tag opens and provides the attribute of what action it will take. The input field is included, passing the name q and the type as search.\nWe can make this search better as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates additional form attributes --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=\"https://www.google.com/search\" method=\"get\"&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n            &lt;button&gt;Google Search&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that autocomplete is turned off. autofocus is enabled.\nWe’ve seen just a few of many HTML elements you can add to your site. If you have an idea for something to add to your site that we haven’t seen yet (a button, an audio file, etc.) try Googling “X in HTML” to find the right syntax! Similarly, you can use cs50.ai to help you discover more HTML features!"
  },
  {
    "objectID": "notes/notes_9.html#regular-expressions",
    "href": "notes/notes_9.html#regular-expressions",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Regular expressions or regexes are a means by which to ensure that user-provided data fits a specific format.\nWe can implement our own registration page that utilizes regexes as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates type=\"email\" --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the input tag includes attributes that designate that this is of type email. The browser knows to double-check that the input is an email address.\nWhile the browser uses these built-in attributes to check for an email address, we can add a pattern attribute to ensure that only specific data ends up in the email address:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates pattern attribute --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;register&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus name=\"email\" pattern=\".+@.+\\.edu\" placeholder=\"Email\" type=\"email\"&gt;\n            &lt;button&gt;Register&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the pattern attribute is handed a regular expression to denote that the email address must include an @ symbol and a .edu.\nYou can learn more about regular expressions from Mozilla’s documentation. Further, you can make inquiries to cs50.ai for hints."
  },
  {
    "objectID": "notes/notes_9.html#css",
    "href": "notes/notes_9.html#css",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "CSS, or cascading style sheet, is a markup language that allows you to fine-tune the aesthetics of your HTML files.\nCSS is filled with properties, which include key-value pairs.\nIn your terminal, type code home.html and write code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates inline CSS with P tags --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p style=\"font-size: large; text-align: center;\"&gt;\n            John Harvard\n        &lt;/p&gt;\n        &lt;p style=\"font-size: medium; text-align: center;\"&gt;\n            Welcome to my home page!\n        &lt;/p&gt;\n        &lt;p style=\"font-size: small; text-align: center;\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that some style attributes are provided to the &lt;p&gt; tags. The font-size is set to large, medium, or small. Then text-align is set to center.\nWhile correct, the above is not well-designed. We can remove redundancy by modifying our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Removes outer DIV --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;div style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/div&gt;\n        &lt;div style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/div&gt;\n        &lt;div style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that &lt;div&gt; tags are used to divide up this HTML file into specific regions. text-align: center is invoked on the entire body of the HTML. Because everything inside body is a child of body, the center attribute cascades down to those children.\nIt turns out that there are newer semantic tags included in HTML. We can modify our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Uses semantic tags instead of DIVs --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"text-align: center\"&gt;\n        &lt;header style=\"font-size: large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main style=\"font-size: medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer style=\"font-size: small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the header and footer both have different styles assigned to them.\nThis practice of placing the style and information all in the same location is not good practice. We could move the elements of style to the top of the file as follows:\n&lt;!-- Demonstrates class selectors --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;style&gt;\n\n            .centered\n            {\n                text-align: center;\n            }\n\n            .large\n            {\n                font-size: large;\n            }\n\n            .medium\n            {\n                font-size: medium;\n            }\n\n            .small\n            {\n                font-size: small;\n            }\n\n        &lt;/style&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice all the style tags are placed up in the head in the style tag wrapper. Also, notice that we’ve assigned classes, called centered, large, medium, and small to our elements, and that we select those classes by placing a dot before the name, as in .centered\nIt turns out that we can move all our style code into a special file called a CSS file. We can create a file called style.css and paste our classes there:\n.centered\n{\n    text-align: center;\n}\n\n.large\n{\n    font-size: large;\n}\n\n.medium\n{\n    font-size: medium;\n}\n\n.small\n{\n    font-size: small;\n}\n\nNotice that this is verbatim what appeared in our HTML file.\nWe then can tell the browser where to locate the CSS for this HTML file:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates external stylesheets --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"style.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;css&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body class=\"centered\"&gt;\n        &lt;header class=\"large\"&gt;\n            John Harvard\n        &lt;/header&gt;\n        &lt;main class=\"medium\"&gt;\n            Welcome to my home page!\n        &lt;/main&gt;\n        &lt;footer class=\"small\"&gt;\n            Copyright &#169; John Harvard\n        &lt;/footer&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that style.css is linked to this HTML file as a stylesheet, telling the browser where to locate the styles we created."
  },
  {
    "objectID": "notes/notes_9.html#frameworks",
    "href": "notes/notes_9.html#frameworks",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "Similar to third-party libraries we can leverage in Python, there are third-party libraries called frameworks that we can utilize with our HTML files.\nBootstrap is one of these frameworks that we can use to beautify our HTML and easily perfect design elements such that our pages are more readable.\nBootstrap can be utilized by adding the following link tag in the head of your html file:\n&lt;head&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n    &lt;title&gt;bootstrap&lt;/title&gt;\n&lt;/head&gt;\n\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;John&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how, when looking at a served version of this page, it’s quite plain.\nNow consider the following HTML that implements the use of Bootstrap:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates table with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;phonebook&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;table class=\"table\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th scope=\"col\"&gt;Name&lt;/th&gt;\n                    &lt;th scope=\"col\"&gt;Number&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;Carter&lt;/td&gt;\n                    &lt;td&gt;+1-617-495-1000&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;David&lt;/td&gt;\n                    &lt;td&gt;+1-949-468-2750&lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how much prettier this website is now.\nSimilarly, consider the following expansion of our search page created earlier:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates layout with Bootstrap --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n        &lt;title&gt;search&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;div class=\"container-fluid\"&gt;\n\n            &lt;ul class=\"m-3 nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://about.google/\"&gt;About&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://store.google.com/\"&gt;Store&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item ms-auto\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/gmail/\"&gt;Gmail&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/imghp\"&gt;Images&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link text-dark\" href=\"https://www.google.com/intl/en/about/products\"&gt;\n                        &lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-grid-3x3-gap-fill\" viewBox=\"0 0 16 16\"&gt;\n                            &lt;path d=\"M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z\"/&gt;\n                        &lt;/svg&gt;\n                    &lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"btn btn-primary\" href=\"https://accounts.google.com/ServiceLogin\" role=\"button\"&gt;Sign in&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;div class=\"text-center\"&gt;\n\n                &lt;!-- https://knowyourmeme.com/memes/happy-cat --&gt;\n                &lt;img alt=\"Happy Cat\" class=\"img-fluid w-25\" src=\"cat.gif\"&gt;\n\n                &lt;form action=\"https://www.google.com/search\" class=\"mt-4\" method=\"get\"&gt;\n                    &lt;input autocomplete=\"off\" autofocus class=\"form-control form-control-lg mb-4 mx-auto w-50\" name=\"q\" placeholder=\"Query\" type=\"search\"&gt;\n                    &lt;button class=\"btn btn-light\"&gt;Google Search&lt;/button&gt;\n                    &lt;button class=\"btn btn-light\" name=\"btnI\"&gt;I'm Feeling Lucky&lt;/button&gt;\n                &lt;/form&gt;\n\n            &lt;/div&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis version of the page is exceedingly stylized, thanks to Bootstrap.\nYou can learn more about this in the Bootstrap Documentation."
  },
  {
    "objectID": "notes/notes_9.html#javascript",
    "href": "notes/notes_9.html#javascript",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "JavaScript is another programming language that allows for interactivity within web pages.\nConsider the following implementation of hello.html that includes both JavaScript and HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates onsubmit --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            function greet()\n            {\n                alert('hello, ' + document.querySelector('#name').value);\n            }\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form onsubmit=\"greet(); return false;\"&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice how this form uses an onsubmit property to trigger a script found at the top of the file. The script uses alert to create an alert pop-up. #name.value goes to the textbox on the page and obtains the value typed by the user.\nGenerally, it’s considered bad design to mix onsubmit and JavaScript. We can advance our code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates DOMContentLoaded --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                document.querySelector('form').addEventListener('submit', function(e) {\n                    alert('hello, ' + document.querySelector('#name').value);\n                    e.preventDefault();\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus id=\"name\" placeholder=\"Name\" type=\"text\"&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that this version of the code creates an addEventListener to listen to the form submit being triggered. Notice how DOMContentLoaded ensures that the whole page is loaded before executing the JavaScript.\nWe can advance this code as follows:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates keyup and template literals --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            document.addEventListener('DOMContentLoaded', function() {\n                let input = document.querySelector('input');\n                input.addEventListener('keyup', function(event) {\n                    let name = document.querySelector('p');\n                    if (input.value) {\n                        name.innerHTML = `hello, ${input.value}`;\n                    }\n                    else {\n                        name.innerHTML = 'hello, whoever you are';\n                    }\n                });\n            });\n\n        &lt;/script&gt;\n        &lt;title&gt;hello&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form&gt;\n            &lt;input autocomplete=\"off\" autofocus placeholder=\"Name\" type=\"text\"&gt;\n        &lt;/form&gt;\n        &lt;p&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that the DOM is dynamically updated in memory as the user types out a name. If there is a value inside input, upon the keyup on the keyboard, the DOM is updated. Otherwise, default text is presented.\nJavaScript allows you to dynamically read and modify the html document loaded into memory such that the user need not reload to see changes.\nConsider the following HTML:\n&lt;!DOCTYPE html&gt;\n\n&lt;!-- Demonstrates programmatic changes to style --&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;background&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;button id=\"red\"&gt;R&lt;/button&gt;\n        &lt;button id=\"green\"&gt;G&lt;/button&gt;\n        &lt;button id=\"blue\"&gt;B&lt;/button&gt;\n        &lt;script&gt;\n\n            let body = document.querySelector('body');\n            document.querySelector('#red').addEventListener('click', function() {\n                body.style.backgroundColor = 'red';\n            });\n            document.querySelector('#green').addEventListener('click', function() {\n                body.style.backgroundColor = 'green';\n            });\n            document.querySelector('#blue').addEventListener('click', function() {\n                body.style.backgroundColor = 'blue';\n            });\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\nNotice that JavaScript listens for when a specific button is clicked. Upon such a click, certain style attributes on the page are changed. body is defined as the body of the page. Then, an event listener waits for the clicking of one of the buttons. Then, the body.style.backgroundColor is changed.\nSimilarly, consider the following:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n\n            // Toggles visibility of greeting\n            function blink()\n            {\n                let body = document.querySelector('body');\n                if (body.style.visibility == 'hidden')\n                {\n                    body.style.visibility = 'visible';\n                }\n                else\n                {\n                    body.style.visibility = 'hidden';\n                }\n            }\n\n            // Blink every 500ms\n            window.setInterval(blink, 500);\n\n        &lt;/script&gt;\n        &lt;title&gt;blink&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        hello, world\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis example blinks a text at a set interval. Notice that window.setInterval takes in two arguments: A function to be called and a waiting period (in milliseconds) between function calls.\nConsider the following implementation of JavaScript that autocompletes text:\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n    &lt;head&gt;\n        &lt;title&gt;autocomplete&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;input autocomplete=\"off\" autofocus placeholder=\"Query\" type=\"text\"&gt;\n\n        &lt;ul&gt;&lt;/ul&gt;\n\n        &lt;script src=\"large.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n\n            let input = document.querySelector('input');\n            input.addEventListener('keyup', function(event) {\n                let html = '';\n                if (input.value) {\n                    for (word of WORDS) {\n                        if (word.startsWith(input.value)) {\n                            html += `&lt;li&gt;${word}&lt;/li&gt;`;\n                        }\n                    }\n                }\n                document.querySelector('ul').innerHTML = html;\n            });\n\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis is a JavaScript implementation of autocomplete. This pulls from a file (not pictured here) called large.js that is a list of words.\nThe capabilities of JavaScript are many and can be found in the JavaScript Documentation."
  },
  {
    "objectID": "notes/notes_9.html#summing-up",
    "href": "notes/notes_9.html#summing-up",
    "title": "Lecture 9 Notes",
    "section": "",
    "text": "In this lesson, you learned how to create your own HTML files, style them, leverage third-party frameworks, and utilize JavaScript. Specifically, we discussed…\n\nTCP/IP\nDNS\nHTML\nRegular expressions\nCSS\nFrameworks\nJavaScript\n\nSee you next time!"
  },
  {
    "objectID": "slides/lec-1.html#meet-the-professor",
    "href": "slides/lec-1.html#meet-the-professor",
    "title": "Welcome to STA 210!",
    "section": "Meet the professor",
    "text": "Meet the professor\n\n\n\n\n\nDr. Mine Çetinkaya-Rundel (she/her)\n\n\n\n\nProfessor of the Practice & Director of Undergraduate Studies, Department of Statistical Science\nAffiliated Faculty, Computational Media, Arts & Cultures\nFind out more at mine-cr.com"
  },
  {
    "objectID": "slides/lec-1.html#meet-the-tas",
    "href": "slides/lec-1.html#meet-the-tas",
    "title": "Welcome to STA 210!",
    "section": "Meet the TAs",
    "text": "Meet the TAs\n\nMartha Aboagye (she/her, UG)\nRich Fremgen (he/him, MS)\nEmily Gentles (she/her, MS)\nSara Mehta (she/her, UG)\nRick Presman (he/him, PhD)\nShari Tian (she/her, UG)\nAaditya Warrier (he/him, UG)"
  },
  {
    "objectID": "slides/lec-1.html#check-out-conversations",
    "href": "slides/lec-1.html#check-out-conversations",
    "title": "Welcome to STA 210!",
    "section": "Check out Conversations",
    "text": "Check out Conversations\n\nGo to Conversations 💬\nAnswer the discussion question: How are you doing?"
  },
  {
    "objectID": "slides/lec-1.html#what-is-regression-analysis",
    "href": "slides/lec-1.html#what-is-regression-analysis",
    "title": "Welcome to STA 210!",
    "section": "What is regression analysis",
    "text": "What is regression analysis\n\n\n“In statistical modeling, regression analysis is a set of statistical processes for estimating the relationships among variables. It includes many techniques for modeling and analyzing several variables, when the focus is on the relationship between a dependent variable and one or more independent variables (or predictors). More specifically, regression analysis helps one understand how the typical value of the dependent variable (or ‘criterion variable’) changes when any one of the independent variables is varied, while the other independent variables are held fixed.”\n\n\nSource: Wikipedia"
  },
  {
    "objectID": "slides/lec-1.html#course-faq",
    "href": "slides/lec-1.html#course-faq",
    "title": "Welcome to STA 210!",
    "section": "Course FAQ",
    "text": "Course FAQ\n\nWhat background is assumed for the course? Introductory statistics or probability course.\nWill we be doing computing? Yes. We will use R.\nWill we learn the mathematical theory of regression? Yes and No. The course is primarily focused on application; however, we will discuss some of the mathematics of simple linear regression. The 1-credit course STA 211: Mathematics of Regression you can take simultaneously / after dives into more of the mathematics."
  },
  {
    "objectID": "slides/lec-1.html#course-learning-objectives",
    "href": "slides/lec-1.html#course-learning-objectives",
    "title": "Welcome to STA 210!",
    "section": "Course learning objectives",
    "text": "Course learning objectives\n\nAnalyze real-world data to answer questions about multivariable relationships.\nFit and evaluate linear and logistic regression models.\nAssess whether a proposed model is appropriate and describe its limitations.\nUse Quarto to write reproducible reports and GitHub for version control and collaboration.\nCommunicate results from statistical analyses to a general audience."
  },
  {
    "objectID": "slides/lec-1.html#examples-of-regression-in-practice",
    "href": "slides/lec-1.html#examples-of-regression-in-practice",
    "title": "Welcome to STA 210!",
    "section": "Examples of regression in practice",
    "text": "Examples of regression in practice\n\nNew Yorkers Will Pay $56 A Month To Trim A Minute Off Their Commute\nHow FiveThirtyEight’s 2020 Presidential Forecast Works — And What’s Different Because Of COVID-19\nEffect of Forensic Evidence on Criminal Justice Case Processing\nWhy it’s so freaking hard to make a good COVID-19 model"
  },
  {
    "objectID": "slides/lec-1.html#homepage",
    "href": "slides/lec-1.html#homepage",
    "title": "Welcome to STA 210!",
    "section": "Homepage",
    "text": "Homepage\nsta210-s22.github.io/website\n\nAll course materials\nLinks to Sakai, GitHub, RStudio containers, etc.\nLet’s take a tour!"
  },
  {
    "objectID": "slides/lec-1.html#course-toolkit",
    "href": "slides/lec-1.html#course-toolkit",
    "title": "Welcome to STA 210!",
    "section": "Course toolkit",
    "text": "Course toolkit\nAll linked from the course website:\n\nGitHub organization: github.com/sta210-s22\nRStudio containers: cmgr.oit.duke.edu/containers\nDiscussion forum: Conversations\nAssignment submission and feedback: Gradescope\n\n\n\n\n\n\n\nImportant\n\n\nReserve an RStudio Container (titled STA 210) before lab on Monday!"
  },
  {
    "objectID": "slides/lec-1.html#activities-prepare-participate-practice-perform",
    "href": "slides/lec-1.html#activities-prepare-participate-practice-perform",
    "title": "Welcome to STA 210!",
    "section": "Activities: Prepare, Participate, Practice, Perform",
    "text": "Activities: Prepare, Participate, Practice, Perform\n\nPrepare: Introduce new content and prepare for lectures by completing the readings (and sometimes watching the videos)\nParticipate: Attend and actively participate in lectures and labs, office hours, team meetings\nPractice: Practice applying statistical concepts and computing with application exercises during lecture, graded for completion\nPerform: Put together what you’ve learned to analyze real-world data\n\nLab assignments x 7 (first individual, later team-based)\nHomework assignments x 5 (individual)\nThree take-home exams\nTerm project presented during the final exam period"
  },
  {
    "objectID": "slides/lec-1.html#cadence",
    "href": "slides/lec-1.html#cadence",
    "title": "Welcome to STA 210!",
    "section": "Cadence",
    "text": "Cadence\n\nLabs: Start and make large progress on Monday in lab section, finish up by Friday 5pm of that week\nHWs: Posted Friday morning, due following Friday 5pm\nExams: Exam review Thursday in class, exam posted Friday morning, no lab on Monday of following week, due Monday 11:59pm\nProject: Deadlines throughout the semester, with some lab and lecture time dedicated to working on them, and most work done in teams outside of class"
  },
  {
    "objectID": "slides/lec-1.html#teams",
    "href": "slides/lec-1.html#teams",
    "title": "Welcome to STA 210!",
    "section": "Teams",
    "text": "Teams\n\nTeam assignments\n\nAssigned by me\nApplication exercises, labs, and project\nPeer evaluation during teamwork and after completion\n\nExpectations and roles\n\nEveryone is expected to contribute equal effort\nEveryone is expected to understand all code turned in\nIndividual contribution evaluated by peer evaluation, commits, etc."
  },
  {
    "objectID": "slides/lec-1.html#grading",
    "href": "slides/lec-1.html#grading",
    "title": "Welcome to STA 210!",
    "section": "Grading",
    "text": "Grading\n\n\n\nCategory\nPercentage\n\n\n\n\nApplication exercises\n3%\n\n\nHomework\n35% (7% x 5)\n\n\nProject\n15%\n\n\nLab\n14% (2% x 7)\n\n\nExam 01\n10%\n\n\nExam 02\n10%\n\n\nExam 03\n10%\n\n\nTeamwork\n3%\n\n\n\nSee course syllabus for how the final letter grade will be determined."
  },
  {
    "objectID": "slides/lec-1.html#support",
    "href": "slides/lec-1.html#support",
    "title": "Welcome to STA 210!",
    "section": "Support",
    "text": "Support\n\nAttend office hours\nAsk and answer questions on the discussion forum\nReserve email for questions on personal matters and/or grades\nRead the course support page"
  },
  {
    "objectID": "slides/lec-1.html#announcements",
    "href": "slides/lec-1.html#announcements",
    "title": "Welcome to STA 210!",
    "section": "Announcements",
    "text": "Announcements\n\nPosted on Sakai (Announcements tool) and sent via email, be sure to check both regularly\nI’ll assume that you’ve read an announcement by the next “business” day\nI’ll (try my best to) send a weekly update announcement each Friday, outlining the plan for the following week and reminding you what you need to do to prepare, practice, and perform"
  },
  {
    "objectID": "slides/lec-1.html#diversity-inclusion",
    "href": "slides/lec-1.html#diversity-inclusion",
    "title": "Welcome to STA 210!",
    "section": "Diversity + inclusion",
    "text": "Diversity + inclusion\nIt is my intent that students from all diverse backgrounds and perspectives be well-served by this course, that students’ learning needs be addressed both in and out of class, and that the diversity that the students bring to this class be viewed as a resource, strength and benefit.\n\nIf you have a name that differs from those that appear in your official Duke records, please let me know!\nPlease let me know your preferred pronouns. You’ll also be able to note this in the Getting to know you survey.\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to come and talk with me. I want to be a resource for you. If you prefer to speak with someone outside of the course, your advisers and deans are excellent resources.\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please talk to me about it."
  },
  {
    "objectID": "slides/lec-1.html#accessibility",
    "href": "slides/lec-1.html#accessibility",
    "title": "Welcome to STA 210!",
    "section": "Accessibility",
    "text": "Accessibility\n\nThe Student Disability Access Office (SDAO) is available to ensure that students are able to engage with their courses and related assignments.\nI am committed to making all course materials accessible and I’m always learning how to do this better. If any course component is not accessible to you in any way, please don’t hesitate to let me know."
  },
  {
    "objectID": "slides/lec-1.html#covid-policies",
    "href": "slides/lec-1.html#covid-policies",
    "title": "Welcome to STA 210!",
    "section": "COVID policies",
    "text": "COVID policies\n\nWear a mask at all times!\nRead and follow university guidance"
  },
  {
    "objectID": "slides/lec-1.html#late-work-waivers-regrades-policy",
    "href": "slides/lec-1.html#late-work-waivers-regrades-policy",
    "title": "Welcome to STA 210!",
    "section": "Late work, waivers, regrades policy",
    "text": "Late work, waivers, regrades policy\n\nWe have policies!\nRead about them on the course syllabus and refer back to them when you need it"
  },
  {
    "objectID": "slides/lec-1.html#collaboration-policy",
    "href": "slides/lec-1.html#collaboration-policy",
    "title": "Welcome to STA 210!",
    "section": "Collaboration policy",
    "text": "Collaboration policy\n\nOnly work that is clearly assigned as team work should be completed collaboratively.\nHomeworks must be completed individually. You may not directly share answers / code with others, however you are welcome to discuss the problems in general and ask for advice.\nExams must be completed individually. You may not discuss any aspect of the exam with peers. If you have questions, post as private questions on the course forum, only the teaching team will see and answer."
  },
  {
    "objectID": "slides/lec-1.html#sharing-reusing-code-policy",
    "href": "slides/lec-1.html#sharing-reusing-code-policy",
    "title": "Welcome to STA 210!",
    "section": "Sharing / reusing code policy",
    "text": "Sharing / reusing code policy\n\nWe are aware that a huge volume of code is available on the web, and many tasks may have solutions posted\nUnless explicitly stated otherwise, this course’s policy is that you may make use of any online resources (e.g. RStudio Community, StackOverflow, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).\nAny recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source"
  },
  {
    "objectID": "slides/lec-1.html#academic-integrity",
    "href": "slides/lec-1.html#academic-integrity",
    "title": "Welcome to STA 210!",
    "section": "Academic integrity",
    "text": "Academic integrity\n\nTo uphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised."
  },
  {
    "objectID": "slides/lec-1.html#most-importantly",
    "href": "slides/lec-1.html#most-importantly",
    "title": "Welcome to STA 210!",
    "section": "Most importantly!",
    "text": "Most importantly!\nAsk if you’re not sure if something violates a policy!"
  },
  {
    "objectID": "slides/lec-1.html#five-tips-for-success",
    "href": "slides/lec-1.html#five-tips-for-success",
    "title": "Welcome to STA 210!",
    "section": "Five tips for success",
    "text": "Five tips for success\n\nComplete all the preparation work before class.\nAsk questions.\nDo the readings.\nDo the homework and lab.\nDon’t procrastinate and don’t let a week pass by with lingering questions."
  },
  {
    "objectID": "slides/lec-1.html#learning-during-a-pandemic",
    "href": "slides/lec-1.html#learning-during-a-pandemic",
    "title": "Welcome to STA 210!",
    "section": "Learning during a pandemic",
    "text": "Learning during a pandemic\nI want to make sure that you learn everything you were hoping to learn from this class. If this requires flexibility, please don’t hesitate to ask.\n\nYou never owe me personal information about your health (mental or physical) but you’re always welcome to talk to me. If I can’t help, I likely know someone who can.\nI want you to learn lots of things from this class, but I primarily want you to stay healthy, balanced, and grounded during this crisis."
  },
  {
    "objectID": "slides/lec-1.html#this-weeks-tasks",
    "href": "slides/lec-1.html#this-weeks-tasks",
    "title": "Welcome to STA 210!",
    "section": "This week’s tasks",
    "text": "This week’s tasks\n\nGet a GitHub account if you don’t have one (some advice for choosing a username here)\nComplete the Getting to know you survey if you haven’t yet done so!\nRead the syllabus\nWatch out for next week’s announcement email, in your inbox sometime tomorrow"
  },
  {
    "objectID": "slides/lec-1.html#midori-says",
    "href": "slides/lec-1.html#midori-says",
    "title": "Welcome to STA 210!",
    "section": "Midori says…",
    "text": "Midori says…"
  }
]